
robotoreV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000840c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008750  08008750  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008758  08008758  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c080  20000070  080087d0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c0f0  080087d0  0002c0f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b29b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003527  00000000  00000000  0003b33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0003e868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003fd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b66  00000000  00000000  00041120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124ee  00000000  00000000  00063c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c93c2  00000000  00000000  00076174  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  0013f5b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008584 	.word	0x08008584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008584 	.word	0x08008584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_frsub>:
 80005e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005ec:	e002      	b.n	80005f4 <__addsf3>
 80005ee:	bf00      	nop

080005f0 <__aeabi_fsub>:
 80005f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005f4 <__addsf3>:
 80005f4:	0042      	lsls	r2, r0, #1
 80005f6:	bf1f      	itttt	ne
 80005f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005fc:	ea92 0f03 	teqne	r2, r3
 8000600:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000604:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000608:	d06a      	beq.n	80006e0 <__addsf3+0xec>
 800060a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800060e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000612:	bfc1      	itttt	gt
 8000614:	18d2      	addgt	r2, r2, r3
 8000616:	4041      	eorgt	r1, r0
 8000618:	4048      	eorgt	r0, r1
 800061a:	4041      	eorgt	r1, r0
 800061c:	bfb8      	it	lt
 800061e:	425b      	neglt	r3, r3
 8000620:	2b19      	cmp	r3, #25
 8000622:	bf88      	it	hi
 8000624:	4770      	bxhi	lr
 8000626:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800062e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800063e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4249      	negne	r1, r1
 8000646:	ea92 0f03 	teq	r2, r3
 800064a:	d03f      	beq.n	80006cc <__addsf3+0xd8>
 800064c:	f1a2 0201 	sub.w	r2, r2, #1
 8000650:	fa41 fc03 	asr.w	ip, r1, r3
 8000654:	eb10 000c 	adds.w	r0, r0, ip
 8000658:	f1c3 0320 	rsb	r3, r3, #32
 800065c:	fa01 f103 	lsl.w	r1, r1, r3
 8000660:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000664:	d502      	bpl.n	800066c <__addsf3+0x78>
 8000666:	4249      	negs	r1, r1
 8000668:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800066c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000670:	d313      	bcc.n	800069a <__addsf3+0xa6>
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d306      	bcc.n	8000686 <__addsf3+0x92>
 8000678:	0840      	lsrs	r0, r0, #1
 800067a:	ea4f 0131 	mov.w	r1, r1, rrx
 800067e:	f102 0201 	add.w	r2, r2, #1
 8000682:	2afe      	cmp	r2, #254	; 0xfe
 8000684:	d251      	bcs.n	800072a <__addsf3+0x136>
 8000686:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800068a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800068e:	bf08      	it	eq
 8000690:	f020 0001 	biceq.w	r0, r0, #1
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	4770      	bx	lr
 800069a:	0049      	lsls	r1, r1, #1
 800069c:	eb40 0000 	adc.w	r0, r0, r0
 80006a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80006a4:	f1a2 0201 	sub.w	r2, r2, #1
 80006a8:	d1ed      	bne.n	8000686 <__addsf3+0x92>
 80006aa:	fab0 fc80 	clz	ip, r0
 80006ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80006b2:	ebb2 020c 	subs.w	r2, r2, ip
 80006b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ba:	bfaa      	itet	ge
 80006bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c0:	4252      	neglt	r2, r2
 80006c2:	4318      	orrge	r0, r3
 80006c4:	bfbc      	itt	lt
 80006c6:	40d0      	lsrlt	r0, r2
 80006c8:	4318      	orrlt	r0, r3
 80006ca:	4770      	bx	lr
 80006cc:	f092 0f00 	teq	r2, #0
 80006d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006d4:	bf06      	itte	eq
 80006d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006da:	3201      	addeq	r2, #1
 80006dc:	3b01      	subne	r3, #1
 80006de:	e7b5      	b.n	800064c <__addsf3+0x58>
 80006e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e8:	bf18      	it	ne
 80006ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ee:	d021      	beq.n	8000734 <__addsf3+0x140>
 80006f0:	ea92 0f03 	teq	r2, r3
 80006f4:	d004      	beq.n	8000700 <__addsf3+0x10c>
 80006f6:	f092 0f00 	teq	r2, #0
 80006fa:	bf08      	it	eq
 80006fc:	4608      	moveq	r0, r1
 80006fe:	4770      	bx	lr
 8000700:	ea90 0f01 	teq	r0, r1
 8000704:	bf1c      	itt	ne
 8000706:	2000      	movne	r0, #0
 8000708:	4770      	bxne	lr
 800070a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800070e:	d104      	bne.n	800071a <__addsf3+0x126>
 8000710:	0040      	lsls	r0, r0, #1
 8000712:	bf28      	it	cs
 8000714:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000718:	4770      	bx	lr
 800071a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800071e:	bf3c      	itt	cc
 8000720:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bxcc	lr
 8000726:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800072a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800072e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000732:	4770      	bx	lr
 8000734:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000738:	bf16      	itet	ne
 800073a:	4608      	movne	r0, r1
 800073c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000740:	4601      	movne	r1, r0
 8000742:	0242      	lsls	r2, r0, #9
 8000744:	bf06      	itte	eq
 8000746:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800074a:	ea90 0f01 	teqeq	r0, r1
 800074e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000752:	4770      	bx	lr

08000754 <__aeabi_ui2f>:
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e004      	b.n	8000764 <__aeabi_i2f+0x8>
 800075a:	bf00      	nop

0800075c <__aeabi_i2f>:
 800075c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	ea5f 0c00 	movs.w	ip, r0
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000770:	4601      	mov	r1, r0
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	e01c      	b.n	80007b2 <__aeabi_l2f+0x2a>

08000778 <__aeabi_ul2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e00a      	b.n	800079c <__aeabi_l2f+0x14>
 8000786:	bf00      	nop

08000788 <__aeabi_l2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000794:	d502      	bpl.n	800079c <__aeabi_l2f+0x14>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	ea5f 0c01 	movs.w	ip, r1
 80007a0:	bf02      	ittt	eq
 80007a2:	4684      	moveq	ip, r0
 80007a4:	4601      	moveq	r1, r0
 80007a6:	2000      	moveq	r0, #0
 80007a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ac:	bf08      	it	eq
 80007ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007b6:	fabc f28c 	clz	r2, ip
 80007ba:	3a08      	subs	r2, #8
 80007bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c0:	db10      	blt.n	80007e4 <__aeabi_l2f+0x5c>
 80007c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007cc:	f1c2 0220 	rsb	r2, r2, #32
 80007d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007d4:	fa20 f202 	lsr.w	r2, r0, r2
 80007d8:	eb43 0002 	adc.w	r0, r3, r2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f102 0220 	add.w	r2, r2, #32
 80007e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ec:	f1c2 0220 	rsb	r2, r2, #32
 80007f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007f4:	fa21 f202 	lsr.w	r2, r1, r2
 80007f8:	eb43 0002 	adc.w	r0, r3, r2
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000802:	4770      	bx	lr

08000804 <__aeabi_uldivmod>:
 8000804:	b953      	cbnz	r3, 800081c <__aeabi_uldivmod+0x18>
 8000806:	b94a      	cbnz	r2, 800081c <__aeabi_uldivmod+0x18>
 8000808:	2900      	cmp	r1, #0
 800080a:	bf08      	it	eq
 800080c:	2800      	cmpeq	r0, #0
 800080e:	bf1c      	itt	ne
 8000810:	f04f 31ff 	movne.w	r1, #4294967295
 8000814:	f04f 30ff 	movne.w	r0, #4294967295
 8000818:	f000 b9a8 	b.w	8000b6c <__aeabi_idiv0>
 800081c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000820:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000824:	f000 f83c 	bl	80008a0 <__udivmoddi4>
 8000828:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000830:	b004      	add	sp, #16
 8000832:	4770      	bx	lr

08000834 <__aeabi_f2lz>:
 8000834:	ee07 0a90 	vmov	s15, r0
 8000838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	d401      	bmi.n	8000846 <__aeabi_f2lz+0x12>
 8000842:	f000 b809 	b.w	8000858 <__aeabi_f2ulz>
 8000846:	b508      	push	{r3, lr}
 8000848:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800084c:	f000 f804 	bl	8000858 <__aeabi_f2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_f2ulz>:
 8000858:	b5d0      	push	{r4, r6, r7, lr}
 800085a:	f7ff fe6d 	bl	8000538 <__aeabi_f2d>
 800085e:	2200      	movs	r2, #0
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <__aeabi_f2ulz+0x40>)
 8000862:	4606      	mov	r6, r0
 8000864:	460f      	mov	r7, r1
 8000866:	f000 f983 	bl	8000b70 <__aeabi_dmul>
 800086a:	f000 fb93 	bl	8000f94 <__aeabi_d2uiz>
 800086e:	4604      	mov	r4, r0
 8000870:	f7ff fe40 	bl	80004f4 <__aeabi_ui2d>
 8000874:	2200      	movs	r2, #0
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <__aeabi_f2ulz+0x44>)
 8000878:	f000 f97a 	bl	8000b70 <__aeabi_dmul>
 800087c:	4602      	mov	r2, r0
 800087e:	460b      	mov	r3, r1
 8000880:	4630      	mov	r0, r6
 8000882:	4639      	mov	r1, r7
 8000884:	f7ff fcf8 	bl	8000278 <__aeabi_dsub>
 8000888:	f000 fb84 	bl	8000f94 <__aeabi_d2uiz>
 800088c:	2200      	movs	r2, #0
 800088e:	4623      	mov	r3, r4
 8000890:	4310      	orrs	r0, r2
 8000892:	4619      	mov	r1, r3
 8000894:	bdd0      	pop	{r4, r6, r7, pc}
 8000896:	bf00      	nop
 8000898:	3df00000 	.word	0x3df00000
 800089c:	41f00000 	.word	0x41f00000

080008a0 <__udivmoddi4>:
 80008a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a4:	9e08      	ldr	r6, [sp, #32]
 80008a6:	4604      	mov	r4, r0
 80008a8:	4688      	mov	r8, r1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d14b      	bne.n	8000946 <__udivmoddi4+0xa6>
 80008ae:	428a      	cmp	r2, r1
 80008b0:	4615      	mov	r5, r2
 80008b2:	d967      	bls.n	8000984 <__udivmoddi4+0xe4>
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	b14a      	cbz	r2, 80008ce <__udivmoddi4+0x2e>
 80008ba:	f1c2 0720 	rsb	r7, r2, #32
 80008be:	fa01 f302 	lsl.w	r3, r1, r2
 80008c2:	fa20 f707 	lsr.w	r7, r0, r7
 80008c6:	4095      	lsls	r5, r2
 80008c8:	ea47 0803 	orr.w	r8, r7, r3
 80008cc:	4094      	lsls	r4, r2
 80008ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d2:	0c23      	lsrs	r3, r4, #16
 80008d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80008d8:	fa1f fc85 	uxth.w	ip, r5
 80008dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80008e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e4:	fb07 f10c 	mul.w	r1, r7, ip
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d909      	bls.n	8000900 <__udivmoddi4+0x60>
 80008ec:	18eb      	adds	r3, r5, r3
 80008ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80008f2:	f080 811b 	bcs.w	8000b2c <__udivmoddi4+0x28c>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 8118 	bls.w	8000b2c <__udivmoddi4+0x28c>
 80008fc:	3f02      	subs	r7, #2
 80008fe:	442b      	add	r3, r5
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0fe 	udiv	r0, r3, lr
 8000908:	fb0e 3310 	mls	r3, lr, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 fc0c 	mul.w	ip, r0, ip
 8000914:	45a4      	cmp	ip, r4
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x8c>
 8000918:	192c      	adds	r4, r5, r4
 800091a:	f100 33ff 	add.w	r3, r0, #4294967295
 800091e:	f080 8107 	bcs.w	8000b30 <__udivmoddi4+0x290>
 8000922:	45a4      	cmp	ip, r4
 8000924:	f240 8104 	bls.w	8000b30 <__udivmoddi4+0x290>
 8000928:	3802      	subs	r0, #2
 800092a:	442c      	add	r4, r5
 800092c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000930:	eba4 040c 	sub.w	r4, r4, ip
 8000934:	2700      	movs	r7, #0
 8000936:	b11e      	cbz	r6, 8000940 <__udivmoddi4+0xa0>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c6 4300 	strd	r4, r3, [r6]
 8000940:	4639      	mov	r1, r7
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xbe>
 800094a:	2e00      	cmp	r6, #0
 800094c:	f000 80eb 	beq.w	8000b26 <__udivmoddi4+0x286>
 8000950:	2700      	movs	r7, #0
 8000952:	e9c6 0100 	strd	r0, r1, [r6]
 8000956:	4638      	mov	r0, r7
 8000958:	4639      	mov	r1, r7
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f783 	clz	r7, r3
 8000962:	2f00      	cmp	r7, #0
 8000964:	d147      	bne.n	80009f6 <__udivmoddi4+0x156>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd0>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80fa 	bhi.w	8000b64 <__udivmoddi4+0x2c4>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	4698      	mov	r8, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa0>
 800097e:	e9c6 4800 	strd	r4, r8, [r6]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa0>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xe8>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 808f 	bne.w	8000ab0 <__udivmoddi4+0x210>
 8000992:	1b49      	subs	r1, r1, r5
 8000994:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000998:	fa1f f885 	uxth.w	r8, r5
 800099c:	2701      	movs	r7, #1
 800099e:	fbb1 fcfe 	udiv	ip, r1, lr
 80009a2:	0c23      	lsrs	r3, r4, #16
 80009a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80009a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ac:	fb08 f10c 	mul.w	r1, r8, ip
 80009b0:	4299      	cmp	r1, r3
 80009b2:	d907      	bls.n	80009c4 <__udivmoddi4+0x124>
 80009b4:	18eb      	adds	r3, r5, r3
 80009b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009ba:	d202      	bcs.n	80009c2 <__udivmoddi4+0x122>
 80009bc:	4299      	cmp	r1, r3
 80009be:	f200 80cd 	bhi.w	8000b5c <__udivmoddi4+0x2bc>
 80009c2:	4684      	mov	ip, r0
 80009c4:	1a59      	subs	r1, r3, r1
 80009c6:	b2a3      	uxth	r3, r4
 80009c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80009cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80009d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80009d4:	fb08 f800 	mul.w	r8, r8, r0
 80009d8:	45a0      	cmp	r8, r4
 80009da:	d907      	bls.n	80009ec <__udivmoddi4+0x14c>
 80009dc:	192c      	adds	r4, r5, r4
 80009de:	f100 33ff 	add.w	r3, r0, #4294967295
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x14a>
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	f200 80b6 	bhi.w	8000b56 <__udivmoddi4+0x2b6>
 80009ea:	4618      	mov	r0, r3
 80009ec:	eba4 0408 	sub.w	r4, r4, r8
 80009f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f4:	e79f      	b.n	8000936 <__udivmoddi4+0x96>
 80009f6:	f1c7 0c20 	rsb	ip, r7, #32
 80009fa:	40bb      	lsls	r3, r7
 80009fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000a00:	ea4e 0e03 	orr.w	lr, lr, r3
 8000a04:	fa01 f407 	lsl.w	r4, r1, r7
 8000a08:	fa20 f50c 	lsr.w	r5, r0, ip
 8000a0c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000a10:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000a14:	4325      	orrs	r5, r4
 8000a16:	fbb3 f9f8 	udiv	r9, r3, r8
 8000a1a:	0c2c      	lsrs	r4, r5, #16
 8000a1c:	fb08 3319 	mls	r3, r8, r9, r3
 8000a20:	fa1f fa8e 	uxth.w	sl, lr
 8000a24:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000a28:	fb09 f40a 	mul.w	r4, r9, sl
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	fa02 f207 	lsl.w	r2, r2, r7
 8000a32:	fa00 f107 	lsl.w	r1, r0, r7
 8000a36:	d90b      	bls.n	8000a50 <__udivmoddi4+0x1b0>
 8000a38:	eb1e 0303 	adds.w	r3, lr, r3
 8000a3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a40:	f080 8087 	bcs.w	8000b52 <__udivmoddi4+0x2b2>
 8000a44:	429c      	cmp	r4, r3
 8000a46:	f240 8084 	bls.w	8000b52 <__udivmoddi4+0x2b2>
 8000a4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4e:	4473      	add	r3, lr
 8000a50:	1b1b      	subs	r3, r3, r4
 8000a52:	b2ad      	uxth	r5, r5
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000a60:	fb00 fa0a 	mul.w	sl, r0, sl
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x1da>
 8000a68:	eb1e 0404 	adds.w	r4, lr, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	d26b      	bcs.n	8000b4a <__udivmoddi4+0x2aa>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d969      	bls.n	8000b4a <__udivmoddi4+0x2aa>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4474      	add	r4, lr
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c2      	mov	sl, r8
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	d354      	bcc.n	8000b38 <__udivmoddi4+0x298>
 8000a8e:	d051      	beq.n	8000b34 <__udivmoddi4+0x294>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d069      	beq.n	8000b68 <__udivmoddi4+0x2c8>
 8000a94:	ebb1 050a 	subs.w	r5, r1, sl
 8000a98:	eb64 0403 	sbc.w	r4, r4, r3
 8000a9c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000aa0:	40fd      	lsrs	r5, r7
 8000aa2:	40fc      	lsrs	r4, r7
 8000aa4:	ea4c 0505 	orr.w	r5, ip, r5
 8000aa8:	e9c6 5400 	strd	r5, r4, [r6]
 8000aac:	2700      	movs	r7, #0
 8000aae:	e747      	b.n	8000940 <__udivmoddi4+0xa0>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f703 	lsr.w	r7, r0, r3
 8000ab8:	4095      	lsls	r5, r2
 8000aba:	fa01 f002 	lsl.w	r0, r1, r2
 8000abe:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	4338      	orrs	r0, r7
 8000ac8:	0c01      	lsrs	r1, r0, #16
 8000aca:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ace:	fa1f f885 	uxth.w	r8, r5
 8000ad2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ad6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ada:	fb07 f308 	mul.w	r3, r7, r8
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x256>
 8000ae6:	1869      	adds	r1, r5, r1
 8000ae8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000aec:	d22f      	bcs.n	8000b4e <__udivmoddi4+0x2ae>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d92d      	bls.n	8000b4e <__udivmoddi4+0x2ae>
 8000af2:	3f02      	subs	r7, #2
 8000af4:	4429      	add	r1, r5
 8000af6:	1acb      	subs	r3, r1, r3
 8000af8:	b281      	uxth	r1, r0
 8000afa:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b06:	fb00 f308 	mul.w	r3, r0, r8
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x27e>
 8000b0e:	1869      	adds	r1, r5, r1
 8000b10:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b14:	d217      	bcs.n	8000b46 <__udivmoddi4+0x2a6>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d915      	bls.n	8000b46 <__udivmoddi4+0x2a6>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4429      	add	r1, r5
 8000b1e:	1ac9      	subs	r1, r1, r3
 8000b20:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000b24:	e73b      	b.n	800099e <__udivmoddi4+0xfe>
 8000b26:	4637      	mov	r7, r6
 8000b28:	4630      	mov	r0, r6
 8000b2a:	e709      	b.n	8000940 <__udivmoddi4+0xa0>
 8000b2c:	4607      	mov	r7, r0
 8000b2e:	e6e7      	b.n	8000900 <__udivmoddi4+0x60>
 8000b30:	4618      	mov	r0, r3
 8000b32:	e6fb      	b.n	800092c <__udivmoddi4+0x8c>
 8000b34:	4541      	cmp	r1, r8
 8000b36:	d2ab      	bcs.n	8000a90 <__udivmoddi4+0x1f0>
 8000b38:	ebb8 0a02 	subs.w	sl, r8, r2
 8000b3c:	eb69 020e 	sbc.w	r2, r9, lr
 8000b40:	3801      	subs	r0, #1
 8000b42:	4613      	mov	r3, r2
 8000b44:	e7a4      	b.n	8000a90 <__udivmoddi4+0x1f0>
 8000b46:	4660      	mov	r0, ip
 8000b48:	e7e9      	b.n	8000b1e <__udivmoddi4+0x27e>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	e795      	b.n	8000a7a <__udivmoddi4+0x1da>
 8000b4e:	4667      	mov	r7, ip
 8000b50:	e7d1      	b.n	8000af6 <__udivmoddi4+0x256>
 8000b52:	4681      	mov	r9, r0
 8000b54:	e77c      	b.n	8000a50 <__udivmoddi4+0x1b0>
 8000b56:	3802      	subs	r0, #2
 8000b58:	442c      	add	r4, r5
 8000b5a:	e747      	b.n	80009ec <__udivmoddi4+0x14c>
 8000b5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b60:	442b      	add	r3, r5
 8000b62:	e72f      	b.n	80009c4 <__udivmoddi4+0x124>
 8000b64:	4638      	mov	r0, r7
 8000b66:	e708      	b.n	800097a <__udivmoddi4+0xda>
 8000b68:	4637      	mov	r7, r6
 8000b6a:	e6e9      	b.n	8000940 <__udivmoddi4+0xa0>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dmul>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b7e:	bf1d      	ittte	ne
 8000b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b84:	ea94 0f0c 	teqne	r4, ip
 8000b88:	ea95 0f0c 	teqne	r5, ip
 8000b8c:	f000 f8de 	bleq	8000d4c <__aeabi_dmul+0x1dc>
 8000b90:	442c      	add	r4, r5
 8000b92:	ea81 0603 	eor.w	r6, r1, r3
 8000b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ba2:	bf18      	it	ne
 8000ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb0:	d038      	beq.n	8000c24 <__aeabi_dmul+0xb4>
 8000bb2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bb6:	f04f 0500 	mov.w	r5, #0
 8000bba:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bc6:	f04f 0600 	mov.w	r6, #0
 8000bca:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bce:	f09c 0f00 	teq	ip, #0
 8000bd2:	bf18      	it	ne
 8000bd4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000be4:	d204      	bcs.n	8000bf0 <__aeabi_dmul+0x80>
 8000be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000bea:	416d      	adcs	r5, r5
 8000bec:	eb46 0606 	adc.w	r6, r6, r6
 8000bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c08:	bf88      	it	hi
 8000c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c0e:	d81e      	bhi.n	8000c4e <__aeabi_dmul+0xde>
 8000c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000c14:	bf08      	it	eq
 8000c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c1a:	f150 0000 	adcs.w	r0, r0, #0
 8000c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000c28:	ea46 0101 	orr.w	r1, r6, r1
 8000c2c:	ea40 0002 	orr.w	r0, r0, r2
 8000c30:	ea81 0103 	eor.w	r1, r1, r3
 8000c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c38:	bfc2      	ittt	gt
 8000c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c42:	bd70      	popgt	{r4, r5, r6, pc}
 8000c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c48:	f04f 0e00 	mov.w	lr, #0
 8000c4c:	3c01      	subs	r4, #1
 8000c4e:	f300 80ab 	bgt.w	8000da8 <__aeabi_dmul+0x238>
 8000c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000c56:	bfde      	ittt	le
 8000c58:	2000      	movle	r0, #0
 8000c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000c5e:	bd70      	pople	{r4, r5, r6, pc}
 8000c60:	f1c4 0400 	rsb	r4, r4, #0
 8000c64:	3c20      	subs	r4, #32
 8000c66:	da35      	bge.n	8000cd4 <__aeabi_dmul+0x164>
 8000c68:	340c      	adds	r4, #12
 8000c6a:	dc1b      	bgt.n	8000ca4 <__aeabi_dmul+0x134>
 8000c6c:	f104 0414 	add.w	r4, r4, #20
 8000c70:	f1c4 0520 	rsb	r5, r4, #32
 8000c74:	fa00 f305 	lsl.w	r3, r0, r5
 8000c78:	fa20 f004 	lsr.w	r0, r0, r4
 8000c7c:	fa01 f205 	lsl.w	r2, r1, r5
 8000c80:	ea40 0002 	orr.w	r0, r0, r2
 8000c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c90:	fa21 f604 	lsr.w	r6, r1, r4
 8000c94:	eb42 0106 	adc.w	r1, r2, r6
 8000c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	f1c4 040c 	rsb	r4, r4, #12
 8000ca8:	f1c4 0520 	rsb	r5, r4, #32
 8000cac:	fa00 f304 	lsl.w	r3, r0, r4
 8000cb0:	fa20 f005 	lsr.w	r0, r0, r5
 8000cb4:	fa01 f204 	lsl.w	r2, r1, r4
 8000cb8:	ea40 0002 	orr.w	r0, r0, r2
 8000cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000cc4:	f141 0100 	adc.w	r1, r1, #0
 8000cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	f1c4 0520 	rsb	r5, r4, #32
 8000cd8:	fa00 f205 	lsl.w	r2, r0, r5
 8000cdc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ce0:	fa20 f304 	lsr.w	r3, r0, r4
 8000ce4:	fa01 f205 	lsl.w	r2, r1, r5
 8000ce8:	ea43 0302 	orr.w	r3, r3, r2
 8000cec:	fa21 f004 	lsr.w	r0, r1, r4
 8000cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cf4:	fa21 f204 	lsr.w	r2, r1, r4
 8000cf8:	ea20 0002 	bic.w	r0, r0, r2
 8000cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d04:	bf08      	it	eq
 8000d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	f094 0f00 	teq	r4, #0
 8000d10:	d10f      	bne.n	8000d32 <__aeabi_dmul+0x1c2>
 8000d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000d16:	0040      	lsls	r0, r0, #1
 8000d18:	eb41 0101 	adc.w	r1, r1, r1
 8000d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d20:	bf08      	it	eq
 8000d22:	3c01      	subeq	r4, #1
 8000d24:	d0f7      	beq.n	8000d16 <__aeabi_dmul+0x1a6>
 8000d26:	ea41 0106 	orr.w	r1, r1, r6
 8000d2a:	f095 0f00 	teq	r5, #0
 8000d2e:	bf18      	it	ne
 8000d30:	4770      	bxne	lr
 8000d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000d36:	0052      	lsls	r2, r2, #1
 8000d38:	eb43 0303 	adc.w	r3, r3, r3
 8000d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d40:	bf08      	it	eq
 8000d42:	3d01      	subeq	r5, #1
 8000d44:	d0f7      	beq.n	8000d36 <__aeabi_dmul+0x1c6>
 8000d46:	ea43 0306 	orr.w	r3, r3, r6
 8000d4a:	4770      	bx	lr
 8000d4c:	ea94 0f0c 	teq	r4, ip
 8000d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d54:	bf18      	it	ne
 8000d56:	ea95 0f0c 	teqne	r5, ip
 8000d5a:	d00c      	beq.n	8000d76 <__aeabi_dmul+0x206>
 8000d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d60:	bf18      	it	ne
 8000d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d66:	d1d1      	bne.n	8000d0c <__aeabi_dmul+0x19c>
 8000d68:	ea81 0103 	eor.w	r1, r1, r3
 8000d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d70:	f04f 0000 	mov.w	r0, #0
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
 8000d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d7a:	bf06      	itte	eq
 8000d7c:	4610      	moveq	r0, r2
 8000d7e:	4619      	moveq	r1, r3
 8000d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d84:	d019      	beq.n	8000dba <__aeabi_dmul+0x24a>
 8000d86:	ea94 0f0c 	teq	r4, ip
 8000d8a:	d102      	bne.n	8000d92 <__aeabi_dmul+0x222>
 8000d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000d90:	d113      	bne.n	8000dba <__aeabi_dmul+0x24a>
 8000d92:	ea95 0f0c 	teq	r5, ip
 8000d96:	d105      	bne.n	8000da4 <__aeabi_dmul+0x234>
 8000d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000d9c:	bf1c      	itt	ne
 8000d9e:	4610      	movne	r0, r2
 8000da0:	4619      	movne	r1, r3
 8000da2:	d10a      	bne.n	8000dba <__aeabi_dmul+0x24a>
 8000da4:	ea81 0103 	eor.w	r1, r1, r3
 8000da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000db4:	f04f 0000 	mov.w	r0, #0
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
 8000dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}

08000dc4 <__aeabi_ddiv>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000dd2:	bf1d      	ittte	ne
 8000dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000dd8:	ea94 0f0c 	teqne	r4, ip
 8000ddc:	ea95 0f0c 	teqne	r5, ip
 8000de0:	f000 f8a7 	bleq	8000f32 <__aeabi_ddiv+0x16e>
 8000de4:	eba4 0405 	sub.w	r4, r4, r5
 8000de8:	ea81 0e03 	eor.w	lr, r1, r3
 8000dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000df4:	f000 8088 	beq.w	8000f08 <__aeabi_ddiv+0x144>
 8000df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000e1c:	429d      	cmp	r5, r3
 8000e1e:	bf08      	it	eq
 8000e20:	4296      	cmpeq	r6, r2
 8000e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000e2a:	d202      	bcs.n	8000e32 <__aeabi_ddiv+0x6e>
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e32:	1ab6      	subs	r6, r6, r2
 8000e34:	eb65 0503 	sbc.w	r5, r5, r3
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000e46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e4e:	bf22      	ittt	cs
 8000e50:	1ab6      	subcs	r6, r6, r2
 8000e52:	4675      	movcs	r5, lr
 8000e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e66:	bf22      	ittt	cs
 8000e68:	1ab6      	subcs	r6, r6, r2
 8000e6a:	4675      	movcs	r5, lr
 8000e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e7e:	bf22      	ittt	cs
 8000e80:	1ab6      	subcs	r6, r6, r2
 8000e82:	4675      	movcs	r5, lr
 8000e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e96:	bf22      	ittt	cs
 8000e98:	1ab6      	subcs	r6, r6, r2
 8000e9a:	4675      	movcs	r5, lr
 8000e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ea4:	d018      	beq.n	8000ed8 <__aeabi_ddiv+0x114>
 8000ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ec2:	d1c0      	bne.n	8000e46 <__aeabi_ddiv+0x82>
 8000ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ec8:	d10b      	bne.n	8000ee2 <__aeabi_ddiv+0x11e>
 8000eca:	ea41 0100 	orr.w	r1, r1, r0
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ed6:	e7b6      	b.n	8000e46 <__aeabi_ddiv+0x82>
 8000ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000edc:	bf04      	itt	eq
 8000ede:	4301      	orreq	r1, r0
 8000ee0:	2000      	moveq	r0, #0
 8000ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ee6:	bf88      	it	hi
 8000ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000eec:	f63f aeaf 	bhi.w	8000c4e <__aeabi_dmul+0xde>
 8000ef0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ef4:	bf04      	itt	eq
 8000ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000efe:	f150 0000 	adcs.w	r0, r0, #0
 8000f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f14:	bfc2      	ittt	gt
 8000f16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f24:	f04f 0e00 	mov.w	lr, #0
 8000f28:	3c01      	subs	r4, #1
 8000f2a:	e690      	b.n	8000c4e <__aeabi_dmul+0xde>
 8000f2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000f30:	e68d      	b.n	8000c4e <__aeabi_dmul+0xde>
 8000f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f36:	ea94 0f0c 	teq	r4, ip
 8000f3a:	bf08      	it	eq
 8000f3c:	ea95 0f0c 	teqeq	r5, ip
 8000f40:	f43f af3b 	beq.w	8000dba <__aeabi_dmul+0x24a>
 8000f44:	ea94 0f0c 	teq	r4, ip
 8000f48:	d10a      	bne.n	8000f60 <__aeabi_ddiv+0x19c>
 8000f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f4e:	f47f af34 	bne.w	8000dba <__aeabi_dmul+0x24a>
 8000f52:	ea95 0f0c 	teq	r5, ip
 8000f56:	f47f af25 	bne.w	8000da4 <__aeabi_dmul+0x234>
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	e72c      	b.n	8000dba <__aeabi_dmul+0x24a>
 8000f60:	ea95 0f0c 	teq	r5, ip
 8000f64:	d106      	bne.n	8000f74 <__aeabi_ddiv+0x1b0>
 8000f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f6a:	f43f aefd 	beq.w	8000d68 <__aeabi_dmul+0x1f8>
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	e722      	b.n	8000dba <__aeabi_dmul+0x24a>
 8000f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f78:	bf18      	it	ne
 8000f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f7e:	f47f aec5 	bne.w	8000d0c <__aeabi_dmul+0x19c>
 8000f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000f86:	f47f af0d 	bne.w	8000da4 <__aeabi_dmul+0x234>
 8000f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000f8e:	f47f aeeb 	bne.w	8000d68 <__aeabi_dmul+0x1f8>
 8000f92:	e712      	b.n	8000dba <__aeabi_dmul+0x24a>

08000f94 <__aeabi_d2uiz>:
 8000f94:	004a      	lsls	r2, r1, #1
 8000f96:	d211      	bcs.n	8000fbc <__aeabi_d2uiz+0x28>
 8000f98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f9c:	d211      	bcs.n	8000fc2 <__aeabi_d2uiz+0x2e>
 8000f9e:	d50d      	bpl.n	8000fbc <__aeabi_d2uiz+0x28>
 8000fa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa8:	d40e      	bmi.n	8000fc8 <__aeabi_d2uiz+0x34>
 8000faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fc6:	d102      	bne.n	8000fce <__aeabi_d2uiz+0x3a>
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fde:	2300      	movs	r3, #0
 8000fe0:	733b      	strb	r3, [r7, #12]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2302      	movs	r3, #2
 8000ff0:	217c      	movs	r1, #124	; 0x7c
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <lcd_cmd+0x2c>)
 8000ff4:	f004 f954 	bl	80052a0 <HAL_I2C_Master_Transmit>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000190 	.word	0x20000190

08001004 <lcd_data>:

void lcd_data(uint8_t data) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	733b      	strb	r3, [r7, #12]
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	217c      	movs	r1, #124	; 0x7c
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <lcd_data+0x2c>)
 8001024:	f004 f93c 	bl	80052a0 <HAL_I2C_Master_Transmit>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000190 	.word	0x20000190

08001034 <lcd_init>:

void lcd_init(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f002 fbad 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x38);
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f7ff ffc8 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f002 fba7 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x39);
 800104a:	2039      	movs	r0, #57	; 0x39
 800104c:	f7ff ffc2 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f002 fba1 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x14);
 8001056:	2014      	movs	r0, #20
 8001058:	f7ff ffbc 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f002 fb9b 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x70);
 8001062:	2070      	movs	r0, #112	; 0x70
 8001064:	f7ff ffb6 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f002 fb95 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x56);
 800106e:	2056      	movs	r0, #86	; 0x56
 8001070:	f7ff ffb0 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f002 fb8f 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x6C);
 800107a:	206c      	movs	r0, #108	; 0x6c
 800107c:	f7ff ffaa 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(200);
 8001080:	20c8      	movs	r0, #200	; 0xc8
 8001082:	f002 fb89 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x38);
 8001086:	2038      	movs	r0, #56	; 0x38
 8001088:	f7ff ffa4 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f002 fb83 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x0C);
 8001092:	200c      	movs	r0, #12
 8001094:	f7ff ff9e 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f002 fb7d 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x01);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff98 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f002 fb77 	bl	8003798 <HAL_Delay>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <lcd_clear>:

void lcd_clear(){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff8e 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f002 fb6d 	bl	8003798 <HAL_Delay>
	lcd_cmd(0x02);
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ff88 	bl	8000fd4 <lcd_cmd>
	HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f002 fb67 	bl	8003798 <HAL_Delay>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}

080010ce <lcd_locate>:

void lcd_locate(int x, int y) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff72 	bl	8000fd4 <lcd_cmd>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_print>:

void lcd_print(const char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8001100:	e007      	b.n	8001112 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff7c 	bl	8001004 <lcd_data>
			str++;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f3      	bne.n	8001102 <lcd_print+0xa>
	}
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001122:	b40f      	push	{r0, r1, r2, r3}
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001136:	4618      	mov	r0, r3
 8001138:	f006 fe3e 	bl	8007db8 <vsiprintf>
 800113c:	4603      	mov	r3, r0
 800113e:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001140:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001144:	2b00      	cmp	r3, #0
 8001146:	dd03      	ble.n	8001150 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffd4 	bl	80010f8 <lcd_print>
	}

	return ret;
 8001150:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800115e:	b004      	add	sp, #16
 8001160:	4770      	bx	lr

08001162 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001162:	b580      	push	{r7, lr}
 8001164:	b088      	sub	sp, #32
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800116c:	f003 fbaa 	bl	80048c4 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fc60 	bl	8004a54 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8001194:	f003 fbb8 	bl	8004908 <HAL_FLASH_Lock>
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <INA260_read+0x48>)
 80011b6:	f004 f873 	bl	80052a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2302      	movs	r3, #2
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <INA260_read+0x48>)
 80011c8:	f004 f968 	bl	800549c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	81fb      	strh	r3, [r7, #14]
	return val;
 80011dc:	89fb      	ldrh	r3, [r7, #14]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000013c 	.word	0x2000013c

080011ec <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	gpio_set();
 80011f0:	f000 fe38 	bl	8001e64 <gpio_set>
	lcd_init();
 80011f4:	f7ff ff1e 	bl	8001034 <lcd_init>
		lcd_locate(0,1);
		lcd_print("Failed");
	}
	*/
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011f8:	213c      	movs	r1, #60	; 0x3c
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <init+0x68>)
 80011fc:	f005 fc8a 	bl	8006b14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001200:	213c      	movs	r1, #60	; 0x3c
 8001202:	4815      	ldr	r0, [pc, #84]	; (8001258 <init+0x6c>)
 8001204:	f005 fc86 	bl	8006b14 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001208:	2100      	movs	r1, #0
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <init+0x70>)
 800120c:	f005 fbb2 	bl	8006974 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001210:	2104      	movs	r1, #4
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <init+0x70>)
 8001214:	f005 fbae 	bl	8006974 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <init+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <init+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <init+0x74>)
 800122c:	f005 fba2 	bl	8006974 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <init+0x74>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);//[:]
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <init+0x78>)
 800123a:	f005 fb4c 	bl	80068d6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <init+0x7c>)
 8001240:	f005 fb49 	bl	80068d6 <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 8001244:	220e      	movs	r2, #14
 8001246:	4909      	ldr	r1, [pc, #36]	; (800126c <init+0x80>)
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <init+0x84>)
 800124a:	f002 fb0b 	bl	8003864 <HAL_ADC_Start_DMA>

	//log_adress = start_adress_sector7;
	//plan_velo_adress = start_adress_sector10;

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003c0 	.word	0x200003c0
 8001258:	200000fc 	.word	0x200000fc
 800125c:	20000440 	.word	0x20000440
 8001260:	20000400 	.word	0x20000400
 8001264:	20000380 	.word	0x20000380
 8001268:	20000480 	.word	0x20000480
 800126c:	20000304 	.word	0x20000304
 8001270:	2000027c 	.word	0x2000027c

08001274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	//uint64_t enc_cnt_10ms;

	if(htim->Instance == htim6.Instance){	//1ms
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d13d      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0x90>

		cnt_sw++;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001292:	701a      	strb	r2, [r3, #0]
		if(cnt_sw >= 250) cnt_sw = 30;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2bf9      	cmp	r3, #249	; 0xf9
 800129a:	d902      	bls.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800129e:	221e      	movs	r2, #30
 80012a0:	701a      	strb	r2, [r3, #0]


		getEncoder();
 80012a2:	f001 f829 	bl	80022f8 <getEncoder>
		posPID();
 80012a6:	f000 fe57 	bl	8001f58 <posPID>
		velPID(target_vel);
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	f000 fef8 	bl	80020a8 <velPID>
		//read_gyro_data();
		//read_accel_data();
		ADval_get();
 80012b8:	f000 ff64 	bl	8002184 <ADval_get>
		ADval_sum();
 80012bc:	f000 ffc0 	bl	8002240 <ADval_sum>

		//timer++;

		if(main_pattern == 10){
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	d11d      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0x90>
			Motorset((int16_t)(order_velL + order_posL), (int16_t)(order_velR + order_posR), 0);
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	b218      	sxth	r0, r3
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fdca 	bl	8001e98 <Motorset>
		}

	}


}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000380 	.word	0x20000380
 8001310:	200000e3 	.word	0x200000e3
 8001314:	200004d0 	.word	0x200004d0
 8001318:	200000dc 	.word	0x200000dc
 800131c:	20000098 	.word	0x20000098
 8001320:	20000090 	.word	0x20000090
 8001324:	20000094 	.word	0x20000094
 8001328:	2000008c 	.word	0x2000008c

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f002 f9c0 	bl	80036b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f822 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001338:	f000 fcac 	bl	8001c94 <MX_GPIO_Init>
  MX_DMA_Init();
 800133c:	f000 fc8a 	bl	8001c54 <MX_DMA_Init>
  MX_ADC1_Init();
 8001340:	f000 f886 	bl	8001450 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001344:	f000 f98c 	bl	8001660 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001348:	f000 f9b8 	bl	80016bc <MX_I2C2_Init>
  MX_SPI3_Init();
 800134c:	f000 f9e4 	bl	8001718 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001350:	f000 fa18 	bl	8001784 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001354:	f000 fa6e 	bl	8001834 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001358:	f000 fac4 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM8_Init();
 800135c:	f000 fba8 	bl	8001ab0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001360:	f000 fbfe 	bl	8001b60 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001364:	f000 fc4c 	bl	8001c00 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001368:	f000 fb36 	bl	80019d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800136c:	f000 fb6a 	bl	8001a44 <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  init();
 8001370:	f7ff ff3c 	bl	80011ec <init>


  while (1)
  {
	  setup();
 8001374:	f001 f8a4 	bl	80024c0 <setup>
 8001378:	e7fc      	b.n	8001374 <main+0x48>
	...

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	; 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2230      	movs	r2, #48	; 0x30
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f006 fcf5 	bl	8007d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <SystemClock_Config+0xcc>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <SystemClock_Config+0xcc>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <SystemClock_Config+0xd0>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <SystemClock_Config+0xd0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d8:	2301      	movs	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80013ec:	2306      	movs	r3, #6
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013f0:	23a8      	movs	r3, #168	; 0xa8
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fd9d 	bl	8005f40 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800140c:	f000 fd22 	bl	8001e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800141c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2105      	movs	r1, #5
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fff6 	bl	8006420 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800143a:	f000 fd0b 	bl	8001e54 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3750      	adds	r7, #80	; 0x50
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <MX_ADC1_Init+0x204>)
 8001464:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <MX_ADC1_Init+0x208>)
 8001466:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001468:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <MX_ADC1_Init+0x204>)
 800146a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800146e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001470:	4b78      	ldr	r3, [pc, #480]	; (8001654 <MX_ADC1_Init+0x204>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <MX_ADC1_Init+0x204>)
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800147c:	4b75      	ldr	r3, [pc, #468]	; (8001654 <MX_ADC1_Init+0x204>)
 800147e:	2201      	movs	r2, #1
 8001480:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <MX_ADC1_Init+0x204>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <MX_ADC1_Init+0x204>)
 800148c:	2200      	movs	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001490:	4b70      	ldr	r3, [pc, #448]	; (8001654 <MX_ADC1_Init+0x204>)
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <MX_ADC1_Init+0x20c>)
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <MX_ADC1_Init+0x204>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <MX_ADC1_Init+0x204>)
 800149e:	220e      	movs	r2, #14
 80014a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014a2:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <MX_ADC1_Init+0x204>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014aa:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <MX_ADC1_Init+0x204>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b0:	4868      	ldr	r0, [pc, #416]	; (8001654 <MX_ADC1_Init+0x204>)
 80014b2:	f002 f993 	bl	80037dc <HAL_ADC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014bc:	f000 fcca 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	4860      	ldr	r0, [pc, #384]	; (8001654 <MX_ADC1_Init+0x204>)
 80014d2:	f002 fad7 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014dc:	f000 fcba 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4859      	ldr	r0, [pc, #356]	; (8001654 <MX_ADC1_Init+0x204>)
 80014ee:	f002 fac9 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014f8:	f000 fcac 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001500:	2303      	movs	r3, #3
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4852      	ldr	r0, [pc, #328]	; (8001654 <MX_ADC1_Init+0x204>)
 800150a:	f002 fabb 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001514:	f000 fc9e 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001518:	2303      	movs	r3, #3
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	484b      	ldr	r0, [pc, #300]	; (8001654 <MX_ADC1_Init+0x204>)
 8001526:	f002 faad 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001530:	f000 fc90 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001534:	2304      	movs	r3, #4
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001538:	2305      	movs	r3, #5
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4844      	ldr	r0, [pc, #272]	; (8001654 <MX_ADC1_Init+0x204>)
 8001542:	f002 fa9f 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800154c:	f000 fc82 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001550:	2305      	movs	r3, #5
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001554:	2306      	movs	r3, #6
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	483d      	ldr	r0, [pc, #244]	; (8001654 <MX_ADC1_Init+0x204>)
 800155e:	f002 fa91 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001568:	f000 fc74 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800156c:	2306      	movs	r3, #6
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001570:	2307      	movs	r3, #7
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4836      	ldr	r0, [pc, #216]	; (8001654 <MX_ADC1_Init+0x204>)
 800157a:	f002 fa83 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001584:	f000 fc66 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001588:	2307      	movs	r3, #7
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	482f      	ldr	r0, [pc, #188]	; (8001654 <MX_ADC1_Init+0x204>)
 8001596:	f002 fa75 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015a0:	f000 fc58 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015a4:	2308      	movs	r3, #8
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015a8:	2309      	movs	r3, #9
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <MX_ADC1_Init+0x204>)
 80015b2:	f002 fa67 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015bc:	f000 fc4a 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015c0:	2309      	movs	r3, #9
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015c4:	230a      	movs	r3, #10
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4821      	ldr	r0, [pc, #132]	; (8001654 <MX_ADC1_Init+0x204>)
 80015ce:	f002 fa59 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015d8:	f000 fc3c 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015dc:	230e      	movs	r3, #14
 80015de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015e0:	230b      	movs	r3, #11
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_ADC1_Init+0x204>)
 80015ea:	f002 fa4b 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80015f4:	f000 fc2e 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015f8:	230f      	movs	r3, #15
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80015fc:	230c      	movs	r3, #12
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_ADC1_Init+0x204>)
 8001606:	f002 fa3d 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001610:	f000 fc20 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001614:	230c      	movs	r3, #12
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001618:	230d      	movs	r3, #13
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_ADC1_Init+0x204>)
 8001622:	f002 fa2f 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800162c:	f000 fc12 	bl	8001e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001630:	230d      	movs	r3, #13
 8001632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001634:	230e      	movs	r3, #14
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_ADC1_Init+0x204>)
 800163e:	f002 fa21 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001648:	f000 fc04 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000027c 	.word	0x2000027c
 8001658:	40012000 	.word	0x40012000
 800165c:	0f000001 	.word	0x0f000001

08001660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_I2C1_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C1_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_I2C1_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2C1_Init+0x50>)
 800169e:	f003 fcc7 	bl	8005030 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 fbd4 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000013c 	.word	0x2000013c
 80016b4:	40005400 	.word	0x40005400
 80016b8:	00061a80 	.word	0x00061a80

080016bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_I2C2_Init+0x50>)
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_I2C2_Init+0x54>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_I2C2_Init+0x50>)
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_I2C2_Init+0x58>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_I2C2_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_I2C2_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_I2C2_Init+0x50>)
 80016da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_I2C2_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_I2C2_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_I2C2_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_I2C2_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_I2C2_Init+0x50>)
 80016fa:	f003 fc99 	bl	8005030 <HAL_I2C_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001704:	f000 fba6 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000190 	.word	0x20000190
 8001710:	40005800 	.word	0x40005800
 8001714:	000186a0 	.word	0x000186a0

08001718 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_SPI3_Init+0x64>)
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <MX_SPI3_Init+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_SPI3_Init+0x64>)
 8001724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_SPI3_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_SPI3_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_SPI3_Init+0x64>)
 8001738:	2202      	movs	r2, #2
 800173a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_SPI3_Init+0x64>)
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_SPI3_Init+0x64>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_SPI3_Init+0x64>)
 800174c:	2220      	movs	r2, #32
 800174e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_SPI3_Init+0x64>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_SPI3_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <MX_SPI3_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_SPI3_Init+0x64>)
 8001764:	220a      	movs	r2, #10
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_SPI3_Init+0x64>)
 800176a:	f005 f825 	bl	80067b8 <HAL_SPI_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001774:	f000 fb6e 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000224 	.word	0x20000224
 8001780:	40003c00 	.word	0x40003c00

08001784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f006 faf1 	bl	8007d7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <MX_TIM1_Init+0xa8>)
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <MX_TIM1_Init+0xac>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_TIM1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <MX_TIM1_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_TIM1_Init+0xa8>)
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM1_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM1_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_TIM1_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017cc:	2303      	movs	r3, #3
 80017ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017d4:	2301      	movs	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM1_Init+0xa8>)
 80017f8:	f005 f8fa 	bl	80069f0 <HAL_TIM_Encoder_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001802:	f000 fb27 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_TIM1_Init+0xa8>)
 8001814:	f005 fe22 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800181e:	f000 fb19 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003c0 	.word	0x200003c0
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_TIM2_Init+0xac>)
 8001858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_TIM2_Init+0xac>)
 8001860:	2201      	movs	r2, #1
 8001862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_TIM2_Init+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_TIM2_Init+0xac>)
 800186c:	f241 0267 	movw	r2, #4199	; 0x1067
 8001870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_TIM2_Init+0xac>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_TIM2_Init+0xac>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM2_Init+0xac>)
 8001880:	f005 f84d 	bl	800691e <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800188a:	f000 fae3 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	4619      	mov	r1, r3
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <MX_TIM2_Init+0xac>)
 800189e:	f005 fddd 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018a8:	f000 fad4 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	; 0x60
 80018ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM2_Init+0xac>)
 80018c4:	f005 fa66 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018ce:	f000 fac1 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM2_Init+0xac>)
 80018d4:	f001 fca0 	bl	8003218 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000400 	.word	0x20000400

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <MX_TIM3_Init+0xf0>)
 800190a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM3_Init+0xec>)
 800190e:	2201      	movs	r2, #1
 8001910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_TIM3_Init+0xec>)
 800191a:	f241 0267 	movw	r2, #4199	; 0x1067
 800191e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM3_Init+0xec>)
 800192e:	f004 fff6 	bl	800691e <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 fa8c 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4619      	mov	r1, r3
 800194a:	4821      	ldr	r0, [pc, #132]	; (80019d0 <MX_TIM3_Init+0xec>)
 800194c:	f005 fd86 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001956:	f000 fa7d 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001972:	f005 fa0f 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800197c:	f000 fa6a 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2204      	movs	r2, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4812      	ldr	r0, [pc, #72]	; (80019d0 <MX_TIM3_Init+0xec>)
 8001988:	f005 fa04 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001992:	f000 fa5f 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2208      	movs	r2, #8
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM3_Init+0xec>)
 800199e:	f005 f9f9 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80019a8:	f000 fa54 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	220c      	movs	r2, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM3_Init+0xec>)
 80019b4:	f005 f9ee 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80019be:	f000 fa49 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM3_Init+0xec>)
 80019c4:	f001 fc28 	bl	8003218 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	40000400 	.word	0x40000400

080019d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM6_Init+0x64>)
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <MX_TIM6_Init+0x68>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_TIM6_Init+0x64>)
 80019ee:	2213      	movs	r2, #19
 80019f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_TIM6_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_TIM6_Init+0x64>)
 80019fa:	f241 0267 	movw	r2, #4199	; 0x1067
 80019fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_TIM6_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM6_Init+0x64>)
 8001a08:	f004 ff3a 	bl	8006880 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a12:	f000 fa1f 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM6_Init+0x64>)
 8001a24:	f005 fd1a 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a2e:	f000 fa11 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000380 	.word	0x20000380
 8001a40:	40001000 	.word	0x40001000

08001a44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <MX_TIM7_Init+0x68>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a5a:	22a7      	movs	r2, #167	; 0xa7
 8001a5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a66:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a6a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a74:	f004 ff04 	bl	8006880 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a7e:	f000 f9e9 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a90:	f005 fce4 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a9a:	f000 f9db 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000480 	.word	0x20000480
 8001aac:	40001400 	.word	0x40001400

08001ab0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f006 f95b 	bl	8007d7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <MX_TIM8_Init+0xac>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af8:	2303      	movs	r3, #3
 8001afa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001afc:	2302      	movs	r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001b24:	f004 ff64 	bl	80069f0 <HAL_TIM_Encoder_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b2e:	f000 f991 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM8_Init+0xa8>)
 8001b40:	f005 fc8c 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b4a:	f000 f983 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000fc 	.word	0x200000fc
 8001b5c:	40010400 	.word	0x40010400

08001b60 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
 8001b76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <MX_TIM12_Init+0x9c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b8c:	f240 3247 	movw	r2, #839	; 0x347
 8001b90:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001ba0:	f004 febd 	bl	800691e <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001baa:	f000 f953 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	; 0x60
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001bc6:	f005 f8e5 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001bd0:	f000 f940 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001bdc:	f005 f8da 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001be6:	f000 f935 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bea:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <MX_TIM12_Init+0x98>)
 8001bec:	f001 fb14 	bl	8003218 <HAL_TIM_MspPostInit>

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000440 	.word	0x20000440
 8001bfc:	40001800 	.word	0x40001800

08001c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_USART1_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c38:	f005 fca0 	bl	800757c <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 f907 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002c4 	.word	0x200002c4
 8001c50:	40011000 	.word	0x40011000

08001c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_DMA_Init+0x3c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <MX_DMA_Init+0x3c>)
 8001c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_DMA_Init+0x3c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	2038      	movs	r0, #56	; 0x38
 8001c7c:	f002 fa7d 	bl	800417a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c80:	2038      	movs	r0, #56	; 0x38
 8001c82:	f002 fa96 	bl	80041b2 <HAL_NVIC_EnableIRQ>

}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a62      	ldr	r2, [pc, #392]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x1a8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f242 0104 	movw	r1, #8196	; 0x2004
 8001d3c:	4840      	ldr	r0, [pc, #256]	; (8001e40 <MX_GPIO_Init+0x1ac>)
 8001d3e:	f003 f945 	bl	8004fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001d48:	483e      	ldr	r0, [pc, #248]	; (8001e44 <MX_GPIO_Init+0x1b0>)
 8001d4a:	f003 f93f 	bl	8004fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	483d      	ldr	r0, [pc, #244]	; (8001e48 <MX_GPIO_Init+0x1b4>)
 8001d54:	f003 f93a 	bl	8004fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001d58:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001d5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <MX_GPIO_Init+0x1b8>)
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4838      	ldr	r0, [pc, #224]	; (8001e50 <MX_GPIO_Init+0x1bc>)
 8001d6e:	f002 ff93 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 8001d72:	f242 0304 	movw	r3, #8196	; 0x2004
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <MX_GPIO_Init+0x1ac>)
 8001d8c:	f002 ff84 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <MX_GPIO_Init+0x1b8>)
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <MX_GPIO_Init+0x1ac>)
 8001da6:	f002 ff77 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4820      	ldr	r0, [pc, #128]	; (8001e44 <MX_GPIO_Init+0x1b0>)
 8001dc4:	f002 ff68 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_GPIO_Init+0x1b0>)
 8001de2:	f002 ff59 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de6:	2304      	movs	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4812      	ldr	r0, [pc, #72]	; (8001e48 <MX_GPIO_Init+0x1b4>)
 8001dfe:	f002 ff4b 	bl	8004c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2006      	movs	r0, #6
 8001e08:	f002 f9b7 	bl	800417a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e0c:	2006      	movs	r0, #6
 8001e0e:	f002 f9d0 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2007      	movs	r0, #7
 8001e18:	f002 f9af 	bl	800417a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e1c:	2007      	movs	r0, #7
 8001e1e:	f002 f9c8 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f002 f9a7 	bl	800417a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e2c:	2028      	movs	r0, #40	; 0x28
 8001e2e:	f002 f9c0 	bl	80041b2 <HAL_NVIC_EnableIRQ>

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	40020800 	.word	0x40020800

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <gpio_set>:
float order_posL = 0.0f;
float order_velR = 0.0f;
float order_velL = 0.0f;
float target_vel;

void gpio_set(void){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	CS_SET;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <gpio_set+0x2c>)
 8001e6e:	f003 f8ad 	bl	8004fcc <HAL_GPIO_WritePin>
	MR_SET;
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <gpio_set+0x30>)
 8001e7a:	f003 f8a7 	bl	8004fcc <HAL_GPIO_WritePin>
	ML_SET;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <gpio_set+0x30>)
 8001e86:	f003 f8a1 	bl	8004fcc <HAL_GPIO_WritePin>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40020000 	.word	0x40020000

08001e98 <Motorset>:

void Motorset(int16_t motorL, int16_t motorR, uint8_t stop) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	70fb      	strb	r3, [r7, #3]

	int16_t pwmL_out,pwmR_out;

	if(motorR >= 0) {
 8001eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db08      	blt.n	8001ec4 <Motorset+0x2c>
		pwmR_out = motorR;
 8001eb2:	88bb      	ldrh	r3, [r7, #4]
 8001eb4:	81bb      	strh	r3, [r7, #12]
		MR_SET;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ebc:	4824      	ldr	r0, [pc, #144]	; (8001f50 <Motorset+0xb8>)
 8001ebe:	f003 f885 	bl	8004fcc <HAL_GPIO_WritePin>
 8001ec2:	e009      	b.n	8001ed8 <Motorset+0x40>
	}
	else {
		pwmR_out = motorR * (-1);
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	81bb      	strh	r3, [r7, #12]
		MR_RESET;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed2:	481f      	ldr	r0, [pc, #124]	; (8001f50 <Motorset+0xb8>)
 8001ed4:	f003 f87a 	bl	8004fcc <HAL_GPIO_WritePin>
	}

	if(motorL >= 0) {
 8001ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db08      	blt.n	8001ef2 <Motorset+0x5a>
		pwmL_out = motorL;
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	81fb      	strh	r3, [r7, #14]
		ML_RESET;
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <Motorset+0xb8>)
 8001eec:	f003 f86e 	bl	8004fcc <HAL_GPIO_WritePin>
 8001ef0:	e009      	b.n	8001f06 <Motorset+0x6e>
	}
	else {
		pwmL_out = motorL*(-1) ;
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	81fb      	strh	r3, [r7, #14]
		ML_SET;
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <Motorset+0xb8>)
 8001f02:	f003 f863 	bl	8004fcc <HAL_GPIO_WritePin>
	}

	if(pwmR_out > COUNTER_PERIOD_TIM12) pwmR_out = 839;
 8001f06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f0a:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001f0e:	db02      	blt.n	8001f16 <Motorset+0x7e>
 8001f10:	f240 3347 	movw	r3, #839	; 0x347
 8001f14:	81bb      	strh	r3, [r7, #12]
	if(pwmL_out > COUNTER_PERIOD_TIM12) pwmL_out = 839;
 8001f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f1a:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001f1e:	db02      	blt.n	8001f26 <Motorset+0x8e>
 8001f20:	f240 3347 	movw	r3, #839	; 0x347
 8001f24:	81fb      	strh	r3, [r7, #14]

	if(stop == 1) {
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d103      	bne.n	8001f34 <Motorset+0x9c>
		pwmR_out = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	81bb      	strh	r3, [r7, #12]
		pwmL_out = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, pwmR_out);
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <Motorset+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwmL_out);
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <Motorset+0xbc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020000 	.word	0x40020000
 8001f54:	20000440 	.word	0x20000440

08001f58 <posPID>:



void posPID(void) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0

	float p_pos, d_pos;
	static float i_pos;
	float kp_pos = 0.15f, ki_pos = 0.00f/*0.004f*/, kd_pos = 0.00f/*0.008f*/;
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <posPID+0x120>)
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
	static float def_pos[] = {0.0f, 0.0f};

	//def_pos[0] = ( ((float)line_senLLL * 1.6f) + ((float)line_senLL * 1.25f) + (float)line_senL) - ((float)line_senR + ((float)line_senRR * 1.25f) + ((float)line_senRRR * 1.6f)); //1.25 1.6
	def_pos[0] = ( ((float)line_senLLL) + ((float)line_senLL ) + (float)line_senL) - ((float)line_senR + ((float)line_senRR ) + ((float)line_senRRR )); //1.25 1.6
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <posPID+0x124>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <posPID+0x128>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <posPID+0x12c>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <posPID+0x130>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <posPID+0x134>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <posPID+0x138>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <posPID+0x13c>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]

	p_pos = kp_pos * def_pos[0]; //P制御
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <posPID+0x13c>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a02 	vstr	s15, [r7, #8]
	i_pos += ki_pos * def_pos[0] * DELTA_T; //I制御
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <posPID+0x13c>)
 8001fe4:	ed93 7a00 	vldr	s14, [r3]
 8001fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002098 <posPID+0x140>
 8001ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <posPID+0x144>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <posPID+0x144>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
	d_pos = kd_pos * (def_pos[0] - def_pos[1]) / DELTA_T; //D制御
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <posPID+0x13c>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <posPID+0x13c>)
 8002010:	edd3 7a01 	vldr	s15, [r3, #4]
 8002014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002018:	edd7 7a03 	vldr	s15, [r7, #12]
 800201c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002020:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002098 <posPID+0x140>
 8002024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002028:	edc7 7a01 	vstr	s15, [r7, #4]

	order_posR = -p_pos + i_pos + d_pos;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <posPID+0x144>)
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	edd7 7a02 	vldr	s15, [r7, #8]
 8002036:	ee37 7a67 	vsub.f32	s14, s14, s15
 800203a:	edd7 7a01 	vldr	s15, [r7, #4]
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <posPID+0x148>)
 8002044:	edc3 7a00 	vstr	s15, [r3]
	order_posL = (p_pos + i_pos + d_pos);
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <posPID+0x144>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002056:	edd7 7a01 	vldr	s15, [r7, #4]
 800205a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <posPID+0x14c>)
 8002060:	edc3 7a00 	vstr	s15, [r3]

	def_pos[1] = def_pos[0];
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <posPID+0x13c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <posPID+0x13c>)
 800206a:	6053      	str	r3, [r2, #4]

}
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	3e19999a 	.word	0x3e19999a
 800207c:	200000b4 	.word	0x200000b4
 8002080:	200000b6 	.word	0x200000b6
 8002084:	200000b8 	.word	0x200000b8
 8002088:	200000ba 	.word	0x200000ba
 800208c:	200000bc 	.word	0x200000bc
 8002090:	200000be 	.word	0x200000be
 8002094:	2000009c 	.word	0x2000009c
 8002098:	3a83126f 	.word	0x3a83126f
 800209c:	200000a4 	.word	0x200000a4
 80020a0:	2000008c 	.word	0x2000008c
 80020a4:	20000090 	.word	0x20000090

080020a8 <velPID>:

void velPID(float target) {
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_vel, kp_vel = 2.80f/*2.8f*/, ki_vel = 50.0f;	//2.8 50
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <velPID+0xb0>)
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <velPID+0xb4>)
 80020b8:	613b      	str	r3, [r7, #16]
	//float vel_center, filter_vel_center, acceleration_imu;
	static float i_vel, def_vel, vel_center;

	vel_center = (velR + velL) / 2.0f;
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <velPID+0xb8>)
 80020bc:	ed93 7a00 	vldr	s14, [r3]
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <velPID+0xbc>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <velPID+0xc0>)
 80020d4:	edc3 7a00 	vstr	s15, [r3]
	//acceleration_imu = (float)xa / 16384.0f;
	//filter_vel_center = ComplementaryFilter(acceleration_imu, vel_center, 0.65f, last_vel_center);
	//last_vel_center = filter_vel_center;

	def_vel = 300.0f - vel_center ;
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <velPID+0xc0>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800216c <velPID+0xc4>
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <velPID+0xc8>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]

	p_vel = kp_vel * def_vel;
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <velPID+0xc8>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a03 	vstr	s15, [r7, #12]
	i_vel += ki_vel * def_vel * DELTA_T;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <velPID+0xc8>)
 8002100:	ed93 7a00 	vldr	s14, [r3]
 8002104:	edd7 7a04 	vldr	s15, [r7, #16]
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002174 <velPID+0xcc>
 8002110:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <velPID+0xd0>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <velPID+0xd0>)
 8002120:	edc3 7a00 	vstr	s15, [r3]

	order_velR = p_vel + i_vel;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <velPID+0xd0>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	edd7 7a03 	vldr	s15, [r7, #12]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <velPID+0xd4>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
	order_velL = p_vel + i_vel;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <velPID+0xd0>)
 800213a:	ed93 7a00 	vldr	s14, [r3]
 800213e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <velPID+0xd8>)
 8002148:	edc3 7a00 	vstr	s15, [r3]
}
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40333333 	.word	0x40333333
 800215c:	42480000 	.word	0x42480000
 8002160:	200004c4 	.word	0x200004c4
 8002164:	200004cc 	.word	0x200004cc
 8002168:	200000a8 	.word	0x200000a8
 800216c:	43960000 	.word	0x43960000
 8002170:	200000ac 	.word	0x200000ac
 8002174:	3a83126f 	.word	0x3a83126f
 8002178:	200000b0 	.word	0x200000b0
 800217c:	20000094 	.word	0x20000094
 8002180:	20000098 	.word	0x20000098

08002184 <ADval_get>:
uint32_t maker_adress;
uint16_t maker_distance_cmp_lim;
float PlanVelo2[6000];
uint8_t second_trace_pattern;

void ADval_get(void) {
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <ADval_get+0x80>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <ADval_get+0x84>)
 800218e:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <ADval_get+0x80>)
 8002192:	885a      	ldrh	r2, [r3, #2]
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <ADval_get+0x88>)
 8002196:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <ADval_get+0x80>)
 800219a:	889a      	ldrh	r2, [r3, #4]
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <ADval_get+0x8c>)
 800219e:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <ADval_get+0x80>)
 80021a2:	88da      	ldrh	r2, [r3, #6]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <ADval_get+0x90>)
 80021a6:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <ADval_get+0x80>)
 80021aa:	891a      	ldrh	r2, [r3, #8]
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <ADval_get+0x94>)
 80021ae:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <ADval_get+0x80>)
 80021b2:	895a      	ldrh	r2, [r3, #10]
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <ADval_get+0x98>)
 80021b6:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <ADval_get+0x80>)
 80021ba:	899a      	ldrh	r2, [r3, #12]
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <ADval_get+0x9c>)
 80021be:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <ADval_get+0x80>)
 80021c2:	89da      	ldrh	r2, [r3, #14]
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <ADval_get+0xa0>)
 80021c6:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[8];
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <ADval_get+0x80>)
 80021ca:	8a1a      	ldrh	r2, [r3, #16]
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <ADval_get+0xa4>)
 80021ce:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[9];
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <ADval_get+0x80>)
 80021d2:	8a5a      	ldrh	r2, [r3, #18]
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <ADval_get+0xa8>)
 80021d6:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[10];
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <ADval_get+0x80>)
 80021da:	8a9a      	ldrh	r2, [r3, #20]
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <ADval_get+0xac>)
 80021de:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[11];
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <ADval_get+0x80>)
 80021e2:	8ada      	ldrh	r2, [r3, #22]
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <ADval_get+0xb0>)
 80021e6:	801a      	strh	r2, [r3, #0]
	line_sen12 = ADC1_Buff[12];
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <ADval_get+0x80>)
 80021ea:	8b1a      	ldrh	r2, [r3, #24]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <ADval_get+0xb4>)
 80021ee:	801a      	strh	r2, [r3, #0]
	line_sen13 = ADC1_Buff[13];
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <ADval_get+0x80>)
 80021f2:	8b5a      	ldrh	r2, [r3, #26]
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <ADval_get+0xb8>)
 80021f6:	801a      	strh	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000304 	.word	0x20000304
 8002208:	2000c0b4 	.word	0x2000c0b4
 800220c:	2000051e 	.word	0x2000051e
 8002210:	20000514 	.word	0x20000514
 8002214:	20000502 	.word	0x20000502
 8002218:	200004e2 	.word	0x200004e2
 800221c:	2000c0b0 	.word	0x2000c0b0
 8002220:	20000516 	.word	0x20000516
 8002224:	20000508 	.word	0x20000508
 8002228:	20000520 	.word	0x20000520
 800222c:	2000c0b6 	.word	0x2000c0b6
 8002230:	2000051c 	.word	0x2000051c
 8002234:	200004e0 	.word	0x200004e0
 8002238:	2000c0b8 	.word	0x2000c0b8
 800223c:	20000522 	.word	0x20000522

08002240 <ADval_sum>:

void ADval_sum(void) {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	line_senLLL	= line_sen11 + line_sen10;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <ADval_sum+0x70>)
 8002246:	881a      	ldrh	r2, [r3, #0]
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <ADval_sum+0x74>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	4413      	add	r3, r2
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <ADval_sum+0x78>)
 8002252:	801a      	strh	r2, [r3, #0]
	line_senLL	= line_sen9 + line_sen8;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <ADval_sum+0x7c>)
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <ADval_sum+0x80>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <ADval_sum+0x84>)
 8002262:	801a      	strh	r2, [r3, #0]
	line_senL	= line_sen7 + line_sen6;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <ADval_sum+0x88>)
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <ADval_sum+0x8c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	4413      	add	r3, r2
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <ADval_sum+0x90>)
 8002272:	801a      	strh	r2, [r3, #0]
	line_senR	= line_sen5 + line_sen4;
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <ADval_sum+0x94>)
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <ADval_sum+0x98>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4413      	add	r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <ADval_sum+0x9c>)
 8002282:	801a      	strh	r2, [r3, #0]
	line_senRR	= line_sen3 + line_sen2;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <ADval_sum+0xa0>)
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <ADval_sum+0xa4>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <ADval_sum+0xa8>)
 8002292:	801a      	strh	r2, [r3, #0]
	line_senRRR	= line_sen1 + line_sen0;
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <ADval_sum+0xac>)
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <ADval_sum+0xb0>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <ADval_sum+0xb4>)
 80022a2:	801a      	strh	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000c0b6 	.word	0x2000c0b6
 80022b4:	20000520 	.word	0x20000520
 80022b8:	200000b4 	.word	0x200000b4
 80022bc:	200004e0 	.word	0x200004e0
 80022c0:	2000051c 	.word	0x2000051c
 80022c4:	200000b6 	.word	0x200000b6
 80022c8:	20000508 	.word	0x20000508
 80022cc:	20000516 	.word	0x20000516
 80022d0:	200000b8 	.word	0x200000b8
 80022d4:	2000c0b0 	.word	0x2000c0b0
 80022d8:	200004e2 	.word	0x200004e2
 80022dc:	200000ba 	.word	0x200000ba
 80022e0:	20000502 	.word	0x20000502
 80022e4:	20000514 	.word	0x20000514
 80022e8:	200000bc 	.word	0x200000bc
 80022ec:	2000051e 	.word	0x2000051e
 80022f0:	2000c0b4 	.word	0x2000c0b4
 80022f4:	200000be 	.word	0x200000be

080022f8 <getEncoder>:

	return maker;
}


void getEncoder(void) {
 80022f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0

	int16_t enc_tim1_ms;
	int16_t enc_tim8_ms;

	enc_tim1_ms = TIM1 -> CNT;
 8002300:	4b60      	ldr	r3, [pc, #384]	; (8002484 <getEncoder+0x18c>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	80fb      	strh	r3, [r7, #6]
	enc_tim8_ms = TIM8 -> CNT;
 8002306:	4b60      	ldr	r3, [pc, #384]	; (8002488 <getEncoder+0x190>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	80bb      	strh	r3, [r7, #4]

	TIM1 -> CNT = 0;
 800230c:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <getEncoder+0x18c>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <getEncoder+0x190>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total += enc_tim1_ms;
 8002318:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800231c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002320:	4b5a      	ldr	r3, [pc, #360]	; (800248c <getEncoder+0x194>)
 8002322:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002326:	eb1b 0301 	adds.w	r3, fp, r1
 800232a:	eb4c 0402 	adc.w	r4, ip, r2
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <getEncoder+0x194>)
 8002330:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 8002334:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002338:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800233c:	4b54      	ldr	r3, [pc, #336]	; (8002490 <getEncoder+0x198>)
 800233e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002342:	eb1b 0301 	adds.w	r3, fp, r1
 8002346:	eb4c 0402 	adc.w	r4, ip, r2
 800234a:	4a51      	ldr	r2, [pc, #324]	; (8002490 <getEncoder+0x198>)
 800234c:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <getEncoder+0x194>)
 8002352:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <getEncoder+0x198>)
 8002358:	e9d3 3400 	ldrd	r3, r4, [r3]
 800235c:	eb13 0b01 	adds.w	fp, r3, r1
 8002360:	eb44 0c02 	adc.w	ip, r4, r2
 8002364:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8002368:	4611      	mov	r1, r2
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	eb1b 0301 	adds.w	r3, fp, r1
 8002372:	eb4c 0402 	adc.w	r4, ip, r2
 8002376:	1064      	asrs	r4, r4, #1
 8002378:	ea4f 0333 	mov.w	r3, r3, rrx
 800237c:	4a45      	ldr	r2, [pc, #276]	; (8002494 <getEncoder+0x19c>)
 800237e:	e9c2 3400 	strd	r3, r4, [r2]

	enc_cnt += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <getEncoder+0x1a0>)
 8002384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002388:	4618      	mov	r0, r3
 800238a:	4621      	mov	r1, r4
 800238c:	f7fe f9fc 	bl	8000788 <__aeabi_l2f>
 8002390:	ee06 0a10 	vmov	s12, r0
 8002394:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002398:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ae:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023b2:	ee17 0a90 	vmov	r0, s15
 80023b6:	f7fe fa3d 	bl	8000834 <__aeabi_f2lz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	4a36      	ldr	r2, [pc, #216]	; (8002498 <getEncoder+0x1a0>)
 80023c0:	e9c2 3400 	strd	r3, r4, [r2]
	enc_cnt2 += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <getEncoder+0x1a4>)
 80023c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	f7fe f9db 	bl	8000788 <__aeabi_l2f>
 80023d2:	ee06 0a10 	vmov	s12, r0
 80023d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80023da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023f4:	ee17 0a90 	vmov	r0, s15
 80023f8:	f7fe fa1c 	bl	8000834 <__aeabi_f2lz>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <getEncoder+0x1a4>)
 8002402:	e9c2 3400 	strd	r3, r4, [r2]

	enc_tim1_cnt_10ms += enc_tim1_ms;
 8002406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <getEncoder+0x1a8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <getEncoder+0x1a8>)
 8002412:	6013      	str	r3, [r2, #0]
	enc_tim8_cnt_10ms += enc_tim8_ms;
 8002414:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <getEncoder+0x1ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4413      	add	r3, r2
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <getEncoder+0x1ac>)
 8002420:	6013      	str	r3, [r2, #0]

	velR = -(float)enc_tim1_ms * ENC_PULSE_MM * 1000.0f;
 8002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242e:	eef1 7a67 	vneg.f32	s15, s15
 8002432:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80024a8 <getEncoder+0x1b0>
 8002436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80024ac <getEncoder+0x1b4>
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <getEncoder+0x1b8>)
 8002444:	edc3 7a00 	vstr	s15, [r3]
	velL = (float)enc_tim8_ms * ENC_PULSE_MM * 1000.0f;
 8002448:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024a8 <getEncoder+0x1b0>
 8002458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024ac <getEncoder+0x1b4>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <getEncoder+0x1bc>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
	monR = velR;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <getEncoder+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <getEncoder+0x1c0>)
 8002470:	6013      	str	r3, [r2, #0]
	monL = velL;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <getEncoder+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <getEncoder+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002484:	40010000 	.word	0x40010000
 8002488:	40010400 	.word	0x40010400
 800248c:	200000c0 	.word	0x200000c0
 8002490:	200000c8 	.word	0x200000c8
 8002494:	200000d0 	.word	0x200000d0
 8002498:	200004f0 	.word	0x200004f0
 800249c:	200004f8 	.word	0x200004f8
 80024a0:	2000c0c0 	.word	0x2000c0c0
 80024a4:	20000518 	.word	0x20000518
 80024a8:	3c53953e 	.word	0x3c53953e
 80024ac:	447a0000 	.word	0x447a0000
 80024b0:	200004c4 	.word	0x200004c4
 80024b4:	200004cc 	.word	0x200004cc
 80024b8:	200004d8 	.word	0x200004d8
 80024bc:	200004c0 	.word	0x200004c0

080024c0 <setup>:
 */
#include "setup.h"

uint32_t log_check_adress;

void setup(void){
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	//led_pattern(setup_mode);

	switch(setup_mode) {
 80024c6:	4bc3      	ldr	r3, [pc, #780]	; (80027d4 <setup+0x314>)
 80024c8:	f993 3000 	ldrsb.w	r3, [r3]
 80024cc:	2b07      	cmp	r3, #7
 80024ce:	f200 83b3 	bhi.w	8002c38 <setup+0x778>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <setup+0x18>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024f9 	.word	0x080024f9
 80024dc:	080028ed 	.word	0x080028ed
 80024e0:	08002945 	.word	0x08002945
 80024e4:	080029ab 	.word	0x080029ab
 80024e8:	08002a45 	.word	0x08002a45
 80024ec:	08002a63 	.word	0x08002a63
 80024f0:	08002abd 	.word	0x08002abd
 80024f4:	08002bb9 	.word	0x08002bb9
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 80024f8:	4bb7      	ldr	r3, [pc, #732]	; (80027d8 <setup+0x318>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <setup+0x4c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1049); //MAX4199
 8002500:	4bb6      	ldr	r3, [pc, #728]	; (80027dc <setup+0x31c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f240 4219 	movw	r2, #1049	; 0x419
 8002508:	635a      	str	r2, [r3, #52]	; 0x34
 800250a:	e003      	b.n	8002514 <setup+0x54>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800250c:	4bb3      	ldr	r3, [pc, #716]	; (80027dc <setup+0x31c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8002514:	4bb2      	ldr	r3, [pc, #712]	; (80027e0 <setup+0x320>)
 8002516:	f993 3000 	ldrsb.w	r3, [r3]
 800251a:	2b0e      	cmp	r3, #14
 800251c:	f200 81e4 	bhi.w	80028e8 <setup+0x428>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <setup+0x68>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	08002565 	.word	0x08002565
 800252c:	0800258f 	.word	0x0800258f
 8002530:	080025b9 	.word	0x080025b9
 8002534:	080025e3 	.word	0x080025e3
 8002538:	0800260d 	.word	0x0800260d
 800253c:	08002637 	.word	0x08002637
 8002540:	08002661 	.word	0x08002661
 8002544:	0800268b 	.word	0x0800268b
 8002548:	080026b9 	.word	0x080026b9
 800254c:	080026e7 	.word	0x080026e7
 8002550:	08002715 	.word	0x08002715
 8002554:	0800272d 	.word	0x0800272d
 8002558:	08002745 	.word	0x08002745
 800255c:	0800278f 	.word	0x0800278f
 8002560:	080028b1 	.word	0x080028b1
			case 0:
				lcd_locate(0,0);
 8002564:	2100      	movs	r1, #0
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fdb1 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 800256c:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <setup+0x324>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	489d      	ldr	r0, [pc, #628]	; (80027e8 <setup+0x328>)
 8002574:	f7fe fdd5 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 8002578:	2101      	movs	r1, #1
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fda7 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 8002580:	4b9a      	ldr	r3, [pc, #616]	; (80027ec <setup+0x32c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	489a      	ldr	r0, [pc, #616]	; (80027f0 <setup+0x330>)
 8002588:	f7fe fdcb 	bl	8001122 <lcd_printf>
				break;
 800258c:	e1ad      	b.n	80028ea <setup+0x42a>
			case 1:
				lcd_locate(0,0);
 800258e:	2100      	movs	r1, #0
 8002590:	2000      	movs	r0, #0
 8002592:	f7fe fd9c 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <setup+0x334>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4896      	ldr	r0, [pc, #600]	; (80027f8 <setup+0x338>)
 800259e:	f7fe fdc0 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80025a2:	2101      	movs	r1, #1
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe fd92 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 80025aa:	4b94      	ldr	r3, [pc, #592]	; (80027fc <setup+0x33c>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4893      	ldr	r0, [pc, #588]	; (8002800 <setup+0x340>)
 80025b2:	f7fe fdb6 	bl	8001122 <lcd_printf>
				break;
 80025b6:	e198      	b.n	80028ea <setup+0x42a>
			case 2:
				lcd_locate(0,0);
 80025b8:	2100      	movs	r1, #0
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fd87 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 80025c0:	4b90      	ldr	r3, [pc, #576]	; (8002804 <setup+0x344>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4890      	ldr	r0, [pc, #576]	; (8002808 <setup+0x348>)
 80025c8:	f7fe fdab 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80025cc:	2101      	movs	r1, #1
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fd7d 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 80025d4:	4b8d      	ldr	r3, [pc, #564]	; (800280c <setup+0x34c>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	488d      	ldr	r0, [pc, #564]	; (8002810 <setup+0x350>)
 80025dc:	f7fe fda1 	bl	8001122 <lcd_printf>
				break;
 80025e0:	e183      	b.n	80028ea <setup+0x42a>
			case 3:
				lcd_locate(0,0);
 80025e2:	2100      	movs	r1, #0
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe fd72 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 80025ea:	4b8a      	ldr	r3, [pc, #552]	; (8002814 <setup+0x354>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4889      	ldr	r0, [pc, #548]	; (8002818 <setup+0x358>)
 80025f2:	f7fe fd96 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fd68 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 80025fe:	4b87      	ldr	r3, [pc, #540]	; (800281c <setup+0x35c>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4886      	ldr	r0, [pc, #536]	; (8002820 <setup+0x360>)
 8002606:	f7fe fd8c 	bl	8001122 <lcd_printf>
				break;
 800260a:	e16e      	b.n	80028ea <setup+0x42a>
			case 4:
				lcd_locate(0,0);
 800260c:	2100      	movs	r1, #0
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fd5d 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 8002614:	4b83      	ldr	r3, [pc, #524]	; (8002824 <setup+0x364>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	4883      	ldr	r0, [pc, #524]	; (8002828 <setup+0x368>)
 800261c:	f7fe fd81 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 8002620:	2101      	movs	r1, #1
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fd53 	bl	80010ce <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <setup+0x36c>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	4880      	ldr	r0, [pc, #512]	; (8002830 <setup+0x370>)
 8002630:	f7fe fd77 	bl	8001122 <lcd_printf>
				break;
 8002634:	e159      	b.n	80028ea <setup+0x42a>
			case 5:
				lcd_locate(0,0);
 8002636:	2100      	movs	r1, #0
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe fd48 	bl	80010ce <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <setup+0x374>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	487c      	ldr	r0, [pc, #496]	; (8002838 <setup+0x378>)
 8002646:	f7fe fd6c 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 800264a:	2101      	movs	r1, #1
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe fd3e 	bl	80010ce <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <setup+0x37c>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	4879      	ldr	r0, [pc, #484]	; (8002840 <setup+0x380>)
 800265a:	f7fe fd62 	bl	8001122 <lcd_printf>
				break;
 800265e:	e144      	b.n	80028ea <setup+0x42a>
			case 6:
				lcd_locate(0,0);
 8002660:	2100      	movs	r1, #0
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fd33 	bl	80010ce <lcd_locate>
				lcd_printf("%4dAD10",line_sen12);
 8002668:	4b76      	ldr	r3, [pc, #472]	; (8002844 <setup+0x384>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	4872      	ldr	r0, [pc, #456]	; (8002838 <setup+0x378>)
 8002670:	f7fe fd57 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 8002674:	2101      	movs	r1, #1
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe fd29 	bl	80010ce <lcd_locate>
				lcd_printf("%4dAD11",line_sen13);
 800267c:	4b72      	ldr	r3, [pc, #456]	; (8002848 <setup+0x388>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	486f      	ldr	r0, [pc, #444]	; (8002840 <setup+0x380>)
 8002684:	f7fe fd4d 	bl	8001122 <lcd_printf>
				break;
 8002688:	e12f      	b.n	80028ea <setup+0x42a>
			case 7:
				lcd_locate(0,0);
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fd1e 	bl	80010ce <lcd_locate>
				lcd_printf("XG%6x",xg);
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <setup+0x38c>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b21b      	sxth	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	486d      	ldr	r0, [pc, #436]	; (8002850 <setup+0x390>)
 800269c:	f7fe fd41 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80026a0:	2101      	movs	r1, #1
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe fd13 	bl	80010ce <lcd_locate>
				lcd_printf("YG%6x",yg);
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <setup+0x394>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	4869      	ldr	r0, [pc, #420]	; (8002858 <setup+0x398>)
 80026b2:	f7fe fd36 	bl	8001122 <lcd_printf>
				break;
 80026b6:	e118      	b.n	80028ea <setup+0x42a>
			case 8:
				lcd_locate(0,0);
 80026b8:	2100      	movs	r1, #0
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fd07 	bl	80010ce <lcd_locate>
				lcd_printf("ZG%6x",zg);
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <setup+0x39c>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	4865      	ldr	r0, [pc, #404]	; (8002860 <setup+0x3a0>)
 80026ca:	f7fe fd2a 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80026ce:	2101      	movs	r1, #1
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe fcfc 	bl	80010ce <lcd_locate>
				lcd_printf("XA%6x",xa);
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <setup+0x3a4>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b21b      	sxth	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	4862      	ldr	r0, [pc, #392]	; (8002868 <setup+0x3a8>)
 80026e0:	f7fe fd1f 	bl	8001122 <lcd_printf>
				break;
 80026e4:	e101      	b.n	80028ea <setup+0x42a>
			case 9:
				lcd_locate(0,0);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fcf0 	bl	80010ce <lcd_locate>
				lcd_printf("YA%6x",ya);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <setup+0x3ac>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	485e      	ldr	r0, [pc, #376]	; (8002870 <setup+0x3b0>)
 80026f8:	f7fe fd13 	bl	8001122 <lcd_printf>
				lcd_locate(0,1);
 80026fc:	2101      	movs	r1, #1
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe fce5 	bl	80010ce <lcd_locate>
				lcd_printf("ZA%6x",za);
 8002704:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <setup+0x3b4>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b21b      	sxth	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	485a      	ldr	r0, [pc, #360]	; (8002878 <setup+0x3b8>)
 800270e:	f7fe fd08 	bl	8001122 <lcd_printf>
				break;
 8002712:	e0ea      	b.n	80028ea <setup+0x42a>
			case 10:
				lcd_locate(0,0);
 8002714:	2100      	movs	r1, #0
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fcd9 	bl	80010ce <lcd_locate>
				lcd_print("Encoder1");
 800271c:	4857      	ldr	r0, [pc, #348]	; (800287c <setup+0x3bc>)
 800271e:	f7fe fceb 	bl	80010f8 <lcd_print>
				lcd_locate(0,1);
 8002722:	2101      	movs	r1, #1
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe fcd2 	bl	80010ce <lcd_locate>
				//lcd_printf("%8d", (int)mileage((float)enc_tim1_total));
				break;
 800272a:	e0de      	b.n	80028ea <setup+0x42a>
			case 11:
				lcd_locate(0,0);
 800272c:	2100      	movs	r1, #0
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fccd 	bl	80010ce <lcd_locate>
				lcd_print("Encoder2");
 8002734:	4852      	ldr	r0, [pc, #328]	; (8002880 <setup+0x3c0>)
 8002736:	f7fe fcdf 	bl	80010f8 <lcd_print>
				lcd_locate(0,1);
 800273a:	2101      	movs	r1, #1
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe fcc6 	bl	80010ce <lcd_locate>
				//lcd_printf("%8d", (int)mileage((float)enc_tim8_total));
				break;
 8002742:	e0d2      	b.n	80028ea <setup+0x42a>
			case 12:
				lcd_locate(0,0);
 8002744:	2100      	movs	r1, #0
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fcc1 	bl	80010ce <lcd_locate>
				lcd_print("Voltage_");
 800274c:	484d      	ldr	r0, [pc, #308]	; (8002884 <setup+0x3c4>)
 800274e:	f7fe fcd3 	bl	80010f8 <lcd_print>
				lcd_locate(0,1);
 8002752:	2101      	movs	r1, #1
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fcba 	bl	80010ce <lcd_locate>
				volt_reg = INA260_read(0x02);
 800275a:	2002      	movs	r0, #2
 800275c:	f7fe fd20 	bl	80011a0 <INA260_read>
 8002760:	4603      	mov	r3, r0
 8002762:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002888 <setup+0x3c8>
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002776:	ee17 0a90 	vmov	r0, s15
 800277a:	f7fd fedd 	bl	8000538 <__aeabi_f2d>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	461a      	mov	r2, r3
 8002784:	4623      	mov	r3, r4
 8002786:	4841      	ldr	r0, [pc, #260]	; (800288c <setup+0x3cc>)
 8002788:	f7fe fccb 	bl	8001122 <lcd_printf>
				break;
 800278c:	e0ad      	b.n	80028ea <setup+0x42a>
			case 13:
				lcd_locate(0,0);
 800278e:	2100      	movs	r1, #0
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe fc9c 	bl	80010ce <lcd_locate>
				lcd_print("error_th");
 8002796:	483e      	ldr	r0, [pc, #248]	; (8002890 <setup+0x3d0>)
 8002798:	f7fe fcae 	bl	80010f8 <lcd_print>
				lcd_locate(0,1);
 800279c:	2101      	movs	r1, #1
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fc95 	bl	80010ce <lcd_locate>
				lcd_printf("%8d",line_senLLL + line_senLL + line_senL + line_senR + line_senRR + line_senRRR);
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <setup+0x3d4>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <setup+0x3d8>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a3a      	ldr	r2, [pc, #232]	; (800289c <setup+0x3dc>)
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <setup+0x3e0>)
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <setup+0x3e4>)
 80027be:	8812      	ldrh	r2, [r2, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <setup+0x3e8>)
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	4838      	ldr	r0, [pc, #224]	; (80028ac <setup+0x3ec>)
 80027cc:	f7fe fca9 	bl	8001122 <lcd_printf>
				break;
 80027d0:	e08b      	b.n	80028ea <setup+0x42a>
 80027d2:	bf00      	nop
 80027d4:	200000df 	.word	0x200000df
 80027d8:	200000e2 	.word	0x200000e2
 80027dc:	20000400 	.word	0x20000400
 80027e0:	200000e0 	.word	0x200000e0
 80027e4:	2000c0b4 	.word	0x2000c0b4
 80027e8:	0800859c 	.word	0x0800859c
 80027ec:	2000051e 	.word	0x2000051e
 80027f0:	080085a4 	.word	0x080085a4
 80027f4:	20000514 	.word	0x20000514
 80027f8:	080085ac 	.word	0x080085ac
 80027fc:	20000502 	.word	0x20000502
 8002800:	080085b4 	.word	0x080085b4
 8002804:	200004e2 	.word	0x200004e2
 8002808:	080085bc 	.word	0x080085bc
 800280c:	2000c0b0 	.word	0x2000c0b0
 8002810:	080085c4 	.word	0x080085c4
 8002814:	20000516 	.word	0x20000516
 8002818:	080085cc 	.word	0x080085cc
 800281c:	20000508 	.word	0x20000508
 8002820:	080085d4 	.word	0x080085d4
 8002824:	2000051c 	.word	0x2000051c
 8002828:	080085dc 	.word	0x080085dc
 800282c:	200004e0 	.word	0x200004e0
 8002830:	080085e4 	.word	0x080085e4
 8002834:	20000520 	.word	0x20000520
 8002838:	080085ec 	.word	0x080085ec
 800283c:	2000c0b6 	.word	0x2000c0b6
 8002840:	080085f4 	.word	0x080085f4
 8002844:	2000c0b8 	.word	0x2000c0b8
 8002848:	20000522 	.word	0x20000522
 800284c:	200000f8 	.word	0x200000f8
 8002850:	080085fc 	.word	0x080085fc
 8002854:	200000f6 	.word	0x200000f6
 8002858:	08008604 	.word	0x08008604
 800285c:	200000f0 	.word	0x200000f0
 8002860:	0800860c 	.word	0x0800860c
 8002864:	200000f4 	.word	0x200000f4
 8002868:	08008614 	.word	0x08008614
 800286c:	200000fa 	.word	0x200000fa
 8002870:	0800861c 	.word	0x0800861c
 8002874:	200000f2 	.word	0x200000f2
 8002878:	08008624 	.word	0x08008624
 800287c:	0800862c 	.word	0x0800862c
 8002880:	08008638 	.word	0x08008638
 8002884:	08008644 	.word	0x08008644
 8002888:	3aa3d70a 	.word	0x3aa3d70a
 800288c:	08008650 	.word	0x08008650
 8002890:	0800865c 	.word	0x0800865c
 8002894:	200000b4 	.word	0x200000b4
 8002898:	200000b6 	.word	0x200000b6
 800289c:	200000b8 	.word	0x200000b8
 80028a0:	200000ba 	.word	0x200000ba
 80028a4:	200000bc 	.word	0x200000bc
 80028a8:	200000be 	.word	0x200000be
 80028ac:	08008668 	.word	0x08008668
			case 14:
				lcd_locate(0,0);
 80028b0:	2100      	movs	r1, #0
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fc0b 	bl	80010ce <lcd_locate>
				lcd_print("cross_th");
 80028b8:	48a1      	ldr	r0, [pc, #644]	; (8002b40 <setup+0x680>)
 80028ba:	f7fe fc1d 	bl	80010f8 <lcd_print>
				lcd_locate(0,1);
 80028be:	2101      	movs	r1, #1
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe fc04 	bl	80010ce <lcd_locate>
				lcd_printf("%8d", line_senLL + line_senL + line_senR + line_senRR);
 80028c6:	4b9f      	ldr	r3, [pc, #636]	; (8002b44 <setup+0x684>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b9e      	ldr	r3, [pc, #632]	; (8002b48 <setup+0x688>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a9e      	ldr	r2, [pc, #632]	; (8002b4c <setup+0x68c>)
 80028d4:	8812      	ldrh	r2, [r2, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a9d      	ldr	r2, [pc, #628]	; (8002b50 <setup+0x690>)
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	489c      	ldr	r0, [pc, #624]	; (8002b54 <setup+0x694>)
 80028e2:	f7fe fc1e 	bl	8001122 <lcd_printf>
				break;
 80028e6:	e000      	b.n	80028ea <setup+0x42a>
			default:
				break;
 80028e8:	bf00      	nop
			}

			break;
 80028ea:	e1b0      	b.n	8002c4e <setup+0x78e>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80028ec:	4b9a      	ldr	r3, [pc, #616]	; (8002b58 <setup+0x698>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34

			lcd_locate(0,0);
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fbe9 	bl	80010ce <lcd_locate>
			lcd_print("test_ESC");
 80028fc:	4897      	ldr	r0, [pc, #604]	; (8002b5c <setup+0x69c>)
 80028fe:	f7fe fbfb 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 8002902:	2101      	movs	r1, #1
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe fbe2 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH_");
 800290a:	4895      	ldr	r0, [pc, #596]	; (8002b60 <setup+0x6a0>)
 800290c:	f7fe fbf4 	bl	80010f8 <lcd_print>

			if( sw_center_state == 1 ) {
 8002910:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <setup+0x6a4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f000 8191 	beq.w	8002c3c <setup+0x77c>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2116);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2116);
				*/
			}
			else {
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 800291a:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <setup+0x6a8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002922:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 8002924:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <setup+0x6a8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 800292e:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <setup+0x6a8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 8002938:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <setup+0x6a8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
			}
			break;
 8002942:	e17b      	b.n	8002c3c <setup+0x77c>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <setup+0x6a8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800294c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 800294e:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <setup+0x6a8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 8002958:	4b83      	ldr	r3, [pc, #524]	; (8002b68 <setup+0x6a8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 8002962:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <setup+0x6a8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 800296c:	2100      	movs	r1, #0
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe fbad 	bl	80010ce <lcd_locate>
			lcd_print("test_MD_");
 8002974:	487d      	ldr	r0, [pc, #500]	; (8002b6c <setup+0x6ac>)
 8002976:	f7fe fbbf 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 800297a:	2101      	movs	r1, #1
 800297c:	2000      	movs	r0, #0
 800297e:	f7fe fba6 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH_");
 8002982:	4877      	ldr	r0, [pc, #476]	; (8002b60 <setup+0x6a0>)
 8002984:	f7fe fbb8 	bl	80010f8 <lcd_print>

			if( sw_center_state == 1 ) {
 8002988:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <setup+0x6a4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <setup+0x4de>
				Motorset(400, 200, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	21c8      	movs	r1, #200	; 0xc8
 8002994:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002998:	f7ff fa7e 	bl	8001e98 <Motorset>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
				*/
			}
			break;
 800299c:	e157      	b.n	8002c4e <setup+0x78e>
				Motorset(0, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fa78 	bl	8001e98 <Motorset>
			break;
 80029a8:	e151      	b.n	8002c4e <setup+0x78e>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80029aa:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <setup+0x6b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80029b2:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <setup+0x6b0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38

			lcd_locate(0,0);
 80029ba:	2100      	movs	r1, #0
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fb86 	bl	80010ce <lcd_locate>
			lcd_print("_erase__");
 80029c2:	486c      	ldr	r0, [pc, #432]	; (8002b74 <setup+0x6b4>)
 80029c4:	f7fe fb98 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 80029c8:	2101      	movs	r1, #1
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe fb7f 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH_");
 80029d0:	4863      	ldr	r0, [pc, #396]	; (8002b60 <setup+0x6a0>)
 80029d2:	f7fe fb91 	bl	80010f8 <lcd_print>

			if( sw_center_state == 1 ) {
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <setup+0x6a4>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	f040 8130 	bne.w	8002c40 <setup+0x780>
				if( isnan( *(float*)start_adress_sector7 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_7);
 80029e0:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <setup+0x6b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eef4 7a67 	vcmp.f32	s15, s15
 80029ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f0:	d602      	bvs.n	80029f8 <setup+0x538>
 80029f2:	2007      	movs	r0, #7
 80029f4:	f7fe fbb5 	bl	8001162 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector9 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_9);
 80029f8:	4b60      	ldr	r3, [pc, #384]	; (8002b7c <setup+0x6bc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	eef4 7a67 	vcmp.f32	s15, s15
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	d602      	bvs.n	8002a10 <setup+0x550>
 8002a0a:	2009      	movs	r0, #9
 8002a0c:	f7fe fba9 	bl	8001162 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector10 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_10);
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <setup+0x6c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	eef4 7a67 	vcmp.f32	s15, s15
 8002a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a20:	d602      	bvs.n	8002a28 <setup+0x568>
 8002a22:	200a      	movs	r0, #10
 8002a24:	f7fe fb9d 	bl	8001162 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector11 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_11);
 8002a28:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <setup+0x6c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eef4 7a67 	vcmp.f32	s15, s15
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	f180 8102 	bvs.w	8002c40 <setup+0x780>
 8002a3c:	200b      	movs	r0, #11
 8002a3e:	f7fe fb90 	bl	8001162 <FLASH_EreaseSector>
			}

			break;
 8002a42:	e0fd      	b.n	8002c40 <setup+0x780>
		case 4:
			lcd_locate(0,0);
 8002a44:	2100      	movs	r1, #0
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe fb41 	bl	80010ce <lcd_locate>
			lcd_print("_case-4_");
 8002a4c:	484e      	ldr	r0, [pc, #312]	; (8002b88 <setup+0x6c8>)
 8002a4e:	f7fe fb53 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 8002a52:	2101      	movs	r1, #1
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe fb3a 	bl	80010ce <lcd_locate>
			lcd_print("________");
 8002a5a:	484c      	ldr	r0, [pc, #304]	; (8002b8c <setup+0x6cc>)
 8002a5c:	f7fe fb4c 	bl	80010f8 <lcd_print>
			break;
 8002a60:	e0f5      	b.n	8002c4e <setup+0x78e>
		case 5:
			lcd_locate(0,0);
 8002a62:	2100      	movs	r1, #0
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fb32 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH");
 8002a6a:	4849      	ldr	r0, [pc, #292]	; (8002b90 <setup+0x6d0>)
 8002a6c:	f7fe fb44 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 8002a70:	2101      	movs	r1, #1
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe fb2b 	bl	80010ce <lcd_locate>
			lcd_print("START 1 ");
 8002a78:	4846      	ldr	r0, [pc, #280]	; (8002b94 <setup+0x6d4>)
 8002a7a:	f7fe fb3d 	bl	80010f8 <lcd_print>
			if(sw_center_state == 1) {
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <setup+0x6a4>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	f040 80de 	bne.w	8002c44 <setup+0x784>
				main_pattern = 10;
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <setup+0x6d8>)
 8002a8a:	220a      	movs	r2, #10
 8002a8c:	701a      	strb	r2, [r3, #0]
				timer = 0;
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <setup+0x6dc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002a94:	4a42      	ldr	r2, [pc, #264]	; (8002ba0 <setup+0x6e0>)
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f04f 0400 	mov.w	r4, #0
 8002a9e:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <setup+0x6a4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 8002aa8:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <setup+0x6e4>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002aae:	f7fe fafe 	bl	80010ae <lcd_clear>
				HAL_Delay(1000);
 8002ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab6:	f000 fe6f 	bl	8003798 <HAL_Delay>
			}
			break;
 8002aba:	e0c3      	b.n	8002c44 <setup+0x784>
		case 6:
			lcd_locate(0,0);
 8002abc:	2100      	movs	r1, #0
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe fb05 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH");
 8002ac4:	4832      	ldr	r0, [pc, #200]	; (8002b90 <setup+0x6d0>)
 8002ac6:	f7fe fb17 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 8002aca:	2101      	movs	r1, #1
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe fafe 	bl	80010ce <lcd_locate>
			lcd_print("START 2 ");
 8002ad2:	4835      	ldr	r0, [pc, #212]	; (8002ba8 <setup+0x6e8>)
 8002ad4:	f7fe fb10 	bl	80010f8 <lcd_print>
			if(sw_center_state == 1) {
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <setup+0x6a4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 80b3 	bne.w	8002c48 <setup+0x788>
				main_pattern = 10;
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <setup+0x6d8>)
 8002ae4:	220a      	movs	r2, #10
 8002ae6:	701a      	strb	r2, [r3, #0]
				timer = 0;
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <setup+0x6dc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002aee:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <setup+0x6e0>)
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <setup+0x6a4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
				log_check_adress = start_adress_sector10;
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <setup+0x6c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a29      	ldr	r2, [pc, #164]	; (8002bac <setup+0x6ec>)
 8002b08:	6013      	str	r3, [r2, #0]
				if( isnan( *(float*)log_check_adress ) == 0 ) {
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <setup+0x6ec>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef4 7a67 	vcmp.f32	s15, s15
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d606      	bvs.n	8002b2a <setup+0x66a>
					second_trace_flag = 1;
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <setup+0x6f0>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
					second_trace_pattern = 1;
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <setup+0x6f4>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e002      	b.n	8002b30 <setup+0x670>
				}
				else velocity_pattern = 2;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <setup+0x6e4>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002b30:	f7fe fabd 	bl	80010ae <lcd_clear>
				HAL_Delay(1000);
 8002b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b38:	f000 fe2e 	bl	8003798 <HAL_Delay>
			}
			break;
 8002b3c:	e084      	b.n	8002c48 <setup+0x788>
 8002b3e:	bf00      	nop
 8002b40:	0800866c 	.word	0x0800866c
 8002b44:	200000b6 	.word	0x200000b6
 8002b48:	200000b8 	.word	0x200000b8
 8002b4c:	200000ba 	.word	0x200000ba
 8002b50:	200000bc 	.word	0x200000bc
 8002b54:	08008668 	.word	0x08008668
 8002b58:	20000400 	.word	0x20000400
 8002b5c:	08008678 	.word	0x08008678
 8002b60:	08008684 	.word	0x08008684
 8002b64:	200000e2 	.word	0x200000e2
 8002b68:	200001e4 	.word	0x200001e4
 8002b6c:	08008690 	.word	0x08008690
 8002b70:	20000440 	.word	0x20000440
 8002b74:	0800869c 	.word	0x0800869c
 8002b78:	080086ec 	.word	0x080086ec
 8002b7c:	080086f0 	.word	0x080086f0
 8002b80:	080086f4 	.word	0x080086f4
 8002b84:	080086f8 	.word	0x080086f8
 8002b88:	080086a8 	.word	0x080086a8
 8002b8c:	080086b4 	.word	0x080086b4
 8002b90:	080086c0 	.word	0x080086c0
 8002b94:	080086c8 	.word	0x080086c8
 8002b98:	200000dc 	.word	0x200000dc
 8002b9c:	200000d8 	.word	0x200000d8
 8002ba0:	200004f0 	.word	0x200004f0
 8002ba4:	200000dd 	.word	0x200000dd
 8002ba8:	080086d4 	.word	0x080086d4
 8002bac:	2000c0c4 	.word	0x2000c0c4
 8002bb0:	200000de 	.word	0x200000de
 8002bb4:	20000500 	.word	0x20000500
		case 7:
			lcd_locate(0,0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fa87 	bl	80010ce <lcd_locate>
			lcd_print("SW_PUSH");
 8002bc0:	4825      	ldr	r0, [pc, #148]	; (8002c58 <setup+0x798>)
 8002bc2:	f7fe fa99 	bl	80010f8 <lcd_print>
			lcd_locate(0,1);
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fe fa80 	bl	80010ce <lcd_locate>
			lcd_print("START 3 ");
 8002bce:	4823      	ldr	r0, [pc, #140]	; (8002c5c <setup+0x79c>)
 8002bd0:	f7fe fa92 	bl	80010f8 <lcd_print>
			if(sw_center_state == 1) {
 8002bd4:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <setup+0x7a0>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d137      	bne.n	8002c4c <setup+0x78c>
				main_pattern = 10;
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <setup+0x7a4>)
 8002bde:	220a      	movs	r2, #10
 8002be0:	701a      	strb	r2, [r3, #0]
				timer = 0;
 8002be2:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <setup+0x7a8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002be8:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <setup+0x7ac>)
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f04f 0400 	mov.w	r4, #0
 8002bf2:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <setup+0x7a0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
				log_check_adress = start_adress_sector11;
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <setup+0x7b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <setup+0x7b4>)
 8002c02:	6013      	str	r3, [r2, #0]
				if( isnan( *(float*)log_check_adress ) == 0 ) {
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <setup+0x7b4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef4 7a67 	vcmp.f32	s15, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d606      	bvs.n	8002c24 <setup+0x764>
					second_trace_flag = 1;
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <setup+0x7b8>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
					second_trace_pattern = 2;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <setup+0x7bc>)
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e002      	b.n	8002c2a <setup+0x76a>
				}
				else velocity_pattern = 3;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <setup+0x7c0>)
 8002c26:	2203      	movs	r2, #3
 8002c28:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002c2a:	f7fe fa40 	bl	80010ae <lcd_clear>
				HAL_Delay(1000);
 8002c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c32:	f000 fdb1 	bl	8003798 <HAL_Delay>
			}
			break;
 8002c36:	e009      	b.n	8002c4c <setup+0x78c>
		default:
			break;
 8002c38:	bf00      	nop
 8002c3a:	e008      	b.n	8002c4e <setup+0x78e>
			break;
 8002c3c:	bf00      	nop
 8002c3e:	e006      	b.n	8002c4e <setup+0x78e>
			break;
 8002c40:	bf00      	nop
 8002c42:	e004      	b.n	8002c4e <setup+0x78e>
			break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <setup+0x78e>
			break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <setup+0x78e>
			break;
 8002c4c:	bf00      	nop
	}
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	080086c0 	.word	0x080086c0
 8002c5c:	080086e0 	.word	0x080086e0
 8002c60:	200000e2 	.word	0x200000e2
 8002c64:	200000dc 	.word	0x200000dc
 8002c68:	200000d8 	.word	0x200000d8
 8002c6c:	200004f0 	.word	0x200004f0
 8002c70:	080086f8 	.word	0x080086f8
 8002c74:	2000c0c4 	.word	0x2000c0c4
 8002c78:	200000de 	.word	0x200000de
 8002c7c:	20000500 	.word	0x20000500
 8002c80:	200000dd 	.word	0x200000dd

08002c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_MspInit+0x84>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_MspInit+0x84>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_MspInit+0x84>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_MspInit+0x84>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_MspInit+0x84>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_MspInit+0x84>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	f06f 000b 	mvn.w	r0, #11
 8002cca:	f001 fa56 	bl	800417a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	f06f 000a 	mvn.w	r0, #10
 8002cd6:	f001 fa50 	bl	800417a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2105      	movs	r1, #5
 8002cde:	f06f 0009 	mvn.w	r0, #9
 8002ce2:	f001 fa4a 	bl	800417a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2105      	movs	r1, #5
 8002cea:	f06f 0004 	mvn.w	r0, #4
 8002cee:	f001 fa44 	bl	800417a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2105      	movs	r1, #5
 8002cf6:	f06f 0003 	mvn.w	r0, #3
 8002cfa:	f001 fa3e 	bl	800417a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a49      	ldr	r2, [pc, #292]	; (8002e50 <HAL_ADC_MspInit+0x144>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f040 808c 	bne.w	8002e48 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d40:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4a3f      	ldr	r2, [pc, #252]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5c:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4a38      	ldr	r2, [pc, #224]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6313      	str	r3, [r2, #48]	; 0x30
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_ADC_MspInit+0x148>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002da0:	233c      	movs	r3, #60	; 0x3c
 8002da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da4:	2303      	movs	r3, #3
 8002da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4829      	ldr	r0, [pc, #164]	; (8002e58 <HAL_ADC_MspInit+0x14c>)
 8002db4:	f001 ff70 	bl	8004c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002db8:	23ff      	movs	r3, #255	; 0xff
 8002dba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4824      	ldr	r0, [pc, #144]	; (8002e5c <HAL_ADC_MspInit+0x150>)
 8002dcc:	f001 ff64 	bl	8004c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	481f      	ldr	r0, [pc, #124]	; (8002e60 <HAL_ADC_MspInit+0x154>)
 8002de4:	f001 ff58 	bl	8004c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_ADC_MspInit+0x15c>)
 8002dec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e2e:	f001 f9db 	bl	80041e8 <HAL_DMA_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002e38:	f7ff f80c 	bl	8001e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_ADC_MspInit+0x158>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e48:	bf00      	nop
 8002e4a:	3730      	adds	r7, #48	; 0x30
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40012000 	.word	0x40012000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	20000320 	.word	0x20000320
 8002e68:	40026410 	.word	0x40026410

08002e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_I2C_MspInit+0xec>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d12d      	bne.n	8002eea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb0:	2312      	movs	r3, #18
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4826      	ldr	r0, [pc, #152]	; (8002f60 <HAL_I2C_MspInit+0xf4>)
 8002ec8:	f001 fee6 	bl	8004c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ee8:	e031      	b.n	8002f4e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <HAL_I2C_MspInit+0xf8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d12c      	bne.n	8002f4e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	6313      	str	r3, [r2, #48]	; 0x30
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f16:	2312      	movs	r3, #18
 8002f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f22:	2304      	movs	r3, #4
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 031c 	add.w	r3, r7, #28
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <HAL_I2C_MspInit+0xf4>)
 8002f2e:	f001 feb3 	bl	8004c98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_I2C_MspInit+0xf0>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	3730      	adds	r7, #48	; 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40005800 	.word	0x40005800

08002f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_SPI_MspInit+0x84>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12c      	bne.n	8002fe4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fd4:	2306      	movs	r3, #6
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002fe0:	f001 fe5a 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40003c00 	.word	0x40003c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40020800 	.word	0x40020800

08002ff8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12d      	bne.n	8003076 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6453      	str	r3, [r2, #68]	; 0x44
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003064:	2301      	movs	r3, #1
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	481e      	ldr	r0, [pc, #120]	; (80030e8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003070:	f001 fe12 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003074:	e030      	b.n	80030d8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_TIM_Encoder_MspInit+0xf4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d12b      	bne.n	80030d8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	6453      	str	r3, [r2, #68]	; 0x44
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030b8:	23c0      	movs	r3, #192	; 0xc0
 80030ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030c8:	2303      	movs	r3, #3
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4619      	mov	r1, r3
 80030d2:	4807      	ldr	r0, [pc, #28]	; (80030f0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80030d4:	f001 fde0 	bl	8004c98 <HAL_GPIO_Init>
}
 80030d8:	bf00      	nop
 80030da:	3730      	adds	r7, #48	; 0x30
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40020800 	.word	0x40020800

080030f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d10e      	bne.n	8003124 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003122:	e026      	b.n	8003172 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10e      	bne.n	800314c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
}
 800314a:	e012      	b.n	8003172 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <HAL_TIM_PWM_MspInit+0x94>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_TIM_PWM_MspInit+0x8c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40000400 	.word	0x40000400
 8003188:	40001800 	.word	0x40001800

0800318c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_TIM_Base_MspInit+0x80>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d116      	bne.n	80031cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031a8:	f043 0310 	orr.w	r3, r3, #16
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2105      	movs	r1, #5
 80031be:	2036      	movs	r0, #54	; 0x36
 80031c0:	f000 ffdb 	bl	800417a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031c4:	2036      	movs	r0, #54	; 0x36
 80031c6:	f000 fff4 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80031ca:	e01a      	b.n	8003202 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_TIM_Base_MspInit+0x88>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d115      	bne.n	8003202 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031e0:	f043 0320 	orr.w	r3, r3, #32
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_TIM_Base_MspInit+0x84>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2105      	movs	r1, #5
 80031f6:	2037      	movs	r0, #55	; 0x37
 80031f8:	f000 ffbf 	bl	800417a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031fc:	2037      	movs	r0, #55	; 0x37
 80031fe:	f000 ffd8 	bl	80041b2 <HAL_NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40001000 	.word	0x40001000
 8003210:	40023800 	.word	0x40023800
 8003214:	40001400 	.word	0x40001400

08003218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d11f      	bne.n	800327a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a43      	ldr	r2, [pc, #268]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003268:	2301      	movs	r3, #1
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	4619      	mov	r1, r3
 8003272:	4838      	ldr	r0, [pc, #224]	; (8003354 <HAL_TIM_MspPostInit+0x13c>)
 8003274:	f001 fd10 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003278:	e066      	b.n	8003348 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a36      	ldr	r2, [pc, #216]	; (8003358 <HAL_TIM_MspPostInit+0x140>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d13d      	bne.n	8003300 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	4b31      	ldr	r3, [pc, #196]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a30      	ldr	r2, [pc, #192]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4a29      	ldr	r2, [pc, #164]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	6313      	str	r3, [r2, #48]	; 0x30
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ce:	2302      	movs	r3, #2
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d2:	f107 031c 	add.w	r3, r7, #28
 80032d6:	4619      	mov	r1, r3
 80032d8:	4820      	ldr	r0, [pc, #128]	; (800335c <HAL_TIM_MspPostInit+0x144>)
 80032da:	f001 fcdd 	bl	8004c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032de:	2330      	movs	r3, #48	; 0x30
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ee:	2302      	movs	r3, #2
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	4619      	mov	r1, r3
 80032f8:	4819      	ldr	r0, [pc, #100]	; (8003360 <HAL_TIM_MspPostInit+0x148>)
 80032fa:	f001 fccd 	bl	8004c98 <HAL_GPIO_Init>
}
 80032fe:	e023      	b.n	8003348 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_TIM_MspPostInit+0x14c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d11e      	bne.n	8003348 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_TIM_MspPostInit+0x138>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003326:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003338:	2309      	movs	r3, #9
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	4619      	mov	r1, r3
 8003342:	4807      	ldr	r0, [pc, #28]	; (8003360 <HAL_TIM_MspPostInit+0x148>)
 8003344:	f001 fca8 	bl	8004c98 <HAL_GPIO_Init>
}
 8003348:	bf00      	nop
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	40020000 	.word	0x40020000
 8003358:	40000400 	.word	0x40000400
 800335c:	40020800 	.word	0x40020800
 8003360:	40020400 	.word	0x40020400
 8003364:	40001800 	.word	0x40001800

08003368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_UART_MspInit+0x84>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d12b      	bne.n	80033e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_UART_MspInit+0x88>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_UART_MspInit+0x88>)
 8003394:	f043 0310 	orr.w	r3, r3, #16
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_UART_MspInit+0x88>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_UART_MspInit+0x88>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_UART_MspInit+0x88>)
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_UART_MspInit+0x88>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033c2:	23c0      	movs	r3, #192	; 0xc0
 80033c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ce:	2303      	movs	r3, #3
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033d2:	2307      	movs	r3, #7
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <HAL_UART_MspInit+0x8c>)
 80033de:	f001 fc5b 	bl	8004c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020400 	.word	0x40020400

080033f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <HardFault_Handler+0x4>

0800340c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <MemManage_Handler+0x4>

08003412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003416:	e7fe      	b.n	8003416 <BusFault_Handler+0x4>

08003418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <UsageFault_Handler+0x4>

0800341e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800344c:	f000 f984 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}

08003454 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003458:	2001      	movs	r0, #1
 800345a:	f001 fdd1 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}

08003462 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003466:	2002      	movs	r0, #2
 8003468:	f001 fdca 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003474:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003478:	f001 fdc2 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800347c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003480:	f001 fdbe 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003488:	f001 fdba 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800348c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003490:	f001 fdb6 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <TIM6_DAC_IRQHandler+0x10>)
 800349e:	f003 fb70 	bl	8006b82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000380 	.word	0x20000380

080034ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM7_IRQHandler+0x10>)
 80034b2:	f003 fb66 	bl	8006b82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000480 	.word	0x20000480

080034c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <DMA2_Stream0_IRQHandler+0x10>)
 80034c6:	f000 ff95 	bl	80043f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000320 	.word	0x20000320

080034d4 <HAL_GPIO_EXTI_Callback>:
int8_t check_sens_val = 0;
uint8_t sw_up_state = 0;
uint8_t sw_center_state = 0;
uint8_t cnt_sw = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]

	if(cnt_sw >= 30) {
 80034de:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b1d      	cmp	r3, #29
 80034e4:	d960      	bls.n	80035a8 <HAL_GPIO_EXTI_Callback+0xd4>
		if (GPIO_Pin == GPIO_PIN_0) ; 	//left

		if (GPIO_Pin == GPIO_PIN_1) { 	//up
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d11e      	bne.n	800352a <HAL_GPIO_EXTI_Callback+0x56>
			if(sw_up_state > 1) sw_up_state = 1;
 80034ec:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d902      	bls.n	80034fa <HAL_GPIO_EXTI_Callback+0x26>
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
			sw_up_state ^= 1;
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003506:	701a      	strb	r2, [r3, #0]
			check_sens_val--;
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800350a:	f993 3000 	ldrsb.w	r3, [r3]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	b25a      	sxtb	r2, r3
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8003518:	701a      	strb	r2, [r3, #0]
			if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800351c:	f993 3000 	ldrsb.w	r3, [r3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da02      	bge.n	800352a <HAL_GPIO_EXTI_Callback+0x56>
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8003526:	220e      	movs	r2, #14
 8003528:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_12) {	//push
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d110      	bne.n	8003554 <HAL_GPIO_EXTI_Callback+0x80>
			setup_mode++;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8003534:	f993 3000 	ldrsb.w	r3, [r3]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	b25a      	sxtb	r2, r3
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8003542:	701a      	strb	r2, [r3, #0]
			if(setup_mode >= 8) setup_mode = 0;
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8003546:	f993 3000 	ldrsb.w	r3, [r3]
 800354a:	2b07      	cmp	r3, #7
 800354c:	dd02      	ble.n	8003554 <HAL_GPIO_EXTI_Callback+0x80>
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <HAL_GPIO_EXTI_Callback+0xec>)
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_13) {	//down
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	d110      	bne.n	800357e <HAL_GPIO_EXTI_Callback+0xaa>
			check_sens_val++;
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800355e:	f993 3000 	ldrsb.w	r3, [r3]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b25a      	sxtb	r2, r3
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800356c:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 8003570:	f993 3000 	ldrsb.w	r3, [r3]
 8003574:	2b0e      	cmp	r3, #14
 8003576:	dd02      	ble.n	800357e <HAL_GPIO_EXTI_Callback+0xaa>
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_GPIO_EXTI_Callback+0xe8>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_14) {	//center
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003584:	d10d      	bne.n	80035a2 <HAL_GPIO_EXTI_Callback+0xce>
			if(sw_center_state > 1) sw_center_state = 1;
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d902      	bls.n	8003594 <HAL_GPIO_EXTI_Callback+0xc0>
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
			sw_center_state ^= 1;
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_GPIO_EXTI_Callback+0xf0>)
 80035a0:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_15) ;	//right

		cnt_sw = 0;
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
	}
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	200000e3 	.word	0x200000e3
 80035b8:	200000e1 	.word	0x200000e1
 80035bc:	200000e0 	.word	0x200000e0
 80035c0:	200000df 	.word	0x200000df
 80035c4:	200000e2 	.word	0x200000e2

080035c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f8:	f004 fb8a 	bl	8007d10 <__errno>
 80035fc:	4602      	mov	r2, r0
 80035fe:	230c      	movs	r3, #12
 8003600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20020000 	.word	0x20020000
 8003628:	00000400 	.word	0x00000400
 800362c:	200000e4 	.word	0x200000e4
 8003630:	2000c0f0 	.word	0x2000c0f0

08003634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <SystemInit+0x28>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <SystemInit+0x28>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <SystemInit+0x28>)
 800364a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800364e:	609a      	str	r2, [r3, #8]
#endif
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003698 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003666:	e003      	b.n	8003670 <LoopCopyDataInit>

08003668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800366a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800366c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800366e:	3104      	adds	r1, #4

08003670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003678:	d3f6      	bcc.n	8003668 <CopyDataInit>
  ldr  r2, =_sbss
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800367c:	e002      	b.n	8003684 <LoopFillZerobss>

0800367e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800367e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003680:	f842 3b04 	str.w	r3, [r2], #4

08003684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003688:	d3f9      	bcc.n	800367e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800368a:	f7ff ffd3 	bl	8003634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800368e:	f004 fb45 	bl	8007d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003692:	f7fd fe4b 	bl	800132c <main>
  bx  lr    
 8003696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003698:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800369c:	08008760 	.word	0x08008760
  ldr  r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036a4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80036a8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80036ac:	2000c0f0 	.word	0x2000c0f0

080036b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_Init+0x40>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <HAL_Init+0x40>)
 80036be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_Init+0x40>)
 80036ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x40>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 fd41 	bl	8004164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff facc 	bl	8002c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fd59 	bl	80041ce <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f000 fd21 	bl	800417a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000000 	.word	0x20000000
 8003750:	20000008 	.word	0x20000008
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_IncTick+0x20>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_IncTick+0x24>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_IncTick+0x24>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000008 	.word	0x20000008
 800377c:	2000c0c8 	.word	0x2000c0c8

08003780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_GetTick+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000c0c8 	.word	0x2000c0c8

08003798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff ffee 	bl	8003780 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d005      	beq.n	80037be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_Delay+0x40>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037be:	bf00      	nop
 80037c0:	f7ff ffde 	bl	8003780 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d8f7      	bhi.n	80037c0 <HAL_Delay+0x28>
  {
  }
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000008 	.word	0x20000008

080037dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e033      	b.n	800385a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fa86 	bl	8002d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003822:	f023 0302 	bic.w	r3, r3, #2
 8003826:	f043 0202 	orr.w	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa4a 	bl	8003cc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
 800384a:	e001      	b.n	8003850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_ADC_Start_DMA+0x1e>
 800387e:	2302      	movs	r3, #2
 8003880:	e0cc      	b.n	8003a1c <HAL_ADC_Start_DMA+0x1b8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d018      	beq.n	80038ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_ADC_Start_DMA+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5e      	ldr	r2, [pc, #376]	; (8003a28 <HAL_ADC_Start_DMA+0x1c4>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0c9a      	lsrs	r2, r3, #18
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038bc:	e002      	b.n	80038c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f9      	bne.n	80038be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 80a0 	bne.w	8003a1a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d106      	bne.n	8003928 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	f023 0206 	bic.w	r2, r3, #6
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
 8003926:	e002      	b.n	800392e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_ADC_Start_DMA+0x1c8>)
 8003938:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <HAL_ADC_Start_DMA+0x1cc>)
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <HAL_ADC_Start_DMA+0x1d0>)
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4a3a      	ldr	r2, [pc, #232]	; (8003a38 <HAL_ADC_Start_DMA+0x1d4>)
 8003950:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800395a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800396a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	334c      	adds	r3, #76	; 0x4c
 8003986:	4619      	mov	r1, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f000 fcda 	bl	8004344 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2b00      	cmp	r3, #0
 800399a:	d12a      	bne.n	80039f2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_ADC_Start_DMA+0x1d8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d015      	beq.n	80039d2 <HAL_ADC_Start_DMA+0x16e>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a25      	ldr	r2, [pc, #148]	; (8003a40 <HAL_ADC_Start_DMA+0x1dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d105      	bne.n	80039bc <HAL_ADC_Start_DMA+0x158>
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_ADC_Start_DMA+0x1c8>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_ADC_Start_DMA+0x1e0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d129      	bne.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_ADC_Start_DMA+0x1c8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	d823      	bhi.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11c      	bne.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e013      	b.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_ADC_Start_DMA+0x1d8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10e      	bne.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a18:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000000 	.word	0x20000000
 8003a28:	431bde83 	.word	0x431bde83
 8003a2c:	40012300 	.word	0x40012300
 8003a30:	08003ec1 	.word	0x08003ec1
 8003a34:	08003f7b 	.word	0x08003f7b
 8003a38:	08003f97 	.word	0x08003f97
 8003a3c:	40012000 	.word	0x40012000
 8003a40:	40012100 	.word	0x40012100
 8003a44:	40012200 	.word	0x40012200

08003a48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e105      	b.n	8003cac <HAL_ADC_ConfigChannel+0x228>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d925      	bls.n	8003afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68d9      	ldr	r1, [r3, #12]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3b1e      	subs	r3, #30
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43da      	mvns	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4403      	add	r3, r0
 8003aee:	3b1e      	subs	r3, #30
 8003af0:	409a      	lsls	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	e022      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6919      	ldr	r1, [r3, #16]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	2207      	movs	r2, #7
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6919      	ldr	r1, [r3, #16]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4403      	add	r3, r0
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d824      	bhi.n	8003b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	3b05      	subs	r3, #5
 8003b5c:	221f      	movs	r2, #31
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	400a      	ands	r2, r1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4618      	mov	r0, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	3b05      	subs	r3, #5
 8003b86:	fa00 f203 	lsl.w	r2, r0, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	635a      	str	r2, [r3, #52]	; 0x34
 8003b92:	e04c      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d824      	bhi.n	8003be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	3b23      	subs	r3, #35	; 0x23
 8003bae:	221f      	movs	r2, #31
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	400a      	ands	r2, r1
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3b23      	subs	r3, #35	; 0x23
 8003bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
 8003be4:	e023      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3b41      	subs	r3, #65	; 0x41
 8003bf8:	221f      	movs	r2, #31
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	400a      	ands	r2, r1
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4618      	mov	r0, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	3b41      	subs	r3, #65	; 0x41
 8003c22:	fa00 f203 	lsl.w	r2, r0, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_ADC_ConfigChannel+0x234>)
 8003c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <HAL_ADC_ConfigChannel+0x238>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1cc>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	d105      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_ADC_ConfigChannel+0x238>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d123      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x21e>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d003      	beq.n	8003c6a <HAL_ADC_ConfigChannel+0x1e6>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b11      	cmp	r3, #17
 8003c68:	d11b      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d111      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_ADC_ConfigChannel+0x23c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_ADC_ConfigChannel+0x240>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	0c9a      	lsrs	r2, r3, #18
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c94:	e002      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f9      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012300 	.word	0x40012300
 8003cbc:	40012000 	.word	0x40012000
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	431bde83 	.word	0x431bde83

08003cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cd0:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <ADC_Init+0x1f0>)
 8003cd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	021a      	lsls	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <ADC_Init+0x1f4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	e00f      	b.n	8003dc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0202 	bic.w	r2, r2, #2
 8003dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
 8003de0:	005a      	lsls	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	035a      	lsls	r2, r3, #13
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	e007      	b.n	8003e3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	051a      	lsls	r2, r3, #20
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e7e:	025a      	lsls	r2, r3, #9
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	029a      	lsls	r2, r3, #10
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40012300 	.word	0x40012300
 8003ebc:	0f000001 	.word	0x0f000001

08003ec0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13c      	bne.n	8003f54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d12b      	bne.n	8003f4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d127      	bne.n	8003f4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d119      	bne.n	8003f4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0220 	bic.w	r2, r2, #32
 8003f26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff fd7b 	bl	8003a48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f52:	e00e      	b.n	8003f72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fd85 	bl	8003a70 <HAL_ADC_ErrorCallback>
}
 8003f66:	e004      	b.n	8003f72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fd67 	bl	8003a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fd5a 	bl	8003a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	60d3      	str	r3, [r2, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <__NVIC_GetPriorityGrouping+0x18>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 0307 	and.w	r3, r3, #7
}
 800401a:	4618      	mov	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	db0b      	blt.n	8004052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	4907      	ldr	r1, [pc, #28]	; (8004060 <__NVIC_EnableIRQ+0x38>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2001      	movs	r0, #1
 800404a:	fa00 f202 	lsl.w	r2, r0, r2
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000e100 	.word	0xe000e100

08004064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	2b00      	cmp	r3, #0
 8004076:	db0a      	blt.n	800408e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	490c      	ldr	r1, [pc, #48]	; (80040b0 <__NVIC_SetPriority+0x4c>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	0112      	lsls	r2, r2, #4
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	440b      	add	r3, r1
 8004088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800408c:	e00a      	b.n	80040a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4908      	ldr	r1, [pc, #32]	; (80040b4 <__NVIC_SetPriority+0x50>)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3b04      	subs	r3, #4
 800409c:	0112      	lsls	r2, r2, #4
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	440b      	add	r3, r1
 80040a2:	761a      	strb	r2, [r3, #24]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000e100 	.word	0xe000e100
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f1c3 0307 	rsb	r3, r3, #7
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf28      	it	cs
 80040d6:	2304      	movcs	r3, #4
 80040d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3304      	adds	r3, #4
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d902      	bls.n	80040e8 <NVIC_EncodePriority+0x30>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3b03      	subs	r3, #3
 80040e6:	e000      	b.n	80040ea <NVIC_EncodePriority+0x32>
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43da      	mvns	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	401a      	ands	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004100:	f04f 31ff 	mov.w	r1, #4294967295
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	43d9      	mvns	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	4313      	orrs	r3, r2
         );
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3b01      	subs	r3, #1
 800412c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004130:	d301      	bcc.n	8004136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004132:	2301      	movs	r3, #1
 8004134:	e00f      	b.n	8004156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <SysTick_Config+0x40>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800413e:	210f      	movs	r1, #15
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	f7ff ff8e 	bl	8004064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <SysTick_Config+0x40>)
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <SysTick_Config+0x40>)
 8004150:	2207      	movs	r2, #7
 8004152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	e000e010 	.word	0xe000e010

08004164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff29 	bl	8003fc4 <__NVIC_SetPriorityGrouping>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800418c:	f7ff ff3e 	bl	800400c <__NVIC_GetPriorityGrouping>
 8004190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff ff8e 	bl	80040b8 <NVIC_EncodePriority>
 800419c:	4602      	mov	r2, r0
 800419e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff5d 	bl	8004064 <__NVIC_SetPriority>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff31 	bl	8004028 <__NVIC_EnableIRQ>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffa2 	bl	8004120 <SysTick_Config>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7ff fac4 	bl	8003780 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e099      	b.n	8004338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004224:	e00f      	b.n	8004246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004226:	f7ff faab 	bl	8003780 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b05      	cmp	r3, #5
 8004232:	d908      	bls.n	8004246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e078      	b.n	8004338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e8      	bne.n	8004226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4b38      	ldr	r3, [pc, #224]	; (8004340 <HAL_DMA_Init+0x158>)
 8004260:	4013      	ands	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b04      	cmp	r3, #4
 800429e:	d107      	bne.n	80042b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4313      	orrs	r3, r2
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d117      	bne.n	800430a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fa6f 	bl	80047d0 <DMA_CheckFifoParam>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2240      	movs	r2, #64	; 0x40
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004306:	2301      	movs	r3, #1
 8004308:	e016      	b.n	8004338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa26 	bl	8004764 <DMA_CalcBaseAndBitshift>
 8004318:	4603      	mov	r3, r0
 800431a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	223f      	movs	r2, #63	; 0x3f
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	f010803f 	.word	0xf010803f

08004344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_DMA_Start_IT+0x26>
 8004366:	2302      	movs	r3, #2
 8004368:	e040      	b.n	80043ec <HAL_DMA_Start_IT+0xa8>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d12f      	bne.n	80043de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f9b8 	bl	8004708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	223f      	movs	r2, #63	; 0x3f
 800439e:	409a      	lsls	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0216 	orr.w	r2, r2, #22
 80043b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e005      	b.n	80043ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004400:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_DMA_IRQHandler+0x258>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a92      	ldr	r2, [pc, #584]	; (8004650 <HAL_DMA_IRQHandler+0x25c>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2208      	movs	r2, #8
 8004420:	409a      	lsls	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01a      	beq.n	8004460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2208      	movs	r2, #8
 800444e:	409a      	lsls	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2201      	movs	r2, #1
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 0202 	orr.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	2204      	movs	r2, #4
 800449c:	409a      	lsls	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d012      	beq.n	80044cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	2204      	movs	r2, #4
 80044ba:	409a      	lsls	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	2210      	movs	r2, #16
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d043      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d03c      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	2210      	movs	r2, #16
 80044f0:	409a      	lsls	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d024      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e01f      	b.n	8004564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
 8004534:	e016      	b.n	8004564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0208 	bic.w	r2, r2, #8
 8004552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	2220      	movs	r2, #32
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 808e 	beq.w	8004692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8086 	beq.w	8004692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	2220      	movs	r2, #32
 800458c:	409a      	lsls	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b05      	cmp	r3, #5
 800459c:	d136      	bne.n	800460c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0216 	bic.w	r2, r2, #22
 80045ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_DMA_IRQHandler+0x1da>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	223f      	movs	r2, #63	; 0x3f
 80045e4:	409a      	lsls	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d07d      	beq.n	80046fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
        }
        return;
 800460a:	e078      	b.n	80046fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	2b00      	cmp	r3, #0
 800462e:	d030      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e02b      	b.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d027      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
 800464a:	e022      	b.n	8004692 <HAL_DMA_IRQHandler+0x29e>
 800464c:	20000000 	.word	0x20000000
 8004650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0210 	bic.w	r2, r2, #16
 8004670:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	2b00      	cmp	r3, #0
 8004698:	d032      	beq.n	8004700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d307      	bcc.n	80046da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f2      	bne.n	80046be <HAL_DMA_IRQHandler+0x2ca>
 80046d8:	e000      	b.n	80046dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
 80046fc:	e000      	b.n	8004700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80046fe:	bf00      	nop
    }
  }
}
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d108      	bne.n	8004748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004746:	e007      	b.n	8004758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	3b10      	subs	r3, #16
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <DMA_CalcBaseAndBitshift+0x68>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d909      	bls.n	80047a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	659a      	str	r2, [r3, #88]	; 0x58
 80047a4:	e007      	b.n	80047b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	aaaaaaab 	.word	0xaaaaaaab
 80047cc:	08008714 	.word	0x08008714

080047d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11f      	bne.n	800482a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d855      	bhi.n	800489c <DMA_CheckFifoParam+0xcc>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <DMA_CheckFifoParam+0x28>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004809 	.word	0x08004809
 80047fc:	0800481b 	.word	0x0800481b
 8004800:	08004809 	.word	0x08004809
 8004804:	0800489d 	.word	0x0800489d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d045      	beq.n	80048a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e042      	b.n	80048a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004822:	d13f      	bne.n	80048a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004828:	e03c      	b.n	80048a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004832:	d121      	bne.n	8004878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d836      	bhi.n	80048a8 <DMA_CheckFifoParam+0xd8>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <DMA_CheckFifoParam+0x70>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004851 	.word	0x08004851
 8004844:	08004857 	.word	0x08004857
 8004848:	08004851 	.word	0x08004851
 800484c:	08004869 	.word	0x08004869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e02f      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d024      	beq.n	80048ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004866:	e021      	b.n	80048ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004870:	d11e      	bne.n	80048b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004876:	e01b      	b.n	80048b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d902      	bls.n	8004884 <DMA_CheckFifoParam+0xb4>
 800487e:	2b03      	cmp	r3, #3
 8004880:	d003      	beq.n	800488a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004882:	e018      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e015      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
      break;
 800489a:	e00b      	b.n	80048b4 <DMA_CheckFifoParam+0xe4>
      break;
 800489c:	bf00      	nop
 800489e:	e00a      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;
 80048a0:	bf00      	nop
 80048a2:	e008      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;
 80048a4:	bf00      	nop
 80048a6:	e006      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;
 80048a8:	bf00      	nop
 80048aa:	e004      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;
 80048ac:	bf00      	nop
 80048ae:	e002      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
      break;
 80048b4:	bf00      	nop
    }
  } 
  
  return status; 
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_FLASH_Unlock+0x38>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da0b      	bge.n	80048ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_FLASH_Unlock+0x38>)
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_FLASH_Unlock+0x3c>)
 80048da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_FLASH_Unlock+0x38>)
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <HAL_FLASH_Unlock+0x40>)
 80048e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_FLASH_Unlock+0x38>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da01      	bge.n	80048ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80048ee:	79fb      	ldrb	r3, [r7, #7]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40023c00 	.word	0x40023c00
 8004900:	45670123 	.word	0x45670123
 8004904:	cdef89ab 	.word	0xcdef89ab

08004908 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_FLASH_Lock+0x1c>)
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_FLASH_Lock+0x1c>)
 8004912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004916:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40023c00 	.word	0x40023c00

08004928 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <FLASH_WaitForLastOperation+0x78>)
 8004936:	2200      	movs	r2, #0
 8004938:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800493a:	f7fe ff21 	bl	8003780 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004940:	e010      	b.n	8004964 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d00c      	beq.n	8004964 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <FLASH_WaitForLastOperation+0x38>
 8004950:	f7fe ff16 	bl	8003780 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d201      	bcs.n	8004964 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e019      	b.n	8004998 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <FLASH_WaitForLastOperation+0x7c>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e8      	bne.n	8004942 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <FLASH_WaitForLastOperation+0x7c>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <FLASH_WaitForLastOperation+0x7c>)
 800497e:	2201      	movs	r2, #1
 8004980:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <FLASH_WaitForLastOperation+0x7c>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800498e:	f000 f80b 	bl	80049a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
  
}  
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2000c0cc 	.word	0x2000c0cc
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80049ac:	4b27      	ldr	r3, [pc, #156]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f043 0310 	orr.w	r3, r3, #16
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 80049c6:	2210      	movs	r2, #16
 80049c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f043 0308 	orr.w	r3, r3, #8
 80049de:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 80049e4:	2220      	movs	r2, #32
 80049e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 80049fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 8004a1c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f043 0320 	orr.w	r3, r3, #32
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <FLASH_SetErrorCode+0xa8>)
 8004a3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <FLASH_SetErrorCode+0xa4>)
 8004a3e:	2202      	movs	r2, #2
 8004a40:	60da      	str	r2, [r3, #12]
  }
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	2000c0cc 	.word	0x2000c0cc

08004a54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_FLASHEx_Erase+0xd8>)
 8004a68:	7e1b      	ldrb	r3, [r3, #24]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_FLASHEx_Erase+0x1e>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e058      	b.n	8004b24 <HAL_FLASHEx_Erase+0xd0>
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_FLASHEx_Erase+0xd8>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a7c:	f7ff ff54 	bl	8004928 <FLASH_WaitForLastOperation>
 8004a80:	4603      	mov	r3, r0
 8004a82:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d148      	bne.n	8004b1c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d115      	bne.n	8004ac6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 f844 	bl	8004b34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ab0:	f7ff ff3a 	bl	8004928 <FLASH_WaitForLastOperation>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_FLASHEx_Erase+0xdc>)
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <HAL_FLASHEx_Erase+0xdc>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6113      	str	r3, [r2, #16]
 8004ac4:	e028      	b.n	8004b18 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	e01c      	b.n	8004b08 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	68b8      	ldr	r0, [r7, #8]
 8004ad8:	f000 f850 	bl	8004b7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004adc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ae0:	f7ff ff22 	bl	8004928 <FLASH_WaitForLastOperation>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_FLASHEx_Erase+0xdc>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <HAL_FLASHEx_Erase+0xdc>)
 8004aee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004af2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	601a      	str	r2, [r3, #0]
          break;
 8004b00:	e00a      	b.n	8004b18 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d3da      	bcc.n	8004ace <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004b18:	f000 f878 	bl	8004c0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_FLASHEx_Erase+0xd8>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	761a      	strb	r2, [r3, #24]

  return status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	2000c0cc 	.word	0x2000c0cc
 8004b30:	40023c00 	.word	0x40023c00

08004b34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	6039      	str	r1, [r7, #0]
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b40:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	4313      	orrs	r3, r2
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <FLASH_MassErase+0x44>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6113      	str	r3, [r2, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40023c00 	.word	0x40023c00

08004b7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e010      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d103      	bne.n	8004ba6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e009      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d103      	bne.n	8004bb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e002      	b.n	8004bba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004bb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	490f      	ldr	r1, [pc, #60]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004bde:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bea:	f043 0302 	orr.w	r3, r3, #2
 8004bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <FLASH_Erase_Sector+0x8c>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	6113      	str	r3, [r2, #16]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40023c00 	.word	0x40023c00

08004c0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d017      	beq.n	8004c4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c4a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c58:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <FLASH_FlushCaches+0x88>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6013      	str	r3, [r2, #0]
  }
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023c00 	.word	0x40023c00

08004c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e16b      	b.n	8004f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	f040 815a 	bne.w	8004f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_GPIO_Init+0x5a>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d007      	beq.n	8004cf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce6:	2b11      	cmp	r3, #17
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b12      	cmp	r3, #18
 8004cf0:	d130      	bne.n	8004d54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 0201 	and.w	r2, r3, #1
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	2203      	movs	r2, #3
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d003      	beq.n	8004d94 <HAL_GPIO_Init+0xfc>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b12      	cmp	r3, #18
 8004d92:	d123      	bne.n	8004ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	08da      	lsrs	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3208      	adds	r2, #8
 8004d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	220f      	movs	r2, #15
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	08da      	lsrs	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3208      	adds	r2, #8
 8004dd6:	69b9      	ldr	r1, [r7, #24]
 8004dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0203 	and.w	r2, r3, #3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80b4 	beq.w	8004f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <HAL_GPIO_Init+0x308>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	4a5e      	ldr	r2, [pc, #376]	; (8004fa0 <HAL_GPIO_Init+0x308>)
 8004e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	; (8004fa0 <HAL_GPIO_Init+0x308>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e3a:	4a5a      	ldr	r2, [pc, #360]	; (8004fa4 <HAL_GPIO_Init+0x30c>)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	220f      	movs	r2, #15
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a51      	ldr	r2, [pc, #324]	; (8004fa8 <HAL_GPIO_Init+0x310>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02b      	beq.n	8004ebe <HAL_GPIO_Init+0x226>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a50      	ldr	r2, [pc, #320]	; (8004fac <HAL_GPIO_Init+0x314>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d025      	beq.n	8004eba <HAL_GPIO_Init+0x222>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_GPIO_Init+0x318>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <HAL_GPIO_Init+0x21e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a4e      	ldr	r2, [pc, #312]	; (8004fb4 <HAL_GPIO_Init+0x31c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d019      	beq.n	8004eb2 <HAL_GPIO_Init+0x21a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a4d      	ldr	r2, [pc, #308]	; (8004fb8 <HAL_GPIO_Init+0x320>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_GPIO_Init+0x216>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a4c      	ldr	r2, [pc, #304]	; (8004fbc <HAL_GPIO_Init+0x324>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00d      	beq.n	8004eaa <HAL_GPIO_Init+0x212>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4b      	ldr	r2, [pc, #300]	; (8004fc0 <HAL_GPIO_Init+0x328>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <HAL_GPIO_Init+0x20e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4a      	ldr	r2, [pc, #296]	; (8004fc4 <HAL_GPIO_Init+0x32c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_GPIO_Init+0x20a>
 8004e9e:	2307      	movs	r3, #7
 8004ea0:	e00e      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	e00c      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e00a      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004eaa:	2305      	movs	r3, #5
 8004eac:	e008      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	e006      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e004      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e002      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_GPIO_Init+0x228>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	f002 0203 	and.w	r2, r2, #3
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	4093      	lsls	r3, r2
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed0:	4934      	ldr	r1, [pc, #208]	; (8004fa4 <HAL_GPIO_Init+0x30c>)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ede:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f02:	4a31      	ldr	r2, [pc, #196]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f08:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4013      	ands	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f2c:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_GPIO_Init+0x330>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	f67f ae90 	bls.w	8004cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3724      	adds	r7, #36	; 0x24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	40020000 	.word	0x40020000
 8004fac:	40020400 	.word	0x40020400
 8004fb0:	40020800 	.word	0x40020800
 8004fb4:	40020c00 	.word	0x40020c00
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40021400 	.word	0x40021400
 8004fc0:	40021800 	.word	0x40021800
 8004fc4:	40021c00 	.word	0x40021c00
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fdc:	787b      	ldrb	r3, [r7, #1]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fe8:	e003      	b.n	8004ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	041a      	lsls	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	619a      	str	r2, [r3, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005016:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fa58 	bl	80034d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40013c00 	.word	0x40013c00

08005030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e11f      	b.n	8005282 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd ff08 	bl	8002e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005094:	f001 fb68 	bl	8006768 <HAL_RCC_GetPCLK1Freq>
 8005098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4a7b      	ldr	r2, [pc, #492]	; (800528c <HAL_I2C_Init+0x25c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d807      	bhi.n	80050b4 <HAL_I2C_Init+0x84>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a7a      	ldr	r2, [pc, #488]	; (8005290 <HAL_I2C_Init+0x260>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bf94      	ite	ls
 80050ac:	2301      	movls	r3, #1
 80050ae:	2300      	movhi	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e006      	b.n	80050c2 <HAL_I2C_Init+0x92>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a77      	ldr	r2, [pc, #476]	; (8005294 <HAL_I2C_Init+0x264>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bf94      	ite	ls
 80050bc:	2301      	movls	r3, #1
 80050be:	2300      	movhi	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0db      	b.n	8005282 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a72      	ldr	r2, [pc, #456]	; (8005298 <HAL_I2C_Init+0x268>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	0c9b      	lsrs	r3, r3, #18
 80050d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a64      	ldr	r2, [pc, #400]	; (800528c <HAL_I2C_Init+0x25c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d802      	bhi.n	8005104 <HAL_I2C_Init+0xd4>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3301      	adds	r3, #1
 8005102:	e009      	b.n	8005118 <HAL_I2C_Init+0xe8>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	4a63      	ldr	r2, [pc, #396]	; (800529c <HAL_I2C_Init+0x26c>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	3301      	adds	r3, #1
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	430b      	orrs	r3, r1
 800511e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800512a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4956      	ldr	r1, [pc, #344]	; (800528c <HAL_I2C_Init+0x25c>)
 8005134:	428b      	cmp	r3, r1
 8005136:	d80d      	bhi.n	8005154 <HAL_I2C_Init+0x124>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1e59      	subs	r1, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	fbb1 f3f3 	udiv	r3, r1, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b04      	cmp	r3, #4
 800514e:	bf38      	it	cc
 8005150:	2304      	movcc	r3, #4
 8005152:	e04f      	b.n	80051f4 <HAL_I2C_Init+0x1c4>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <HAL_I2C_Init+0x150>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1e58      	subs	r0, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e012      	b.n	80051a6 <HAL_I2C_Init+0x176>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e58      	subs	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	0099      	lsls	r1, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	fbb0 f3f3 	udiv	r3, r0, r3
 8005196:	3301      	adds	r3, #1
 8005198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Init+0x17e>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e022      	b.n	80051f4 <HAL_I2C_Init+0x1c4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10e      	bne.n	80051d4 <HAL_I2C_Init+0x1a4>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1e58      	subs	r0, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	440b      	add	r3, r1
 80051c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d2:	e00f      	b.n	80051f4 <HAL_I2C_Init+0x1c4>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1e58      	subs	r0, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	0099      	lsls	r1, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ea:	3301      	adds	r3, #1
 80051ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	6809      	ldr	r1, [r1, #0]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6911      	ldr	r1, [r2, #16]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68d2      	ldr	r2, [r2, #12]
 800522e:	4311      	orrs	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	430b      	orrs	r3, r1
 8005236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	000186a0 	.word	0x000186a0
 8005290:	001e847f 	.word	0x001e847f
 8005294:	003d08ff 	.word	0x003d08ff
 8005298:	431bde83 	.word	0x431bde83
 800529c:	10624dd3 	.word	0x10624dd3

080052a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	460b      	mov	r3, r1
 80052ae:	817b      	strh	r3, [r7, #10]
 80052b0:	4613      	mov	r3, r2
 80052b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052b4:	f7fe fa64 	bl	8003780 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	f040 80e0 	bne.w	8005488 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2319      	movs	r3, #25
 80052ce:	2201      	movs	r2, #1
 80052d0:	4970      	ldr	r1, [pc, #448]	; (8005494 <HAL_I2C_Master_Transmit+0x1f4>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fc56 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	e0d3      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_I2C_Master_Transmit+0x50>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0cc      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b01      	cmp	r3, #1
 8005304:	d007      	beq.n	8005316 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2221      	movs	r2, #33	; 0x21
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	893a      	ldrh	r2, [r7, #8]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a50      	ldr	r2, [pc, #320]	; (8005498 <HAL_I2C_Master_Transmit+0x1f8>)
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005358:	8979      	ldrh	r1, [r7, #10]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fac2 	bl	80058e8 <I2C_MasterRequestWrite>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e08d      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005384:	e066      	b.n	8005454 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	6a39      	ldr	r1, [r7, #32]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fcd0 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b04      	cmp	r3, #4
 800539c:	d107      	bne.n	80053ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06b      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	781a      	ldrb	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d11b      	bne.n	8005428 <HAL_I2C_Master_Transmit+0x188>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d017      	beq.n	8005428 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	6a39      	ldr	r1, [r7, #32]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fcc0 	bl	8005db2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	2b04      	cmp	r3, #4
 800543e:	d107      	bne.n	8005450 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e01a      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d194      	bne.n	8005386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	00100002 	.word	0x00100002
 8005498:	ffff0000 	.word	0xffff0000

0800549c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	460b      	mov	r3, r1
 80054aa:	817b      	strh	r3, [r7, #10]
 80054ac:	4613      	mov	r3, r2
 80054ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054b0:	f7fe f966 	bl	8003780 <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b20      	cmp	r3, #32
 80054c0:	f040 820b 	bne.w	80058da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2319      	movs	r3, #25
 80054ca:	2201      	movs	r2, #1
 80054cc:	497c      	ldr	r1, [pc, #496]	; (80056c0 <HAL_I2C_Master_Receive+0x224>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fb58 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	e1fe      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_I2C_Master_Receive+0x50>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e1f7      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d007      	beq.n	8005512 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2222      	movs	r2, #34	; 0x22
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2210      	movs	r2, #16
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	893a      	ldrh	r2, [r7, #8]
 8005542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a5c      	ldr	r2, [pc, #368]	; (80056c4 <HAL_I2C_Master_Receive+0x228>)
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005554:	8979      	ldrh	r1, [r7, #10]
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fa46 	bl	80059ec <I2C_MasterRequestRead>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e1b8      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d113      	bne.n	800559a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005572:	2300      	movs	r3, #0
 8005574:	623b      	str	r3, [r7, #32]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e18c      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d11b      	bne.n	80055da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e16c      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d11b      	bne.n	800561a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	e14c      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005640:	e138      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	2b03      	cmp	r3, #3
 8005648:	f200 80f1 	bhi.w	800582e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	2b01      	cmp	r3, #1
 8005652:	d123      	bne.n	800569c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fbeb 	bl	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e139      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a
 800569a:	e10b      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d14e      	bne.n	8005742 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	2200      	movs	r2, #0
 80056ac:	4906      	ldr	r1, [pc, #24]	; (80056c8 <HAL_I2C_Master_Receive+0x22c>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fa68 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e10e      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
 80056be:	bf00      	nop
 80056c0:	00100002 	.word	0x00100002
 80056c4:	ffff0000 	.word	0xffff0000
 80056c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005740:	e0b8      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	2200      	movs	r2, #0
 800574a:	4966      	ldr	r1, [pc, #408]	; (80058e4 <HAL_I2C_Master_Receive+0x448>)
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fa19 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0bf      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2200      	movs	r2, #0
 80057a6:	494f      	ldr	r1, [pc, #316]	; (80058e4 <HAL_I2C_Master_Receive+0x448>)
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f9eb 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e091      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800582c:	e042      	b.n	80058b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fafe 	bl	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e04c      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d118      	bne.n	80058b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f aec2 	bne.w	8005642 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	00010004 	.word	0x00010004

080058e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d006      	beq.n	8005912 <I2C_MasterRequestWrite+0x2a>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d003      	beq.n	8005912 <I2C_MasterRequestWrite+0x2a>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005910:	d108      	bne.n	8005924 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e00b      	b.n	800593c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b12      	cmp	r3, #18
 800592a:	d107      	bne.n	800593c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f91b 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e035      	b.n	80059da <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005976:	d108      	bne.n	800598a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005978:	897b      	ldrh	r3, [r7, #10]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	e01b      	b.n	80059c2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	11db      	asrs	r3, r3, #7
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f003 0306 	and.w	r3, r3, #6
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f063 030f 	orn	r3, r3, #15
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	490f      	ldr	r1, [pc, #60]	; (80059e4 <I2C_MasterRequestWrite+0xfc>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f942 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e010      	b.n	80059da <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059b8:	897b      	ldrh	r3, [r7, #10]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4908      	ldr	r1, [pc, #32]	; (80059e8 <I2C_MasterRequestWrite+0x100>)
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f932 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	00010008 	.word	0x00010008
 80059e8:	00010002 	.word	0x00010002

080059ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	460b      	mov	r3, r1
 80059fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d006      	beq.n	8005a26 <I2C_MasterRequestRead+0x3a>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d003      	beq.n	8005a26 <I2C_MasterRequestRead+0x3a>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a24:	d108      	bne.n	8005a38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e00b      	b.n	8005a50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	2b11      	cmp	r3, #17
 8005a3e:	d107      	bne.n	8005a50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f891 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e078      	b.n	8005b74 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8a:	d108      	bne.n	8005a9e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a8c:	897b      	ldrh	r3, [r7, #10]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	e05e      	b.n	8005b5c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	11db      	asrs	r3, r3, #7
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0306 	and.w	r3, r3, #6
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f063 030f 	orn	r3, r3, #15
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4930      	ldr	r1, [pc, #192]	; (8005b7c <I2C_MasterRequestRead+0x190>)
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f8b8 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e053      	b.n	8005b74 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4929      	ldr	r1, [pc, #164]	; (8005b80 <I2C_MasterRequestRead+0x194>)
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f8a8 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e043      	b.n	8005b74 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f830 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e017      	b.n	8005b74 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b44:	897b      	ldrh	r3, [r7, #10]
 8005b46:	11db      	asrs	r3, r3, #7
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0306 	and.w	r3, r3, #6
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f063 030e 	orn	r3, r3, #14
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <I2C_MasterRequestRead+0x194>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f865 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	00010008 	.word	0x00010008
 8005b80:	00010002 	.word	0x00010002

08005b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b94:	e025      	b.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d021      	beq.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fd fdef 	bl	8003780 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e023      	b.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10d      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	e00c      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d0b6      	beq.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c40:	e051      	b.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d123      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e046      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d021      	beq.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fd fd6d 	bl	8003780 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e020      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e00b      	b.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	43da      	mvns	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d18d      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	e02d      	b.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8ce 	bl	8005ee0 <I2C_IsAcknowledgeFailed>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e02d      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d021      	beq.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fd fd13 	bl	8003780 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e007      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d1ca      	bne.n	8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dbe:	e02d      	b.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f88d 	bl	8005ee0 <I2C_IsAcknowledgeFailed>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e02d      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d021      	beq.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fd fcd2 	bl	8003780 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e007      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d1ca      	bne.n	8005dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e40:	e042      	b.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d119      	bne.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e029      	b.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e84:	f7fd fc7c 	bl	8003780 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e007      	b.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d1b5      	bne.n	8005e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d11b      	bne.n	8005f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0204 	orr.w	r2, r3, #4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e25b      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f5e:	4ba3      	ldr	r3, [pc, #652]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00c      	beq.n	8005f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6a:	4ba0      	ldr	r3, [pc, #640]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d112      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f76:	4b9d      	ldr	r3, [pc, #628]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f82:	d10b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	4b99      	ldr	r3, [pc, #612]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <HAL_RCC_OscConfig+0x108>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d157      	bne.n	8006048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e236      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x74>
 8005fa6:	4b91      	ldr	r3, [pc, #580]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a90      	ldr	r2, [pc, #576]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e01d      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x98>
 8005fbe:	4b8b      	ldr	r3, [pc, #556]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a8a      	ldr	r2, [pc, #552]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b88      	ldr	r3, [pc, #544]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a87      	ldr	r2, [pc, #540]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fd8:	4b84      	ldr	r3, [pc, #528]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a83      	ldr	r2, [pc, #524]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b81      	ldr	r3, [pc, #516]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a80      	ldr	r2, [pc, #512]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fd fbc2 	bl	8003780 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006000:	f7fd fbbe 	bl	8003780 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	; 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e1fb      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b76      	ldr	r3, [pc, #472]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0xc0>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fd fbae 	bl	8003780 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006028:	f7fd fbaa 	bl	8003780 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e1e7      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	4b6c      	ldr	r3, [pc, #432]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0xe8>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d063      	beq.n	800611e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006056:	4b65      	ldr	r3, [pc, #404]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006062:	4b62      	ldr	r3, [pc, #392]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800606a:	2b08      	cmp	r3, #8
 800606c:	d11c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800606e:	4b5f      	ldr	r3, [pc, #380]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607a:	4b5c      	ldr	r3, [pc, #368]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d001      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e1bb      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006092:	4b56      	ldr	r3, [pc, #344]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4952      	ldr	r1, [pc, #328]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a6:	e03a      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b0:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <HAL_RCC_OscConfig+0x2b0>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fd fb63 	bl	8003780 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060be:	f7fd fb5f 	bl	8003780 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e19c      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d0:	4b46      	ldr	r3, [pc, #280]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060dc:	4b43      	ldr	r3, [pc, #268]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4940      	ldr	r1, [pc, #256]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
 80060f0:	e015      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f2:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <HAL_RCC_OscConfig+0x2b0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fb42 	bl	8003780 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006100:	f7fd fb3e 	bl	8003780 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e17b      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006112:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d030      	beq.n	800618c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006132:	4b30      	ldr	r3, [pc, #192]	; (80061f4 <HAL_RCC_OscConfig+0x2b4>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fd fb22 	bl	8003780 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006140:	f7fd fb1e 	bl	8003780 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e15b      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006152:	4b26      	ldr	r3, [pc, #152]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x200>
 800615e:	e015      	b.n	800618c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006160:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <HAL_RCC_OscConfig+0x2b4>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fd fb0b 	bl	8003780 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800616e:	f7fd fb07 	bl	8003780 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e144      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a0 	beq.w	80062da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800619a:	2300      	movs	r3, #0
 800619c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_RCC_OscConfig+0x2b8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d121      	bne.n	800621a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HAL_RCC_OscConfig+0x2b8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a07      	ldr	r2, [pc, #28]	; (80061f8 <HAL_RCC_OscConfig+0x2b8>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e2:	f7fd facd 	bl	8003780 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e8:	e011      	b.n	800620e <HAL_RCC_OscConfig+0x2ce>
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	42470000 	.word	0x42470000
 80061f4:	42470e80 	.word	0x42470e80
 80061f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fc:	f7fd fac0 	bl	8003780 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0fd      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	4b81      	ldr	r3, [pc, #516]	; (8006414 <HAL_RCC_OscConfig+0x4d4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d106      	bne.n	8006230 <HAL_RCC_OscConfig+0x2f0>
 8006222:	4b7d      	ldr	r3, [pc, #500]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	4a7c      	ldr	r2, [pc, #496]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	6713      	str	r3, [r2, #112]	; 0x70
 800622e:	e01c      	b.n	800626a <HAL_RCC_OscConfig+0x32a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b05      	cmp	r3, #5
 8006236:	d10c      	bne.n	8006252 <HAL_RCC_OscConfig+0x312>
 8006238:	4b77      	ldr	r3, [pc, #476]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4a76      	ldr	r2, [pc, #472]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800623e:	f043 0304 	orr.w	r3, r3, #4
 8006242:	6713      	str	r3, [r2, #112]	; 0x70
 8006244:	4b74      	ldr	r3, [pc, #464]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	4a73      	ldr	r2, [pc, #460]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6713      	str	r3, [r2, #112]	; 0x70
 8006250:	e00b      	b.n	800626a <HAL_RCC_OscConfig+0x32a>
 8006252:	4b71      	ldr	r3, [pc, #452]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	4a70      	ldr	r2, [pc, #448]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6713      	str	r3, [r2, #112]	; 0x70
 800625e:	4b6e      	ldr	r3, [pc, #440]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	4a6d      	ldr	r2, [pc, #436]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006264:	f023 0304 	bic.w	r3, r3, #4
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d015      	beq.n	800629e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fd fa85 	bl	8003780 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	e00a      	b.n	8006290 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800627a:	f7fd fa81 	bl	8003780 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	f241 3288 	movw	r2, #5000	; 0x1388
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e0bc      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006290:	4b61      	ldr	r3, [pc, #388]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ee      	beq.n	800627a <HAL_RCC_OscConfig+0x33a>
 800629c:	e014      	b.n	80062c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629e:	f7fd fa6f 	bl	8003780 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a4:	e00a      	b.n	80062bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fd fa6b 	bl	8003780 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e0a6      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062bc:	4b56      	ldr	r3, [pc, #344]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 80062be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1ee      	bne.n	80062a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ce:	4b52      	ldr	r3, [pc, #328]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	4a51      	ldr	r2, [pc, #324]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 80062d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8092 	beq.w	8006408 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062e4:	4b4c      	ldr	r3, [pc, #304]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 030c 	and.w	r3, r3, #12
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d05c      	beq.n	80063aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d141      	bne.n	800637c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f8:	4b48      	ldr	r3, [pc, #288]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fd fa3f 	bl	8003780 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006306:	f7fd fa3b 	bl	8003780 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e078      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006318:	4b3f      	ldr	r3, [pc, #252]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f0      	bne.n	8006306 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	019b      	lsls	r3, r3, #6
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	3b01      	subs	r3, #1
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	061b      	lsls	r3, r3, #24
 8006348:	4933      	ldr	r1, [pc, #204]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800634a:	4313      	orrs	r3, r2
 800634c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800634e:	4b33      	ldr	r3, [pc, #204]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fd fa14 	bl	8003780 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fd fa10 	bl	8003780 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e04d      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x41c>
 800637a:	e045      	b.n	8006408 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637c:	4b27      	ldr	r3, [pc, #156]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd f9fd 	bl	8003780 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd f9f9 	bl	8003780 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e036      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639c:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f0      	bne.n	800638a <HAL_RCC_OscConfig+0x44a>
 80063a8:	e02e      	b.n	8006408 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e029      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_RCC_OscConfig+0x4d8>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d11c      	bne.n	8006404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d115      	bne.n	8006404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063de:	4013      	ands	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d10d      	bne.n	8006404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d106      	bne.n	8006404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40007000 	.word	0x40007000
 8006418:	40023800 	.word	0x40023800
 800641c:	42470060 	.word	0x42470060

08006420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0cc      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b68      	ldr	r3, [pc, #416]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d90c      	bls.n	800645c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b65      	ldr	r3, [pc, #404]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b63      	ldr	r3, [pc, #396]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0b8      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006474:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4a58      	ldr	r2, [pc, #352]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800647e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800648c:	4b53      	ldr	r3, [pc, #332]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4a52      	ldr	r2, [pc, #328]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006498:	4b50      	ldr	r3, [pc, #320]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	494d      	ldr	r1, [pc, #308]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d044      	beq.n	8006540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d107      	bne.n	80064ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	4b47      	ldr	r3, [pc, #284]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d119      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e07f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d003      	beq.n	80064de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064de:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e06f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ee:	4b3b      	ldr	r3, [pc, #236]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e067      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f023 0203 	bic.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4934      	ldr	r1, [pc, #208]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	4313      	orrs	r3, r2
 800650e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006510:	f7fd f936 	bl	8003780 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006516:	e00a      	b.n	800652e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006518:	f7fd f932 	bl	8003780 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e04f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 020c 	and.w	r2, r3, #12
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	429a      	cmp	r2, r3
 800653e:	d1eb      	bne.n	8006518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d20c      	bcs.n	8006568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b22      	ldr	r3, [pc, #136]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006556:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d001      	beq.n	8006568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e032      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4916      	ldr	r1, [pc, #88]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	490e      	ldr	r1, [pc, #56]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065a6:	f000 f821 	bl	80065ec <HAL_RCC_GetSysClockFreq>
 80065aa:	4601      	mov	r1, r0
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <HAL_RCC_ClockConfig+0x1c0>)
 80065b8:	5cd3      	ldrb	r3, [r2, r3]
 80065ba:	fa21 f303 	lsr.w	r3, r1, r3
 80065be:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd f896 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40023c00 	.word	0x40023c00
 80065dc:	40023800 	.word	0x40023800
 80065e0:	080086fc 	.word	0x080086fc
 80065e4:	20000000 	.word	0x20000000
 80065e8:	20000004 	.word	0x20000004

080065ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	2300      	movs	r3, #0
 80065fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006602:	4b50      	ldr	r3, [pc, #320]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b04      	cmp	r3, #4
 800660c:	d007      	beq.n	800661e <HAL_RCC_GetSysClockFreq+0x32>
 800660e:	2b08      	cmp	r3, #8
 8006610:	d008      	beq.n	8006624 <HAL_RCC_GetSysClockFreq+0x38>
 8006612:	2b00      	cmp	r3, #0
 8006614:	f040 808d 	bne.w	8006732 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <HAL_RCC_GetSysClockFreq+0x15c>)
 800661a:	60bb      	str	r3, [r7, #8]
       break;
 800661c:	e08c      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800661e:	4b4b      	ldr	r3, [pc, #300]	; (800674c <HAL_RCC_GetSysClockFreq+0x160>)
 8006620:	60bb      	str	r3, [r7, #8]
      break;
 8006622:	e089      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006624:	4b47      	ldr	r3, [pc, #284]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800662c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800662e:	4b45      	ldr	r3, [pc, #276]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d023      	beq.n	8006682 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663a:	4b42      	ldr	r3, [pc, #264]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	f04f 0400 	mov.w	r4, #0
 8006644:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	ea03 0501 	and.w	r5, r3, r1
 8006650:	ea04 0602 	and.w	r6, r4, r2
 8006654:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_RCC_GetSysClockFreq+0x160>)
 8006656:	fb02 f106 	mul.w	r1, r2, r6
 800665a:	2200      	movs	r2, #0
 800665c:	fb02 f205 	mul.w	r2, r2, r5
 8006660:	440a      	add	r2, r1
 8006662:	493a      	ldr	r1, [pc, #232]	; (800674c <HAL_RCC_GetSysClockFreq+0x160>)
 8006664:	fba5 0101 	umull	r0, r1, r5, r1
 8006668:	1853      	adds	r3, r2, r1
 800666a:	4619      	mov	r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f04f 0400 	mov.w	r4, #0
 8006672:	461a      	mov	r2, r3
 8006674:	4623      	mov	r3, r4
 8006676:	f7fa f8c5 	bl	8000804 <__aeabi_uldivmod>
 800667a:	4603      	mov	r3, r0
 800667c:	460c      	mov	r4, r1
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e049      	b.n	8006716 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	f04f 0400 	mov.w	r4, #0
 800668c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	ea03 0501 	and.w	r5, r3, r1
 8006698:	ea04 0602 	and.w	r6, r4, r2
 800669c:	4629      	mov	r1, r5
 800669e:	4632      	mov	r2, r6
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	f04f 0400 	mov.w	r4, #0
 80066a8:	0154      	lsls	r4, r2, #5
 80066aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066ae:	014b      	lsls	r3, r1, #5
 80066b0:	4619      	mov	r1, r3
 80066b2:	4622      	mov	r2, r4
 80066b4:	1b49      	subs	r1, r1, r5
 80066b6:	eb62 0206 	sbc.w	r2, r2, r6
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	f04f 0400 	mov.w	r4, #0
 80066c2:	0194      	lsls	r4, r2, #6
 80066c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066c8:	018b      	lsls	r3, r1, #6
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	eb64 0402 	sbc.w	r4, r4, r2
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	00e2      	lsls	r2, r4, #3
 80066da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066de:	00d9      	lsls	r1, r3, #3
 80066e0:	460b      	mov	r3, r1
 80066e2:	4614      	mov	r4, r2
 80066e4:	195b      	adds	r3, r3, r5
 80066e6:	eb44 0406 	adc.w	r4, r4, r6
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	02a2      	lsls	r2, r4, #10
 80066f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066f8:	0299      	lsls	r1, r3, #10
 80066fa:	460b      	mov	r3, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	4621      	mov	r1, r4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f04f 0400 	mov.w	r4, #0
 8006708:	461a      	mov	r2, r3
 800670a:	4623      	mov	r3, r4
 800670c:	f7fa f87a 	bl	8000804 <__aeabi_uldivmod>
 8006710:	4603      	mov	r3, r0
 8006712:	460c      	mov	r4, r1
 8006714:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCC_GetSysClockFreq+0x158>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	3301      	adds	r3, #1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	60bb      	str	r3, [r7, #8]
      break;
 8006730:	e002      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006734:	60bb      	str	r3, [r7, #8]
      break;
 8006736:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006738:	68bb      	ldr	r3, [r7, #8]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	00f42400 	.word	0x00f42400
 800674c:	00b71b00 	.word	0x00b71b00

08006750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <HAL_RCC_GetHCLKFreq+0x14>)
 8006756:	681b      	ldr	r3, [r3, #0]
}
 8006758:	4618      	mov	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000000 	.word	0x20000000

08006768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800676c:	f7ff fff0 	bl	8006750 <HAL_RCC_GetHCLKFreq>
 8006770:	4601      	mov	r1, r0
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	0a9b      	lsrs	r3, r3, #10
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	4a03      	ldr	r2, [pc, #12]	; (800678c <HAL_RCC_GetPCLK1Freq+0x24>)
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006784:	4618      	mov	r0, r3
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40023800 	.word	0x40023800
 800678c:	0800870c 	.word	0x0800870c

08006790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006794:	f7ff ffdc 	bl	8006750 <HAL_RCC_GetHCLKFreq>
 8006798:	4601      	mov	r1, r0
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	0b5b      	lsrs	r3, r3, #13
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4a03      	ldr	r2, [pc, #12]	; (80067b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067a6:	5cd3      	ldrb	r3, [r2, r3]
 80067a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40023800 	.word	0x40023800
 80067b4:	0800870c 	.word	0x0800870c

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e056      	b.n	8006878 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d106      	bne.n	80067ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fc fbbf 	bl	8002f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006800:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	ea42 0103 	orr.w	r1, r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	f003 0104 	and.w	r1, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e01d      	b.n	80068ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fc70 	bl	800318c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f000 fb56 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d007      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e01d      	b.n	800696c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fc fbd5 	bl	80030f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3304      	adds	r3, #4
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f000 fb07 	bl	8006f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2201      	movs	r2, #1
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd42 	bl	8007410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_TIM_PWM_Start+0x74>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIM_PWM_Start+0x2c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_TIM_PWM_Start+0x78>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_PWM_Start+0x30>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_TIM_PWM_Start+0x32>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b06      	cmp	r3, #6
 80069ca:	d007      	beq.n	80069dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40010400 	.word	0x40010400

080069f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e083      	b.n	8006b0c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d106      	bne.n	8006a1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fc faed 	bl	8002ff8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a34:	f023 0307 	bic.w	r3, r3, #7
 8006a38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4619      	mov	r1, r3
 8006a44:	4610      	mov	r0, r2
 8006a46:	f000 fa93 	bl	8006f70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	4313      	orrs	r3, r2
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a90:	f023 030c 	bic.w	r3, r3, #12
 8006a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	4313      	orrs	r3, r2
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	011a      	lsls	r2, r3, #4
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	031b      	lsls	r3, r3, #12
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_TIM_Encoder_Start+0x16>
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d008      	beq.n	8006b3a <HAL_TIM_Encoder_Start+0x26>
 8006b28:	e00f      	b.n	8006b4a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fc6c 	bl	8007410 <TIM_CCxChannelCmd>
      break;
 8006b38:	e016      	b.n	8006b68 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	2104      	movs	r1, #4
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fc64 	bl	8007410 <TIM_CCxChannelCmd>
      break;
 8006b48:	e00e      	b.n	8006b68 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fc5c 	bl	8007410 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2104      	movs	r1, #4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fc55 	bl	8007410 <TIM_CCxChannelCmd>
      break;
 8006b66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d122      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d11b      	bne.n	8006bde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0202 	mvn.w	r2, #2
 8006bae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9b5 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006bca:	e005      	b.n	8006bd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9a7 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9b8 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d122      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d11b      	bne.n	8006c32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0204 	mvn.w	r2, #4
 8006c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f98b 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c1e:	e005      	b.n	8006c2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f97d 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f98e 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d122      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d11b      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0208 	mvn.w	r2, #8
 8006c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f961 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006c72:	e005      	b.n	8006c80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f953 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f964 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d122      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d11b      	bne.n	8006cda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0210 	mvn.w	r2, #16
 8006caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f937 	bl	8006f34 <HAL_TIM_IC_CaptureCallback>
 8006cc6:	e005      	b.n	8006cd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f929 	bl	8006f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f93a 	bl	8006f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10e      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0201 	mvn.w	r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fa fab7 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d10:	2b80      	cmp	r3, #128	; 0x80
 8006d12:	d10e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d107      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fc1b 	bl	8007568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d10e      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8ff 	bl	8006f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0320 	and.w	r3, r3, #32
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d10e      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d107      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0220 	mvn.w	r2, #32
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fbe5 	bl	8007554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e0b4      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b0c      	cmp	r3, #12
 8006dc2:	f200 809f 	bhi.w	8006f04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006e01 	.word	0x08006e01
 8006dd0:	08006f05 	.word	0x08006f05
 8006dd4:	08006f05 	.word	0x08006f05
 8006dd8:	08006f05 	.word	0x08006f05
 8006ddc:	08006e41 	.word	0x08006e41
 8006de0:	08006f05 	.word	0x08006f05
 8006de4:	08006f05 	.word	0x08006f05
 8006de8:	08006f05 	.word	0x08006f05
 8006dec:	08006e83 	.word	0x08006e83
 8006df0:	08006f05 	.word	0x08006f05
 8006df4:	08006f05 	.word	0x08006f05
 8006df8:	08006f05 	.word	0x08006f05
 8006dfc:	08006ec3 	.word	0x08006ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f952 	bl	80070b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0208 	orr.w	r2, r2, #8
 8006e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0204 	bic.w	r2, r2, #4
 8006e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6999      	ldr	r1, [r3, #24]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	619a      	str	r2, [r3, #24]
      break;
 8006e3e:	e062      	b.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f9a2 	bl	8007190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6999      	ldr	r1, [r3, #24]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	021a      	lsls	r2, r3, #8
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	619a      	str	r2, [r3, #24]
      break;
 8006e80:	e041      	b.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 f9f7 	bl	800727c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0208 	orr.w	r2, r2, #8
 8006e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0204 	bic.w	r2, r2, #4
 8006eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69d9      	ldr	r1, [r3, #28]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	61da      	str	r2, [r3, #28]
      break;
 8006ec0:	e021      	b.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fa4b 	bl	8007364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69d9      	ldr	r1, [r3, #28]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	021a      	lsls	r2, r3, #8
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	61da      	str	r2, [r3, #28]
      break;
 8006f02:	e000      	b.n	8006f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006f04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a40      	ldr	r2, [pc, #256]	; (8007084 <TIM_Base_SetConfig+0x114>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d00f      	beq.n	8006fb0 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <TIM_Base_SetConfig+0x118>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3c      	ldr	r2, [pc, #240]	; (800708c <TIM_Base_SetConfig+0x11c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d007      	beq.n	8006fb0 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3b      	ldr	r2, [pc, #236]	; (8007090 <TIM_Base_SetConfig+0x120>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3a      	ldr	r2, [pc, #232]	; (8007094 <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d108      	bne.n	8006fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <TIM_Base_SetConfig+0x114>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d02b      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd0:	d027      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2c      	ldr	r2, [pc, #176]	; (8007088 <TIM_Base_SetConfig+0x118>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d023      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2b      	ldr	r2, [pc, #172]	; (800708c <TIM_Base_SetConfig+0x11c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01f      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <TIM_Base_SetConfig+0x120>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01b      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <TIM_Base_SetConfig+0x124>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d017      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <TIM_Base_SetConfig+0x128>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <TIM_Base_SetConfig+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00f      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <TIM_Base_SetConfig+0x130>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00b      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a25      	ldr	r2, [pc, #148]	; (80070a4 <TIM_Base_SetConfig+0x134>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d007      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a24      	ldr	r2, [pc, #144]	; (80070a8 <TIM_Base_SetConfig+0x138>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d003      	beq.n	8007022 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a23      	ldr	r2, [pc, #140]	; (80070ac <TIM_Base_SetConfig+0x13c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d108      	bne.n	8007034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a0a      	ldr	r2, [pc, #40]	; (8007084 <TIM_Base_SetConfig+0x114>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_Base_SetConfig+0xf8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a0c      	ldr	r2, [pc, #48]	; (8007094 <TIM_Base_SetConfig+0x124>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d103      	bne.n	8007070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	615a      	str	r2, [r3, #20]
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40010000 	.word	0x40010000
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	40010400 	.word	0x40010400
 8007098:	40014000 	.word	0x40014000
 800709c:	40014400 	.word	0x40014400
 80070a0:	40014800 	.word	0x40014800
 80070a4:	40001800 	.word	0x40001800
 80070a8:	40001c00 	.word	0x40001c00
 80070ac:	40002000 	.word	0x40002000

080070b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f023 0201 	bic.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0303 	bic.w	r3, r3, #3
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 0302 	bic.w	r3, r3, #2
 80070f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a20      	ldr	r2, [pc, #128]	; (8007188 <TIM_OC1_SetConfig+0xd8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC1_SetConfig+0x64>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1f      	ldr	r2, [pc, #124]	; (800718c <TIM_OC1_SetConfig+0xdc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10c      	bne.n	800712e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0308 	bic.w	r3, r3, #8
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a15      	ldr	r2, [pc, #84]	; (8007188 <TIM_OC1_SetConfig+0xd8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_OC1_SetConfig+0x8e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a14      	ldr	r2, [pc, #80]	; (800718c <TIM_OC1_SetConfig+0xdc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d111      	bne.n	8007162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800714c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40010000 	.word	0x40010000
 800718c:	40010400 	.word	0x40010400

08007190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0210 	bic.w	r2, r3, #16
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f023 0320 	bic.w	r3, r3, #32
 80071da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a22      	ldr	r2, [pc, #136]	; (8007274 <TIM_OC2_SetConfig+0xe4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC2_SetConfig+0x68>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <TIM_OC2_SetConfig+0xe8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d10d      	bne.n	8007214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <TIM_OC2_SetConfig+0xe4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_OC2_SetConfig+0x94>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a16      	ldr	r2, [pc, #88]	; (8007278 <TIM_OC2_SetConfig+0xe8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d113      	bne.n	800724c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40010400 	.word	0x40010400

0800727c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0303 	bic.w	r3, r3, #3
 80072b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a21      	ldr	r2, [pc, #132]	; (800735c <TIM_OC3_SetConfig+0xe0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_OC3_SetConfig+0x66>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a20      	ldr	r2, [pc, #128]	; (8007360 <TIM_OC3_SetConfig+0xe4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d10d      	bne.n	80072fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a16      	ldr	r2, [pc, #88]	; (800735c <TIM_OC3_SetConfig+0xe0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_OC3_SetConfig+0x92>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a15      	ldr	r2, [pc, #84]	; (8007360 <TIM_OC3_SetConfig+0xe4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d113      	bne.n	8007336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800731c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400

08007364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a12      	ldr	r2, [pc, #72]	; (8007408 <TIM_OC4_SetConfig+0xa4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC4_SetConfig+0x68>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a11      	ldr	r2, [pc, #68]	; (800740c <TIM_OC4_SetConfig+0xa8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d109      	bne.n	80073e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	019b      	lsls	r3, r3, #6
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40010400 	.word	0x40010400

08007410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	2201      	movs	r2, #1
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	43db      	mvns	r3, r3
 8007432:	401a      	ands	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	fa01 f303 	lsl.w	r3, r1, r3
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e05a      	b.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d022      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c0:	d01d      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1d      	ldr	r2, [pc, #116]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d018      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00e      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a18      	ldr	r2, [pc, #96]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a15      	ldr	r2, [pc, #84]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d10c      	bne.n	8007518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4313      	orrs	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40010400 	.word	0x40010400
 800754c:	40014000 	.word	0x40014000
 8007550:	40001800 	.word	0x40001800

08007554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e03f      	b.n	800760e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fb fee0 	bl	8003368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f829 	bl	8007618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800765a:	f023 030c 	bic.w	r3, r3, #12
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	430b      	orrs	r3, r1
 8007666:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007686:	f040 818b 	bne.w	80079a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4ac1      	ldr	r2, [pc, #772]	; (8007994 <UART_SetConfig+0x37c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d005      	beq.n	80076a0 <UART_SetConfig+0x88>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4abf      	ldr	r2, [pc, #764]	; (8007998 <UART_SetConfig+0x380>)
 800769a:	4293      	cmp	r3, r2
 800769c:	f040 80bd 	bne.w	800781a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7ff f876 	bl	8006790 <HAL_RCC_GetPCLK2Freq>
 80076a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	461d      	mov	r5, r3
 80076aa:	f04f 0600 	mov.w	r6, #0
 80076ae:	46a8      	mov	r8, r5
 80076b0:	46b1      	mov	r9, r6
 80076b2:	eb18 0308 	adds.w	r3, r8, r8
 80076b6:	eb49 0409 	adc.w	r4, r9, r9
 80076ba:	4698      	mov	r8, r3
 80076bc:	46a1      	mov	r9, r4
 80076be:	eb18 0805 	adds.w	r8, r8, r5
 80076c2:	eb49 0906 	adc.w	r9, r9, r6
 80076c6:	f04f 0100 	mov.w	r1, #0
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076da:	4688      	mov	r8, r1
 80076dc:	4691      	mov	r9, r2
 80076de:	eb18 0005 	adds.w	r0, r8, r5
 80076e2:	eb49 0106 	adc.w	r1, r9, r6
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	461d      	mov	r5, r3
 80076ec:	f04f 0600 	mov.w	r6, #0
 80076f0:	196b      	adds	r3, r5, r5
 80076f2:	eb46 0406 	adc.w	r4, r6, r6
 80076f6:	461a      	mov	r2, r3
 80076f8:	4623      	mov	r3, r4
 80076fa:	f7f9 f883 	bl	8000804 <__aeabi_uldivmod>
 80076fe:	4603      	mov	r3, r0
 8007700:	460c      	mov	r4, r1
 8007702:	461a      	mov	r2, r3
 8007704:	4ba5      	ldr	r3, [pc, #660]	; (800799c <UART_SetConfig+0x384>)
 8007706:	fba3 2302 	umull	r2, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	461d      	mov	r5, r3
 8007714:	f04f 0600 	mov.w	r6, #0
 8007718:	46a9      	mov	r9, r5
 800771a:	46b2      	mov	sl, r6
 800771c:	eb19 0309 	adds.w	r3, r9, r9
 8007720:	eb4a 040a 	adc.w	r4, sl, sl
 8007724:	4699      	mov	r9, r3
 8007726:	46a2      	mov	sl, r4
 8007728:	eb19 0905 	adds.w	r9, r9, r5
 800772c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800773c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007744:	4689      	mov	r9, r1
 8007746:	4692      	mov	sl, r2
 8007748:	eb19 0005 	adds.w	r0, r9, r5
 800774c:	eb4a 0106 	adc.w	r1, sl, r6
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	461d      	mov	r5, r3
 8007756:	f04f 0600 	mov.w	r6, #0
 800775a:	196b      	adds	r3, r5, r5
 800775c:	eb46 0406 	adc.w	r4, r6, r6
 8007760:	461a      	mov	r2, r3
 8007762:	4623      	mov	r3, r4
 8007764:	f7f9 f84e 	bl	8000804 <__aeabi_uldivmod>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	461a      	mov	r2, r3
 800776e:	4b8b      	ldr	r3, [pc, #556]	; (800799c <UART_SetConfig+0x384>)
 8007770:	fba3 1302 	umull	r1, r3, r3, r2
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	2164      	movs	r1, #100	; 0x64
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	3332      	adds	r3, #50	; 0x32
 8007782:	4a86      	ldr	r2, [pc, #536]	; (800799c <UART_SetConfig+0x384>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007790:	4498      	add	r8, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	461d      	mov	r5, r3
 8007796:	f04f 0600 	mov.w	r6, #0
 800779a:	46a9      	mov	r9, r5
 800779c:	46b2      	mov	sl, r6
 800779e:	eb19 0309 	adds.w	r3, r9, r9
 80077a2:	eb4a 040a 	adc.w	r4, sl, sl
 80077a6:	4699      	mov	r9, r3
 80077a8:	46a2      	mov	sl, r4
 80077aa:	eb19 0905 	adds.w	r9, r9, r5
 80077ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80077b2:	f04f 0100 	mov.w	r1, #0
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077c6:	4689      	mov	r9, r1
 80077c8:	4692      	mov	sl, r2
 80077ca:	eb19 0005 	adds.w	r0, r9, r5
 80077ce:	eb4a 0106 	adc.w	r1, sl, r6
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	461d      	mov	r5, r3
 80077d8:	f04f 0600 	mov.w	r6, #0
 80077dc:	196b      	adds	r3, r5, r5
 80077de:	eb46 0406 	adc.w	r4, r6, r6
 80077e2:	461a      	mov	r2, r3
 80077e4:	4623      	mov	r3, r4
 80077e6:	f7f9 f80d 	bl	8000804 <__aeabi_uldivmod>
 80077ea:	4603      	mov	r3, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	461a      	mov	r2, r3
 80077f0:	4b6a      	ldr	r3, [pc, #424]	; (800799c <UART_SetConfig+0x384>)
 80077f2:	fba3 1302 	umull	r1, r3, r3, r2
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	2164      	movs	r1, #100	; 0x64
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	3332      	adds	r3, #50	; 0x32
 8007804:	4a65      	ldr	r2, [pc, #404]	; (800799c <UART_SetConfig+0x384>)
 8007806:	fba2 2303 	umull	r2, r3, r2, r3
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	f003 0207 	and.w	r2, r3, #7
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4442      	add	r2, r8
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	e26f      	b.n	8007cfa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800781a:	f7fe ffa5 	bl	8006768 <HAL_RCC_GetPCLK1Freq>
 800781e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	461d      	mov	r5, r3
 8007824:	f04f 0600 	mov.w	r6, #0
 8007828:	46a8      	mov	r8, r5
 800782a:	46b1      	mov	r9, r6
 800782c:	eb18 0308 	adds.w	r3, r8, r8
 8007830:	eb49 0409 	adc.w	r4, r9, r9
 8007834:	4698      	mov	r8, r3
 8007836:	46a1      	mov	r9, r4
 8007838:	eb18 0805 	adds.w	r8, r8, r5
 800783c:	eb49 0906 	adc.w	r9, r9, r6
 8007840:	f04f 0100 	mov.w	r1, #0
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800784c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007850:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007854:	4688      	mov	r8, r1
 8007856:	4691      	mov	r9, r2
 8007858:	eb18 0005 	adds.w	r0, r8, r5
 800785c:	eb49 0106 	adc.w	r1, r9, r6
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	461d      	mov	r5, r3
 8007866:	f04f 0600 	mov.w	r6, #0
 800786a:	196b      	adds	r3, r5, r5
 800786c:	eb46 0406 	adc.w	r4, r6, r6
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	f7f8 ffc6 	bl	8000804 <__aeabi_uldivmod>
 8007878:	4603      	mov	r3, r0
 800787a:	460c      	mov	r4, r1
 800787c:	461a      	mov	r2, r3
 800787e:	4b47      	ldr	r3, [pc, #284]	; (800799c <UART_SetConfig+0x384>)
 8007880:	fba3 2302 	umull	r2, r3, r3, r2
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	461d      	mov	r5, r3
 800788e:	f04f 0600 	mov.w	r6, #0
 8007892:	46a9      	mov	r9, r5
 8007894:	46b2      	mov	sl, r6
 8007896:	eb19 0309 	adds.w	r3, r9, r9
 800789a:	eb4a 040a 	adc.w	r4, sl, sl
 800789e:	4699      	mov	r9, r3
 80078a0:	46a2      	mov	sl, r4
 80078a2:	eb19 0905 	adds.w	r9, r9, r5
 80078a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80078aa:	f04f 0100 	mov.w	r1, #0
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078be:	4689      	mov	r9, r1
 80078c0:	4692      	mov	sl, r2
 80078c2:	eb19 0005 	adds.w	r0, r9, r5
 80078c6:	eb4a 0106 	adc.w	r1, sl, r6
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	461d      	mov	r5, r3
 80078d0:	f04f 0600 	mov.w	r6, #0
 80078d4:	196b      	adds	r3, r5, r5
 80078d6:	eb46 0406 	adc.w	r4, r6, r6
 80078da:	461a      	mov	r2, r3
 80078dc:	4623      	mov	r3, r4
 80078de:	f7f8 ff91 	bl	8000804 <__aeabi_uldivmod>
 80078e2:	4603      	mov	r3, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <UART_SetConfig+0x384>)
 80078ea:	fba3 1302 	umull	r1, r3, r3, r2
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	2164      	movs	r1, #100	; 0x64
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	3332      	adds	r3, #50	; 0x32
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <UART_SetConfig+0x384>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800790a:	4498      	add	r8, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	461d      	mov	r5, r3
 8007910:	f04f 0600 	mov.w	r6, #0
 8007914:	46a9      	mov	r9, r5
 8007916:	46b2      	mov	sl, r6
 8007918:	eb19 0309 	adds.w	r3, r9, r9
 800791c:	eb4a 040a 	adc.w	r4, sl, sl
 8007920:	4699      	mov	r9, r3
 8007922:	46a2      	mov	sl, r4
 8007924:	eb19 0905 	adds.w	r9, r9, r5
 8007928:	eb4a 0a06 	adc.w	sl, sl, r6
 800792c:	f04f 0100 	mov.w	r1, #0
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800793c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007940:	4689      	mov	r9, r1
 8007942:	4692      	mov	sl, r2
 8007944:	eb19 0005 	adds.w	r0, r9, r5
 8007948:	eb4a 0106 	adc.w	r1, sl, r6
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	461d      	mov	r5, r3
 8007952:	f04f 0600 	mov.w	r6, #0
 8007956:	196b      	adds	r3, r5, r5
 8007958:	eb46 0406 	adc.w	r4, r6, r6
 800795c:	461a      	mov	r2, r3
 800795e:	4623      	mov	r3, r4
 8007960:	f7f8 ff50 	bl	8000804 <__aeabi_uldivmod>
 8007964:	4603      	mov	r3, r0
 8007966:	460c      	mov	r4, r1
 8007968:	461a      	mov	r2, r3
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <UART_SetConfig+0x384>)
 800796c:	fba3 1302 	umull	r1, r3, r3, r2
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	2164      	movs	r1, #100	; 0x64
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	3332      	adds	r3, #50	; 0x32
 800797e:	4a07      	ldr	r2, [pc, #28]	; (800799c <UART_SetConfig+0x384>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	f003 0207 	and.w	r2, r3, #7
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4442      	add	r2, r8
 8007990:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007992:	e1b2      	b.n	8007cfa <UART_SetConfig+0x6e2>
 8007994:	40011000 	.word	0x40011000
 8007998:	40011400 	.word	0x40011400
 800799c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4ad7      	ldr	r2, [pc, #860]	; (8007d04 <UART_SetConfig+0x6ec>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d005      	beq.n	80079b6 <UART_SetConfig+0x39e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4ad6      	ldr	r2, [pc, #856]	; (8007d08 <UART_SetConfig+0x6f0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	f040 80d1 	bne.w	8007b58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80079b6:	f7fe feeb 	bl	8006790 <HAL_RCC_GetPCLK2Freq>
 80079ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	469a      	mov	sl, r3
 80079c0:	f04f 0b00 	mov.w	fp, #0
 80079c4:	46d0      	mov	r8, sl
 80079c6:	46d9      	mov	r9, fp
 80079c8:	eb18 0308 	adds.w	r3, r8, r8
 80079cc:	eb49 0409 	adc.w	r4, r9, r9
 80079d0:	4698      	mov	r8, r3
 80079d2:	46a1      	mov	r9, r4
 80079d4:	eb18 080a 	adds.w	r8, r8, sl
 80079d8:	eb49 090b 	adc.w	r9, r9, fp
 80079dc:	f04f 0100 	mov.w	r1, #0
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079f0:	4688      	mov	r8, r1
 80079f2:	4691      	mov	r9, r2
 80079f4:	eb1a 0508 	adds.w	r5, sl, r8
 80079f8:	eb4b 0609 	adc.w	r6, fp, r9
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	f04f 0400 	mov.w	r4, #0
 8007a0e:	0094      	lsls	r4, r2, #2
 8007a10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a14:	008b      	lsls	r3, r1, #2
 8007a16:	461a      	mov	r2, r3
 8007a18:	4623      	mov	r3, r4
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	f7f8 fef1 	bl	8000804 <__aeabi_uldivmod>
 8007a22:	4603      	mov	r3, r0
 8007a24:	460c      	mov	r4, r1
 8007a26:	461a      	mov	r2, r3
 8007a28:	4bb8      	ldr	r3, [pc, #736]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	469b      	mov	fp, r3
 8007a38:	f04f 0c00 	mov.w	ip, #0
 8007a3c:	46d9      	mov	r9, fp
 8007a3e:	46e2      	mov	sl, ip
 8007a40:	eb19 0309 	adds.w	r3, r9, r9
 8007a44:	eb4a 040a 	adc.w	r4, sl, sl
 8007a48:	4699      	mov	r9, r3
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	eb19 090b 	adds.w	r9, r9, fp
 8007a50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a54:	f04f 0100 	mov.w	r1, #0
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a68:	4689      	mov	r9, r1
 8007a6a:	4692      	mov	sl, r2
 8007a6c:	eb1b 0509 	adds.w	r5, fp, r9
 8007a70:	eb4c 060a 	adc.w	r6, ip, sl
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	0094      	lsls	r4, r2, #2
 8007a88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	4631      	mov	r1, r6
 8007a96:	f7f8 feb5 	bl	8000804 <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b9a      	ldr	r3, [pc, #616]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	2164      	movs	r1, #100	; 0x64
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	3332      	adds	r3, #50	; 0x32
 8007ab4:	4a95      	ldr	r2, [pc, #596]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ac0:	4498      	add	r8, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	469b      	mov	fp, r3
 8007ac6:	f04f 0c00 	mov.w	ip, #0
 8007aca:	46d9      	mov	r9, fp
 8007acc:	46e2      	mov	sl, ip
 8007ace:	eb19 0309 	adds.w	r3, r9, r9
 8007ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ad6:	4699      	mov	r9, r3
 8007ad8:	46a2      	mov	sl, r4
 8007ada:	eb19 090b 	adds.w	r9, r9, fp
 8007ade:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007af6:	4689      	mov	r9, r1
 8007af8:	4692      	mov	sl, r2
 8007afa:	eb1b 0509 	adds.w	r5, fp, r9
 8007afe:	eb4c 060a 	adc.w	r6, ip, sl
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4619      	mov	r1, r3
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	f04f 0400 	mov.w	r4, #0
 8007b14:	0094      	lsls	r4, r2, #2
 8007b16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b1a:	008b      	lsls	r3, r1, #2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4623      	mov	r3, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	4631      	mov	r1, r6
 8007b24:	f7f8 fe6e 	bl	8000804 <__aeabi_uldivmod>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4b77      	ldr	r3, [pc, #476]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007b30:	fba3 1302 	umull	r1, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	2164      	movs	r1, #100	; 0x64
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	3332      	adds	r3, #50	; 0x32
 8007b42:	4a72      	ldr	r2, [pc, #456]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4442      	add	r2, r8
 8007b54:	609a      	str	r2, [r3, #8]
 8007b56:	e0d0      	b.n	8007cfa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b58:	f7fe fe06 	bl	8006768 <HAL_RCC_GetPCLK1Freq>
 8007b5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	469a      	mov	sl, r3
 8007b62:	f04f 0b00 	mov.w	fp, #0
 8007b66:	46d0      	mov	r8, sl
 8007b68:	46d9      	mov	r9, fp
 8007b6a:	eb18 0308 	adds.w	r3, r8, r8
 8007b6e:	eb49 0409 	adc.w	r4, r9, r9
 8007b72:	4698      	mov	r8, r3
 8007b74:	46a1      	mov	r9, r4
 8007b76:	eb18 080a 	adds.w	r8, r8, sl
 8007b7a:	eb49 090b 	adc.w	r9, r9, fp
 8007b7e:	f04f 0100 	mov.w	r1, #0
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b92:	4688      	mov	r8, r1
 8007b94:	4691      	mov	r9, r2
 8007b96:	eb1a 0508 	adds.w	r5, sl, r8
 8007b9a:	eb4b 0609 	adc.w	r6, fp, r9
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	f04f 0400 	mov.w	r4, #0
 8007bb0:	0094      	lsls	r4, r2, #2
 8007bb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bb6:	008b      	lsls	r3, r1, #2
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4623      	mov	r3, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	f7f8 fe20 	bl	8000804 <__aeabi_uldivmod>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4b50      	ldr	r3, [pc, #320]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	469b      	mov	fp, r3
 8007bda:	f04f 0c00 	mov.w	ip, #0
 8007bde:	46d9      	mov	r9, fp
 8007be0:	46e2      	mov	sl, ip
 8007be2:	eb19 0309 	adds.w	r3, r9, r9
 8007be6:	eb4a 040a 	adc.w	r4, sl, sl
 8007bea:	4699      	mov	r9, r3
 8007bec:	46a2      	mov	sl, r4
 8007bee:	eb19 090b 	adds.w	r9, r9, fp
 8007bf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bf6:	f04f 0100 	mov.w	r1, #0
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c0a:	4689      	mov	r9, r1
 8007c0c:	4692      	mov	sl, r2
 8007c0e:	eb1b 0509 	adds.w	r5, fp, r9
 8007c12:	eb4c 060a 	adc.w	r6, ip, sl
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	0094      	lsls	r4, r2, #2
 8007c2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c2e:	008b      	lsls	r3, r1, #2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4623      	mov	r3, r4
 8007c34:	4628      	mov	r0, r5
 8007c36:	4631      	mov	r1, r6
 8007c38:	f7f8 fde4 	bl	8000804 <__aeabi_uldivmod>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b32      	ldr	r3, [pc, #200]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007c44:	fba3 1302 	umull	r1, r3, r3, r2
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	2164      	movs	r1, #100	; 0x64
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	3332      	adds	r3, #50	; 0x32
 8007c56:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007c58:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c62:	4498      	add	r8, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	469b      	mov	fp, r3
 8007c68:	f04f 0c00 	mov.w	ip, #0
 8007c6c:	46d9      	mov	r9, fp
 8007c6e:	46e2      	mov	sl, ip
 8007c70:	eb19 0309 	adds.w	r3, r9, r9
 8007c74:	eb4a 040a 	adc.w	r4, sl, sl
 8007c78:	4699      	mov	r9, r3
 8007c7a:	46a2      	mov	sl, r4
 8007c7c:	eb19 090b 	adds.w	r9, r9, fp
 8007c80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c84:	f04f 0100 	mov.w	r1, #0
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c98:	4689      	mov	r9, r1
 8007c9a:	4692      	mov	sl, r2
 8007c9c:	eb1b 0509 	adds.w	r5, fp, r9
 8007ca0:	eb4c 060a 	adc.w	r6, ip, sl
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	f04f 0400 	mov.w	r4, #0
 8007cb6:	0094      	lsls	r4, r2, #2
 8007cb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cbc:	008b      	lsls	r3, r1, #2
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	f7f8 fd9d 	bl	8000804 <__aeabi_uldivmod>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	2164      	movs	r1, #100	; 0x64
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	3332      	adds	r3, #50	; 0x32
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <UART_SetConfig+0x6f4>)
 8007ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	f003 020f 	and.w	r2, r3, #15
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4442      	add	r2, r8
 8007cf6:	609a      	str	r2, [r3, #8]
}
 8007cf8:	e7ff      	b.n	8007cfa <UART_SetConfig+0x6e2>
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d04:	40011000 	.word	0x40011000
 8007d08:	40011400 	.word	0x40011400
 8007d0c:	51eb851f 	.word	0x51eb851f

08007d10 <__errno>:
 8007d10:	4b01      	ldr	r3, [pc, #4]	; (8007d18 <__errno+0x8>)
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	2000000c 	.word	0x2000000c

08007d1c <__libc_init_array>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0d      	ldr	r6, [pc, #52]	; (8007d54 <__libc_init_array+0x38>)
 8007d20:	4c0d      	ldr	r4, [pc, #52]	; (8007d58 <__libc_init_array+0x3c>)
 8007d22:	1ba4      	subs	r4, r4, r6
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	2500      	movs	r5, #0
 8007d28:	42a5      	cmp	r5, r4
 8007d2a:	d109      	bne.n	8007d40 <__libc_init_array+0x24>
 8007d2c:	4e0b      	ldr	r6, [pc, #44]	; (8007d5c <__libc_init_array+0x40>)
 8007d2e:	4c0c      	ldr	r4, [pc, #48]	; (8007d60 <__libc_init_array+0x44>)
 8007d30:	f000 fc28 	bl	8008584 <_init>
 8007d34:	1ba4      	subs	r4, r4, r6
 8007d36:	10a4      	asrs	r4, r4, #2
 8007d38:	2500      	movs	r5, #0
 8007d3a:	42a5      	cmp	r5, r4
 8007d3c:	d105      	bne.n	8007d4a <__libc_init_array+0x2e>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d44:	4798      	blx	r3
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7ee      	b.n	8007d28 <__libc_init_array+0xc>
 8007d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d4e:	4798      	blx	r3
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7f2      	b.n	8007d3a <__libc_init_array+0x1e>
 8007d54:	08008758 	.word	0x08008758
 8007d58:	08008758 	.word	0x08008758
 8007d5c:	08008758 	.word	0x08008758
 8007d60:	0800875c 	.word	0x0800875c

08007d64 <memcpy>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	1e43      	subs	r3, r0, #1
 8007d68:	440a      	add	r2, r1
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	d100      	bne.n	8007d70 <memcpy+0xc>
 8007d6e:	bd10      	pop	{r4, pc}
 8007d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d78:	e7f7      	b.n	8007d6a <memcpy+0x6>

08007d7a <memset>:
 8007d7a:	4402      	add	r2, r0
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d100      	bne.n	8007d84 <memset+0xa>
 8007d82:	4770      	bx	lr
 8007d84:	f803 1b01 	strb.w	r1, [r3], #1
 8007d88:	e7f9      	b.n	8007d7e <memset+0x4>
	...

08007d8c <_vsiprintf_r>:
 8007d8c:	b500      	push	{lr}
 8007d8e:	b09b      	sub	sp, #108	; 0x6c
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	9104      	str	r1, [sp, #16]
 8007d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d98:	9105      	str	r1, [sp, #20]
 8007d9a:	9102      	str	r1, [sp, #8]
 8007d9c:	4905      	ldr	r1, [pc, #20]	; (8007db4 <_vsiprintf_r+0x28>)
 8007d9e:	9103      	str	r1, [sp, #12]
 8007da0:	4669      	mov	r1, sp
 8007da2:	f000 f86d 	bl	8007e80 <_svfiprintf_r>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	b01b      	add	sp, #108	; 0x6c
 8007dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db2:	bf00      	nop
 8007db4:	ffff0208 	.word	0xffff0208

08007db8 <vsiprintf>:
 8007db8:	4613      	mov	r3, r2
 8007dba:	460a      	mov	r2, r1
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4802      	ldr	r0, [pc, #8]	; (8007dc8 <vsiprintf+0x10>)
 8007dc0:	6800      	ldr	r0, [r0, #0]
 8007dc2:	f7ff bfe3 	b.w	8007d8c <_vsiprintf_r>
 8007dc6:	bf00      	nop
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <__ssputs_r>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	688e      	ldr	r6, [r1, #8]
 8007dd2:	429e      	cmp	r6, r3
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4690      	mov	r8, r2
 8007dda:	4699      	mov	r9, r3
 8007ddc:	d837      	bhi.n	8007e4e <__ssputs_r+0x82>
 8007dde:	898a      	ldrh	r2, [r1, #12]
 8007de0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007de4:	d031      	beq.n	8007e4a <__ssputs_r+0x7e>
 8007de6:	6825      	ldr	r5, [r4, #0]
 8007de8:	6909      	ldr	r1, [r1, #16]
 8007dea:	1a6f      	subs	r7, r5, r1
 8007dec:	6965      	ldr	r5, [r4, #20]
 8007dee:	2302      	movs	r3, #2
 8007df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007df8:	f109 0301 	add.w	r3, r9, #1
 8007dfc:	443b      	add	r3, r7
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	bf38      	it	cc
 8007e02:	461d      	movcc	r5, r3
 8007e04:	0553      	lsls	r3, r2, #21
 8007e06:	d530      	bpl.n	8007e6a <__ssputs_r+0x9e>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f000 fb21 	bl	8008450 <_malloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	b950      	cbnz	r0, 8007e28 <__ssputs_r+0x5c>
 8007e12:	230c      	movs	r3, #12
 8007e14:	f8ca 3000 	str.w	r3, [sl]
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	463a      	mov	r2, r7
 8007e2a:	6921      	ldr	r1, [r4, #16]
 8007e2c:	f7ff ff9a 	bl	8007d64 <memcpy>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	6126      	str	r6, [r4, #16]
 8007e3e:	6165      	str	r5, [r4, #20]
 8007e40:	443e      	add	r6, r7
 8007e42:	1bed      	subs	r5, r5, r7
 8007e44:	6026      	str	r6, [r4, #0]
 8007e46:	60a5      	str	r5, [r4, #8]
 8007e48:	464e      	mov	r6, r9
 8007e4a:	454e      	cmp	r6, r9
 8007e4c:	d900      	bls.n	8007e50 <__ssputs_r+0x84>
 8007e4e:	464e      	mov	r6, r9
 8007e50:	4632      	mov	r2, r6
 8007e52:	4641      	mov	r1, r8
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	f000 fa93 	bl	8008380 <memmove>
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	1b9b      	subs	r3, r3, r6
 8007e5e:	60a3      	str	r3, [r4, #8]
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	441e      	add	r6, r3
 8007e64:	6026      	str	r6, [r4, #0]
 8007e66:	2000      	movs	r0, #0
 8007e68:	e7dc      	b.n	8007e24 <__ssputs_r+0x58>
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	f000 fb4a 	bl	8008504 <_realloc_r>
 8007e70:	4606      	mov	r6, r0
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d1e2      	bne.n	8007e3c <__ssputs_r+0x70>
 8007e76:	6921      	ldr	r1, [r4, #16]
 8007e78:	4650      	mov	r0, sl
 8007e7a:	f000 fa9b 	bl	80083b4 <_free_r>
 8007e7e:	e7c8      	b.n	8007e12 <__ssputs_r+0x46>

08007e80 <_svfiprintf_r>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	461d      	mov	r5, r3
 8007e86:	898b      	ldrh	r3, [r1, #12]
 8007e88:	061f      	lsls	r7, r3, #24
 8007e8a:	b09d      	sub	sp, #116	; 0x74
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	4616      	mov	r6, r2
 8007e92:	d50f      	bpl.n	8007eb4 <_svfiprintf_r+0x34>
 8007e94:	690b      	ldr	r3, [r1, #16]
 8007e96:	b96b      	cbnz	r3, 8007eb4 <_svfiprintf_r+0x34>
 8007e98:	2140      	movs	r1, #64	; 0x40
 8007e9a:	f000 fad9 	bl	8008450 <_malloc_r>
 8007e9e:	6020      	str	r0, [r4, #0]
 8007ea0:	6120      	str	r0, [r4, #16]
 8007ea2:	b928      	cbnz	r0, 8007eb0 <_svfiprintf_r+0x30>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	f8c8 3000 	str.w	r3, [r8]
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	e0c8      	b.n	8008042 <_svfiprintf_r+0x1c2>
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ebe:	2330      	movs	r3, #48	; 0x30
 8007ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec4:	9503      	str	r5, [sp, #12]
 8007ec6:	f04f 0b01 	mov.w	fp, #1
 8007eca:	4637      	mov	r7, r6
 8007ecc:	463d      	mov	r5, r7
 8007ece:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ed2:	b10b      	cbz	r3, 8007ed8 <_svfiprintf_r+0x58>
 8007ed4:	2b25      	cmp	r3, #37	; 0x25
 8007ed6:	d13e      	bne.n	8007f56 <_svfiprintf_r+0xd6>
 8007ed8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007edc:	d00b      	beq.n	8007ef6 <_svfiprintf_r+0x76>
 8007ede:	4653      	mov	r3, sl
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	f7ff ff71 	bl	8007dcc <__ssputs_r>
 8007eea:	3001      	adds	r0, #1
 8007eec:	f000 80a4 	beq.w	8008038 <_svfiprintf_r+0x1b8>
 8007ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef2:	4453      	add	r3, sl
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	783b      	ldrb	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 809d 	beq.w	8008038 <_svfiprintf_r+0x1b8>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295
 8007f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f10:	931a      	str	r3, [sp, #104]	; 0x68
 8007f12:	462f      	mov	r7, r5
 8007f14:	2205      	movs	r2, #5
 8007f16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f1a:	4850      	ldr	r0, [pc, #320]	; (800805c <_svfiprintf_r+0x1dc>)
 8007f1c:	f7f8 f958 	bl	80001d0 <memchr>
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	b9d0      	cbnz	r0, 8007f5a <_svfiprintf_r+0xda>
 8007f24:	06d9      	lsls	r1, r3, #27
 8007f26:	bf44      	itt	mi
 8007f28:	2220      	movmi	r2, #32
 8007f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f2e:	071a      	lsls	r2, r3, #28
 8007f30:	bf44      	itt	mi
 8007f32:	222b      	movmi	r2, #43	; 0x2b
 8007f34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f38:	782a      	ldrb	r2, [r5, #0]
 8007f3a:	2a2a      	cmp	r2, #42	; 0x2a
 8007f3c:	d015      	beq.n	8007f6a <_svfiprintf_r+0xea>
 8007f3e:	9a07      	ldr	r2, [sp, #28]
 8007f40:	462f      	mov	r7, r5
 8007f42:	2000      	movs	r0, #0
 8007f44:	250a      	movs	r5, #10
 8007f46:	4639      	mov	r1, r7
 8007f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f4c:	3b30      	subs	r3, #48	; 0x30
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d94d      	bls.n	8007fee <_svfiprintf_r+0x16e>
 8007f52:	b1b8      	cbz	r0, 8007f84 <_svfiprintf_r+0x104>
 8007f54:	e00f      	b.n	8007f76 <_svfiprintf_r+0xf6>
 8007f56:	462f      	mov	r7, r5
 8007f58:	e7b8      	b.n	8007ecc <_svfiprintf_r+0x4c>
 8007f5a:	4a40      	ldr	r2, [pc, #256]	; (800805c <_svfiprintf_r+0x1dc>)
 8007f5c:	1a80      	subs	r0, r0, r2
 8007f5e:	fa0b f000 	lsl.w	r0, fp, r0
 8007f62:	4318      	orrs	r0, r3
 8007f64:	9004      	str	r0, [sp, #16]
 8007f66:	463d      	mov	r5, r7
 8007f68:	e7d3      	b.n	8007f12 <_svfiprintf_r+0x92>
 8007f6a:	9a03      	ldr	r2, [sp, #12]
 8007f6c:	1d11      	adds	r1, r2, #4
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	9103      	str	r1, [sp, #12]
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	db01      	blt.n	8007f7a <_svfiprintf_r+0xfa>
 8007f76:	9207      	str	r2, [sp, #28]
 8007f78:	e004      	b.n	8007f84 <_svfiprintf_r+0x104>
 8007f7a:	4252      	negs	r2, r2
 8007f7c:	f043 0302 	orr.w	r3, r3, #2
 8007f80:	9207      	str	r2, [sp, #28]
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	783b      	ldrb	r3, [r7, #0]
 8007f86:	2b2e      	cmp	r3, #46	; 0x2e
 8007f88:	d10c      	bne.n	8007fa4 <_svfiprintf_r+0x124>
 8007f8a:	787b      	ldrb	r3, [r7, #1]
 8007f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f8e:	d133      	bne.n	8007ff8 <_svfiprintf_r+0x178>
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	9203      	str	r2, [sp, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	bfb8      	it	lt
 8007f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fa0:	3702      	adds	r7, #2
 8007fa2:	9305      	str	r3, [sp, #20]
 8007fa4:	4d2e      	ldr	r5, [pc, #184]	; (8008060 <_svfiprintf_r+0x1e0>)
 8007fa6:	7839      	ldrb	r1, [r7, #0]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7f8 f910 	bl	80001d0 <memchr>
 8007fb0:	b138      	cbz	r0, 8007fc2 <_svfiprintf_r+0x142>
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	1b40      	subs	r0, r0, r5
 8007fb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	4303      	orrs	r3, r0
 8007fbe:	3701      	adds	r7, #1
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	7839      	ldrb	r1, [r7, #0]
 8007fc4:	4827      	ldr	r0, [pc, #156]	; (8008064 <_svfiprintf_r+0x1e4>)
 8007fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fca:	2206      	movs	r2, #6
 8007fcc:	1c7e      	adds	r6, r7, #1
 8007fce:	f7f8 f8ff 	bl	80001d0 <memchr>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d038      	beq.n	8008048 <_svfiprintf_r+0x1c8>
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <_svfiprintf_r+0x1e8>)
 8007fd8:	bb13      	cbnz	r3, 8008020 <_svfiprintf_r+0x1a0>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	f023 0307 	bic.w	r3, r3, #7
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	9303      	str	r3, [sp, #12]
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	444b      	add	r3, r9
 8007fea:	9309      	str	r3, [sp, #36]	; 0x24
 8007fec:	e76d      	b.n	8007eca <_svfiprintf_r+0x4a>
 8007fee:	fb05 3202 	mla	r2, r5, r2, r3
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	e7a6      	b.n	8007f46 <_svfiprintf_r+0xc6>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	3701      	adds	r7, #1
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	4619      	mov	r1, r3
 8008000:	250a      	movs	r5, #10
 8008002:	4638      	mov	r0, r7
 8008004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008008:	3a30      	subs	r2, #48	; 0x30
 800800a:	2a09      	cmp	r2, #9
 800800c:	d903      	bls.n	8008016 <_svfiprintf_r+0x196>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0c8      	beq.n	8007fa4 <_svfiprintf_r+0x124>
 8008012:	9105      	str	r1, [sp, #20]
 8008014:	e7c6      	b.n	8007fa4 <_svfiprintf_r+0x124>
 8008016:	fb05 2101 	mla	r1, r5, r1, r2
 800801a:	2301      	movs	r3, #1
 800801c:	4607      	mov	r7, r0
 800801e:	e7f0      	b.n	8008002 <_svfiprintf_r+0x182>
 8008020:	ab03      	add	r3, sp, #12
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4622      	mov	r2, r4
 8008026:	4b11      	ldr	r3, [pc, #68]	; (800806c <_svfiprintf_r+0x1ec>)
 8008028:	a904      	add	r1, sp, #16
 800802a:	4640      	mov	r0, r8
 800802c:	f3af 8000 	nop.w
 8008030:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008034:	4681      	mov	r9, r0
 8008036:	d1d6      	bne.n	8007fe6 <_svfiprintf_r+0x166>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	065b      	lsls	r3, r3, #25
 800803c:	f53f af35 	bmi.w	8007eaa <_svfiprintf_r+0x2a>
 8008040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008042:	b01d      	add	sp, #116	; 0x74
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	ab03      	add	r3, sp, #12
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4622      	mov	r2, r4
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <_svfiprintf_r+0x1ec>)
 8008050:	a904      	add	r1, sp, #16
 8008052:	4640      	mov	r0, r8
 8008054:	f000 f882 	bl	800815c <_printf_i>
 8008058:	e7ea      	b.n	8008030 <_svfiprintf_r+0x1b0>
 800805a:	bf00      	nop
 800805c:	0800871c 	.word	0x0800871c
 8008060:	08008722 	.word	0x08008722
 8008064:	08008726 	.word	0x08008726
 8008068:	00000000 	.word	0x00000000
 800806c:	08007dcd 	.word	0x08007dcd

08008070 <_printf_common>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	4691      	mov	r9, r2
 8008076:	461f      	mov	r7, r3
 8008078:	688a      	ldr	r2, [r1, #8]
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008080:	4293      	cmp	r3, r2
 8008082:	bfb8      	it	lt
 8008084:	4613      	movlt	r3, r2
 8008086:	f8c9 3000 	str.w	r3, [r9]
 800808a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800808e:	4606      	mov	r6, r0
 8008090:	460c      	mov	r4, r1
 8008092:	b112      	cbz	r2, 800809a <_printf_common+0x2a>
 8008094:	3301      	adds	r3, #1
 8008096:	f8c9 3000 	str.w	r3, [r9]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	0699      	lsls	r1, r3, #26
 800809e:	bf42      	ittt	mi
 80080a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080a4:	3302      	addmi	r3, #2
 80080a6:	f8c9 3000 	strmi.w	r3, [r9]
 80080aa:	6825      	ldr	r5, [r4, #0]
 80080ac:	f015 0506 	ands.w	r5, r5, #6
 80080b0:	d107      	bne.n	80080c2 <_printf_common+0x52>
 80080b2:	f104 0a19 	add.w	sl, r4, #25
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	f8d9 2000 	ldr.w	r2, [r9]
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	42ab      	cmp	r3, r5
 80080c0:	dc28      	bgt.n	8008114 <_printf_common+0xa4>
 80080c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	3300      	adds	r3, #0
 80080ca:	bf18      	it	ne
 80080cc:	2301      	movne	r3, #1
 80080ce:	0692      	lsls	r2, r2, #26
 80080d0:	d42d      	bmi.n	800812e <_printf_common+0xbe>
 80080d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d6:	4639      	mov	r1, r7
 80080d8:	4630      	mov	r0, r6
 80080da:	47c0      	blx	r8
 80080dc:	3001      	adds	r0, #1
 80080de:	d020      	beq.n	8008122 <_printf_common+0xb2>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	68e5      	ldr	r5, [r4, #12]
 80080e4:	f8d9 2000 	ldr.w	r2, [r9]
 80080e8:	f003 0306 	and.w	r3, r3, #6
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	bf08      	it	eq
 80080f0:	1aad      	subeq	r5, r5, r2
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	6922      	ldr	r2, [r4, #16]
 80080f6:	bf0c      	ite	eq
 80080f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080fc:	2500      	movne	r5, #0
 80080fe:	4293      	cmp	r3, r2
 8008100:	bfc4      	itt	gt
 8008102:	1a9b      	subgt	r3, r3, r2
 8008104:	18ed      	addgt	r5, r5, r3
 8008106:	f04f 0900 	mov.w	r9, #0
 800810a:	341a      	adds	r4, #26
 800810c:	454d      	cmp	r5, r9
 800810e:	d11a      	bne.n	8008146 <_printf_common+0xd6>
 8008110:	2000      	movs	r0, #0
 8008112:	e008      	b.n	8008126 <_printf_common+0xb6>
 8008114:	2301      	movs	r3, #1
 8008116:	4652      	mov	r2, sl
 8008118:	4639      	mov	r1, r7
 800811a:	4630      	mov	r0, r6
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d103      	bne.n	800812a <_printf_common+0xba>
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	3501      	adds	r5, #1
 800812c:	e7c3      	b.n	80080b6 <_printf_common+0x46>
 800812e:	18e1      	adds	r1, r4, r3
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	2030      	movs	r0, #48	; 0x30
 8008134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008138:	4422      	add	r2, r4
 800813a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800813e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008142:	3302      	adds	r3, #2
 8008144:	e7c5      	b.n	80080d2 <_printf_common+0x62>
 8008146:	2301      	movs	r3, #1
 8008148:	4622      	mov	r2, r4
 800814a:	4639      	mov	r1, r7
 800814c:	4630      	mov	r0, r6
 800814e:	47c0      	blx	r8
 8008150:	3001      	adds	r0, #1
 8008152:	d0e6      	beq.n	8008122 <_printf_common+0xb2>
 8008154:	f109 0901 	add.w	r9, r9, #1
 8008158:	e7d8      	b.n	800810c <_printf_common+0x9c>
	...

0800815c <_printf_i>:
 800815c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008160:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008164:	460c      	mov	r4, r1
 8008166:	7e09      	ldrb	r1, [r1, #24]
 8008168:	b085      	sub	sp, #20
 800816a:	296e      	cmp	r1, #110	; 0x6e
 800816c:	4617      	mov	r7, r2
 800816e:	4606      	mov	r6, r0
 8008170:	4698      	mov	r8, r3
 8008172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008174:	f000 80b3 	beq.w	80082de <_printf_i+0x182>
 8008178:	d822      	bhi.n	80081c0 <_printf_i+0x64>
 800817a:	2963      	cmp	r1, #99	; 0x63
 800817c:	d036      	beq.n	80081ec <_printf_i+0x90>
 800817e:	d80a      	bhi.n	8008196 <_printf_i+0x3a>
 8008180:	2900      	cmp	r1, #0
 8008182:	f000 80b9 	beq.w	80082f8 <_printf_i+0x19c>
 8008186:	2958      	cmp	r1, #88	; 0x58
 8008188:	f000 8083 	beq.w	8008292 <_printf_i+0x136>
 800818c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008190:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008194:	e032      	b.n	80081fc <_printf_i+0xa0>
 8008196:	2964      	cmp	r1, #100	; 0x64
 8008198:	d001      	beq.n	800819e <_printf_i+0x42>
 800819a:	2969      	cmp	r1, #105	; 0x69
 800819c:	d1f6      	bne.n	800818c <_printf_i+0x30>
 800819e:	6820      	ldr	r0, [r4, #0]
 80081a0:	6813      	ldr	r3, [r2, #0]
 80081a2:	0605      	lsls	r5, r0, #24
 80081a4:	f103 0104 	add.w	r1, r3, #4
 80081a8:	d52a      	bpl.n	8008200 <_printf_i+0xa4>
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da03      	bge.n	80081ba <_printf_i+0x5e>
 80081b2:	222d      	movs	r2, #45	; 0x2d
 80081b4:	425b      	negs	r3, r3
 80081b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081ba:	486f      	ldr	r0, [pc, #444]	; (8008378 <_printf_i+0x21c>)
 80081bc:	220a      	movs	r2, #10
 80081be:	e039      	b.n	8008234 <_printf_i+0xd8>
 80081c0:	2973      	cmp	r1, #115	; 0x73
 80081c2:	f000 809d 	beq.w	8008300 <_printf_i+0x1a4>
 80081c6:	d808      	bhi.n	80081da <_printf_i+0x7e>
 80081c8:	296f      	cmp	r1, #111	; 0x6f
 80081ca:	d020      	beq.n	800820e <_printf_i+0xb2>
 80081cc:	2970      	cmp	r1, #112	; 0x70
 80081ce:	d1dd      	bne.n	800818c <_printf_i+0x30>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	f043 0320 	orr.w	r3, r3, #32
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	e003      	b.n	80081e2 <_printf_i+0x86>
 80081da:	2975      	cmp	r1, #117	; 0x75
 80081dc:	d017      	beq.n	800820e <_printf_i+0xb2>
 80081de:	2978      	cmp	r1, #120	; 0x78
 80081e0:	d1d4      	bne.n	800818c <_printf_i+0x30>
 80081e2:	2378      	movs	r3, #120	; 0x78
 80081e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081e8:	4864      	ldr	r0, [pc, #400]	; (800837c <_printf_i+0x220>)
 80081ea:	e055      	b.n	8008298 <_printf_i+0x13c>
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6011      	str	r1, [r2, #0]
 80081f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081fc:	2301      	movs	r3, #1
 80081fe:	e08c      	b.n	800831a <_printf_i+0x1be>
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6011      	str	r1, [r2, #0]
 8008204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008208:	bf18      	it	ne
 800820a:	b21b      	sxthne	r3, r3
 800820c:	e7cf      	b.n	80081ae <_printf_i+0x52>
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	6825      	ldr	r5, [r4, #0]
 8008212:	1d18      	adds	r0, r3, #4
 8008214:	6010      	str	r0, [r2, #0]
 8008216:	0628      	lsls	r0, r5, #24
 8008218:	d501      	bpl.n	800821e <_printf_i+0xc2>
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	e002      	b.n	8008224 <_printf_i+0xc8>
 800821e:	0668      	lsls	r0, r5, #25
 8008220:	d5fb      	bpl.n	800821a <_printf_i+0xbe>
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	4854      	ldr	r0, [pc, #336]	; (8008378 <_printf_i+0x21c>)
 8008226:	296f      	cmp	r1, #111	; 0x6f
 8008228:	bf14      	ite	ne
 800822a:	220a      	movne	r2, #10
 800822c:	2208      	moveq	r2, #8
 800822e:	2100      	movs	r1, #0
 8008230:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008234:	6865      	ldr	r5, [r4, #4]
 8008236:	60a5      	str	r5, [r4, #8]
 8008238:	2d00      	cmp	r5, #0
 800823a:	f2c0 8095 	blt.w	8008368 <_printf_i+0x20c>
 800823e:	6821      	ldr	r1, [r4, #0]
 8008240:	f021 0104 	bic.w	r1, r1, #4
 8008244:	6021      	str	r1, [r4, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d13d      	bne.n	80082c6 <_printf_i+0x16a>
 800824a:	2d00      	cmp	r5, #0
 800824c:	f040 808e 	bne.w	800836c <_printf_i+0x210>
 8008250:	4665      	mov	r5, ip
 8008252:	2a08      	cmp	r2, #8
 8008254:	d10b      	bne.n	800826e <_printf_i+0x112>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	07db      	lsls	r3, r3, #31
 800825a:	d508      	bpl.n	800826e <_printf_i+0x112>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	6862      	ldr	r2, [r4, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	bfde      	ittt	le
 8008264:	2330      	movle	r3, #48	; 0x30
 8008266:	f805 3c01 	strble.w	r3, [r5, #-1]
 800826a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800826e:	ebac 0305 	sub.w	r3, ip, r5
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	f8cd 8000 	str.w	r8, [sp]
 8008278:	463b      	mov	r3, r7
 800827a:	aa03      	add	r2, sp, #12
 800827c:	4621      	mov	r1, r4
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff fef6 	bl	8008070 <_printf_common>
 8008284:	3001      	adds	r0, #1
 8008286:	d14d      	bne.n	8008324 <_printf_i+0x1c8>
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	b005      	add	sp, #20
 800828e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008292:	4839      	ldr	r0, [pc, #228]	; (8008378 <_printf_i+0x21c>)
 8008294:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008298:	6813      	ldr	r3, [r2, #0]
 800829a:	6821      	ldr	r1, [r4, #0]
 800829c:	1d1d      	adds	r5, r3, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6015      	str	r5, [r2, #0]
 80082a2:	060a      	lsls	r2, r1, #24
 80082a4:	d50b      	bpl.n	80082be <_printf_i+0x162>
 80082a6:	07ca      	lsls	r2, r1, #31
 80082a8:	bf44      	itt	mi
 80082aa:	f041 0120 	orrmi.w	r1, r1, #32
 80082ae:	6021      	strmi	r1, [r4, #0]
 80082b0:	b91b      	cbnz	r3, 80082ba <_printf_i+0x15e>
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	f022 0220 	bic.w	r2, r2, #32
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	2210      	movs	r2, #16
 80082bc:	e7b7      	b.n	800822e <_printf_i+0xd2>
 80082be:	064d      	lsls	r5, r1, #25
 80082c0:	bf48      	it	mi
 80082c2:	b29b      	uxthmi	r3, r3
 80082c4:	e7ef      	b.n	80082a6 <_printf_i+0x14a>
 80082c6:	4665      	mov	r5, ip
 80082c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80082cc:	fb02 3311 	mls	r3, r2, r1, r3
 80082d0:	5cc3      	ldrb	r3, [r0, r3]
 80082d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082d6:	460b      	mov	r3, r1
 80082d8:	2900      	cmp	r1, #0
 80082da:	d1f5      	bne.n	80082c8 <_printf_i+0x16c>
 80082dc:	e7b9      	b.n	8008252 <_printf_i+0xf6>
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	6825      	ldr	r5, [r4, #0]
 80082e2:	6961      	ldr	r1, [r4, #20]
 80082e4:	1d18      	adds	r0, r3, #4
 80082e6:	6010      	str	r0, [r2, #0]
 80082e8:	0628      	lsls	r0, r5, #24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	d501      	bpl.n	80082f2 <_printf_i+0x196>
 80082ee:	6019      	str	r1, [r3, #0]
 80082f0:	e002      	b.n	80082f8 <_printf_i+0x19c>
 80082f2:	066a      	lsls	r2, r5, #25
 80082f4:	d5fb      	bpl.n	80082ee <_printf_i+0x192>
 80082f6:	8019      	strh	r1, [r3, #0]
 80082f8:	2300      	movs	r3, #0
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	4665      	mov	r5, ip
 80082fe:	e7b9      	b.n	8008274 <_printf_i+0x118>
 8008300:	6813      	ldr	r3, [r2, #0]
 8008302:	1d19      	adds	r1, r3, #4
 8008304:	6011      	str	r1, [r2, #0]
 8008306:	681d      	ldr	r5, [r3, #0]
 8008308:	6862      	ldr	r2, [r4, #4]
 800830a:	2100      	movs	r1, #0
 800830c:	4628      	mov	r0, r5
 800830e:	f7f7 ff5f 	bl	80001d0 <memchr>
 8008312:	b108      	cbz	r0, 8008318 <_printf_i+0x1bc>
 8008314:	1b40      	subs	r0, r0, r5
 8008316:	6060      	str	r0, [r4, #4]
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	2300      	movs	r3, #0
 800831e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008322:	e7a7      	b.n	8008274 <_printf_i+0x118>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	462a      	mov	r2, r5
 8008328:	4639      	mov	r1, r7
 800832a:	4630      	mov	r0, r6
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d0aa      	beq.n	8008288 <_printf_i+0x12c>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	079b      	lsls	r3, r3, #30
 8008336:	d413      	bmi.n	8008360 <_printf_i+0x204>
 8008338:	68e0      	ldr	r0, [r4, #12]
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	4298      	cmp	r0, r3
 800833e:	bfb8      	it	lt
 8008340:	4618      	movlt	r0, r3
 8008342:	e7a3      	b.n	800828c <_printf_i+0x130>
 8008344:	2301      	movs	r3, #1
 8008346:	464a      	mov	r2, r9
 8008348:	4639      	mov	r1, r7
 800834a:	4630      	mov	r0, r6
 800834c:	47c0      	blx	r8
 800834e:	3001      	adds	r0, #1
 8008350:	d09a      	beq.n	8008288 <_printf_i+0x12c>
 8008352:	3501      	adds	r5, #1
 8008354:	68e3      	ldr	r3, [r4, #12]
 8008356:	9a03      	ldr	r2, [sp, #12]
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	42ab      	cmp	r3, r5
 800835c:	dcf2      	bgt.n	8008344 <_printf_i+0x1e8>
 800835e:	e7eb      	b.n	8008338 <_printf_i+0x1dc>
 8008360:	2500      	movs	r5, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f5      	b.n	8008354 <_printf_i+0x1f8>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1ac      	bne.n	80082c6 <_printf_i+0x16a>
 800836c:	7803      	ldrb	r3, [r0, #0]
 800836e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008372:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008376:	e76c      	b.n	8008252 <_printf_i+0xf6>
 8008378:	0800872d 	.word	0x0800872d
 800837c:	0800873e 	.word	0x0800873e

08008380 <memmove>:
 8008380:	4288      	cmp	r0, r1
 8008382:	b510      	push	{r4, lr}
 8008384:	eb01 0302 	add.w	r3, r1, r2
 8008388:	d807      	bhi.n	800839a <memmove+0x1a>
 800838a:	1e42      	subs	r2, r0, #1
 800838c:	4299      	cmp	r1, r3
 800838e:	d00a      	beq.n	80083a6 <memmove+0x26>
 8008390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008394:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008398:	e7f8      	b.n	800838c <memmove+0xc>
 800839a:	4283      	cmp	r3, r0
 800839c:	d9f5      	bls.n	800838a <memmove+0xa>
 800839e:	1881      	adds	r1, r0, r2
 80083a0:	1ad2      	subs	r2, r2, r3
 80083a2:	42d3      	cmn	r3, r2
 80083a4:	d100      	bne.n	80083a8 <memmove+0x28>
 80083a6:	bd10      	pop	{r4, pc}
 80083a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083b0:	e7f7      	b.n	80083a2 <memmove+0x22>
	...

080083b4 <_free_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4605      	mov	r5, r0
 80083b8:	2900      	cmp	r1, #0
 80083ba:	d045      	beq.n	8008448 <_free_r+0x94>
 80083bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c0:	1f0c      	subs	r4, r1, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfb8      	it	lt
 80083c6:	18e4      	addlt	r4, r4, r3
 80083c8:	f000 f8d2 	bl	8008570 <__malloc_lock>
 80083cc:	4a1f      	ldr	r2, [pc, #124]	; (800844c <_free_r+0x98>)
 80083ce:	6813      	ldr	r3, [r2, #0]
 80083d0:	4610      	mov	r0, r2
 80083d2:	b933      	cbnz	r3, 80083e2 <_free_r+0x2e>
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	6014      	str	r4, [r2, #0]
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083de:	f000 b8c8 	b.w	8008572 <__malloc_unlock>
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	d90c      	bls.n	8008400 <_free_r+0x4c>
 80083e6:	6821      	ldr	r1, [r4, #0]
 80083e8:	1862      	adds	r2, r4, r1
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bf04      	itt	eq
 80083ee:	681a      	ldreq	r2, [r3, #0]
 80083f0:	685b      	ldreq	r3, [r3, #4]
 80083f2:	6063      	str	r3, [r4, #4]
 80083f4:	bf04      	itt	eq
 80083f6:	1852      	addeq	r2, r2, r1
 80083f8:	6022      	streq	r2, [r4, #0]
 80083fa:	6004      	str	r4, [r0, #0]
 80083fc:	e7ec      	b.n	80083d8 <_free_r+0x24>
 80083fe:	4613      	mov	r3, r2
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	b10a      	cbz	r2, 8008408 <_free_r+0x54>
 8008404:	42a2      	cmp	r2, r4
 8008406:	d9fa      	bls.n	80083fe <_free_r+0x4a>
 8008408:	6819      	ldr	r1, [r3, #0]
 800840a:	1858      	adds	r0, r3, r1
 800840c:	42a0      	cmp	r0, r4
 800840e:	d10b      	bne.n	8008428 <_free_r+0x74>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	4401      	add	r1, r0
 8008414:	1858      	adds	r0, r3, r1
 8008416:	4282      	cmp	r2, r0
 8008418:	6019      	str	r1, [r3, #0]
 800841a:	d1dd      	bne.n	80083d8 <_free_r+0x24>
 800841c:	6810      	ldr	r0, [r2, #0]
 800841e:	6852      	ldr	r2, [r2, #4]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	4401      	add	r1, r0
 8008424:	6019      	str	r1, [r3, #0]
 8008426:	e7d7      	b.n	80083d8 <_free_r+0x24>
 8008428:	d902      	bls.n	8008430 <_free_r+0x7c>
 800842a:	230c      	movs	r3, #12
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	e7d3      	b.n	80083d8 <_free_r+0x24>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428a      	cmp	r2, r1
 8008436:	bf04      	itt	eq
 8008438:	6811      	ldreq	r1, [r2, #0]
 800843a:	6852      	ldreq	r2, [r2, #4]
 800843c:	6062      	str	r2, [r4, #4]
 800843e:	bf04      	itt	eq
 8008440:	1809      	addeq	r1, r1, r0
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	605c      	str	r4, [r3, #4]
 8008446:	e7c7      	b.n	80083d8 <_free_r+0x24>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	200000e8 	.word	0x200000e8

08008450 <_malloc_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	1ccd      	adds	r5, r1, #3
 8008454:	f025 0503 	bic.w	r5, r5, #3
 8008458:	3508      	adds	r5, #8
 800845a:	2d0c      	cmp	r5, #12
 800845c:	bf38      	it	cc
 800845e:	250c      	movcc	r5, #12
 8008460:	2d00      	cmp	r5, #0
 8008462:	4606      	mov	r6, r0
 8008464:	db01      	blt.n	800846a <_malloc_r+0x1a>
 8008466:	42a9      	cmp	r1, r5
 8008468:	d903      	bls.n	8008472 <_malloc_r+0x22>
 800846a:	230c      	movs	r3, #12
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	2000      	movs	r0, #0
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	f000 f87d 	bl	8008570 <__malloc_lock>
 8008476:	4a21      	ldr	r2, [pc, #132]	; (80084fc <_malloc_r+0xac>)
 8008478:	6814      	ldr	r4, [r2, #0]
 800847a:	4621      	mov	r1, r4
 800847c:	b991      	cbnz	r1, 80084a4 <_malloc_r+0x54>
 800847e:	4c20      	ldr	r4, [pc, #128]	; (8008500 <_malloc_r+0xb0>)
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	b91b      	cbnz	r3, 800848c <_malloc_r+0x3c>
 8008484:	4630      	mov	r0, r6
 8008486:	f000 f863 	bl	8008550 <_sbrk_r>
 800848a:	6020      	str	r0, [r4, #0]
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f000 f85e 	bl	8008550 <_sbrk_r>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d124      	bne.n	80084e2 <_malloc_r+0x92>
 8008498:	230c      	movs	r3, #12
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	4630      	mov	r0, r6
 800849e:	f000 f868 	bl	8008572 <__malloc_unlock>
 80084a2:	e7e4      	b.n	800846e <_malloc_r+0x1e>
 80084a4:	680b      	ldr	r3, [r1, #0]
 80084a6:	1b5b      	subs	r3, r3, r5
 80084a8:	d418      	bmi.n	80084dc <_malloc_r+0x8c>
 80084aa:	2b0b      	cmp	r3, #11
 80084ac:	d90f      	bls.n	80084ce <_malloc_r+0x7e>
 80084ae:	600b      	str	r3, [r1, #0]
 80084b0:	50cd      	str	r5, [r1, r3]
 80084b2:	18cc      	adds	r4, r1, r3
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f85c 	bl	8008572 <__malloc_unlock>
 80084ba:	f104 000b 	add.w	r0, r4, #11
 80084be:	1d23      	adds	r3, r4, #4
 80084c0:	f020 0007 	bic.w	r0, r0, #7
 80084c4:	1ac3      	subs	r3, r0, r3
 80084c6:	d0d3      	beq.n	8008470 <_malloc_r+0x20>
 80084c8:	425a      	negs	r2, r3
 80084ca:	50e2      	str	r2, [r4, r3]
 80084cc:	e7d0      	b.n	8008470 <_malloc_r+0x20>
 80084ce:	428c      	cmp	r4, r1
 80084d0:	684b      	ldr	r3, [r1, #4]
 80084d2:	bf16      	itet	ne
 80084d4:	6063      	strne	r3, [r4, #4]
 80084d6:	6013      	streq	r3, [r2, #0]
 80084d8:	460c      	movne	r4, r1
 80084da:	e7eb      	b.n	80084b4 <_malloc_r+0x64>
 80084dc:	460c      	mov	r4, r1
 80084de:	6849      	ldr	r1, [r1, #4]
 80084e0:	e7cc      	b.n	800847c <_malloc_r+0x2c>
 80084e2:	1cc4      	adds	r4, r0, #3
 80084e4:	f024 0403 	bic.w	r4, r4, #3
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d005      	beq.n	80084f8 <_malloc_r+0xa8>
 80084ec:	1a21      	subs	r1, r4, r0
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 f82e 	bl	8008550 <_sbrk_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d0cf      	beq.n	8008498 <_malloc_r+0x48>
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	e7db      	b.n	80084b4 <_malloc_r+0x64>
 80084fc:	200000e8 	.word	0x200000e8
 8008500:	200000ec 	.word	0x200000ec

08008504 <_realloc_r>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	4607      	mov	r7, r0
 8008508:	4614      	mov	r4, r2
 800850a:	460e      	mov	r6, r1
 800850c:	b921      	cbnz	r1, 8008518 <_realloc_r+0x14>
 800850e:	4611      	mov	r1, r2
 8008510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008514:	f7ff bf9c 	b.w	8008450 <_malloc_r>
 8008518:	b922      	cbnz	r2, 8008524 <_realloc_r+0x20>
 800851a:	f7ff ff4b 	bl	80083b4 <_free_r>
 800851e:	4625      	mov	r5, r4
 8008520:	4628      	mov	r0, r5
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008524:	f000 f826 	bl	8008574 <_malloc_usable_size_r>
 8008528:	42a0      	cmp	r0, r4
 800852a:	d20f      	bcs.n	800854c <_realloc_r+0x48>
 800852c:	4621      	mov	r1, r4
 800852e:	4638      	mov	r0, r7
 8008530:	f7ff ff8e 	bl	8008450 <_malloc_r>
 8008534:	4605      	mov	r5, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d0f2      	beq.n	8008520 <_realloc_r+0x1c>
 800853a:	4631      	mov	r1, r6
 800853c:	4622      	mov	r2, r4
 800853e:	f7ff fc11 	bl	8007d64 <memcpy>
 8008542:	4631      	mov	r1, r6
 8008544:	4638      	mov	r0, r7
 8008546:	f7ff ff35 	bl	80083b4 <_free_r>
 800854a:	e7e9      	b.n	8008520 <_realloc_r+0x1c>
 800854c:	4635      	mov	r5, r6
 800854e:	e7e7      	b.n	8008520 <_realloc_r+0x1c>

08008550 <_sbrk_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4c06      	ldr	r4, [pc, #24]	; (800856c <_sbrk_r+0x1c>)
 8008554:	2300      	movs	r3, #0
 8008556:	4605      	mov	r5, r0
 8008558:	4608      	mov	r0, r1
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	f7fb f834 	bl	80035c8 <_sbrk>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_sbrk_r+0x1a>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	b103      	cbz	r3, 800856a <_sbrk_r+0x1a>
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	2000c0ec 	.word	0x2000c0ec

08008570 <__malloc_lock>:
 8008570:	4770      	bx	lr

08008572 <__malloc_unlock>:
 8008572:	4770      	bx	lr

08008574 <_malloc_usable_size_r>:
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f18      	subs	r0, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfbc      	itt	lt
 800857e:	580b      	ldrlt	r3, [r1, r0]
 8008580:	18c0      	addlt	r0, r0, r3
 8008582:	4770      	bx	lr

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
