
robotoreV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d0c  08008d0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d14  08008d14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d14  08008d14  00018d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0fc  20000070  08008d8c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c16c  08008d8c  0002c16c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7f3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003602  00000000  00000000  0003c893  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  0003fe98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ef7  00000000  00000000  00042770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012804  00000000  00000000  00065667  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c94e6  00000000  00000000  00077e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce4  00000000  00000000  001413cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b2c 	.word	0x08008b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b2c 	.word	0x08008b2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	d1ed      	bne.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a8 	b.w	8001030 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_f2lz>:
 8000cf8:	ee07 0a90 	vmov	s15, r0
 8000cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d04:	d401      	bmi.n	8000d0a <__aeabi_f2lz+0x12>
 8000d06:	f000 b809 	b.w	8000d1c <__aeabi_f2ulz>
 8000d0a:	b508      	push	{r3, lr}
 8000d0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	f000 f804 	bl	8000d1c <__aeabi_f2ulz>
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	bd08      	pop	{r3, pc}

08000d1c <__aeabi_f2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	f7ff fc0b 	bl	8000538 <__aeabi_f2d>
 8000d22:	2200      	movs	r2, #0
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <__aeabi_f2ulz+0x40>)
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
 8000d2a:	f7ff fc5d 	bl	80005e8 <__aeabi_dmul>
 8000d2e:	f000 f981 	bl	8001034 <__aeabi_d2uiz>
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fbde 	bl	80004f4 <__aeabi_ui2d>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <__aeabi_f2ulz+0x44>)
 8000d3c:	f7ff fc54 	bl	80005e8 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4630      	mov	r0, r6
 8000d46:	4639      	mov	r1, r7
 8000d48:	f7ff fa96 	bl	8000278 <__aeabi_dsub>
 8000d4c:	f000 f972 	bl	8001034 <__aeabi_d2uiz>
 8000d50:	2200      	movs	r2, #0
 8000d52:	4623      	mov	r3, r4
 8000d54:	4310      	orrs	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4688      	mov	r8, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14b      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4615      	mov	r5, r2
 8000d76:	d967      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0720 	rsb	r7, r2, #32
 8000d82:	fa01 f302 	lsl.w	r3, r1, r2
 8000d86:	fa20 f707 	lsr.w	r7, r0, r7
 8000d8a:	4095      	lsls	r5, r2
 8000d8c:	ea47 0803 	orr.w	r8, r7, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d9c:	fa1f fc85 	uxth.w	ip, r5
 8000da0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000da4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da8:	fb07 f10c 	mul.w	r1, r7, ip
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18eb      	adds	r3, r5, r3
 8000db2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000db6:	f080 811b 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8118 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dc0:	3f02      	subs	r7, #2
 8000dc2:	442b      	add	r3, r5
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	192c      	adds	r4, r5, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8107 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	f240 8104 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dec:	3802      	subs	r0, #2
 8000dee:	442c      	add	r4, r5
 8000df0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000df4:	eba4 040c 	sub.w	r4, r4, ip
 8000df8:	2700      	movs	r7, #0
 8000dfa:	b11e      	cbz	r6, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c6 4300 	strd	r4, r3, [r6]
 8000e04:	4639      	mov	r1, r7
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0xbe>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80eb 	beq.w	8000fea <__udivmoddi4+0x286>
 8000e14:	2700      	movs	r7, #0
 8000e16:	e9c6 0100 	strd	r0, r1, [r6]
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	fab3 f783 	clz	r7, r3
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d147      	bne.n	8000eba <__udivmoddi4+0x156>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xd0>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 80fa 	bhi.w	8001028 <__udivmoddi4+0x2c4>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d0e0      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000e42:	e9c6 4800 	strd	r4, r8, [r6]
 8000e46:	e7dd      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000e48:	b902      	cbnz	r2, 8000e4c <__udivmoddi4+0xe8>
 8000e4a:	deff      	udf	#255	; 0xff
 8000e4c:	fab2 f282 	clz	r2, r2
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f040 808f 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e56:	1b49      	subs	r1, r1, r5
 8000e58:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5c:	fa1f f885 	uxth.w	r8, r5
 8000e60:	2701      	movs	r7, #1
 8000e62:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e70:	fb08 f10c 	mul.w	r1, r8, ip
 8000e74:	4299      	cmp	r1, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e78:	18eb      	adds	r3, r5, r3
 8000e7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	f200 80cd 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e86:	4684      	mov	ip, r0
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	b2a3      	uxth	r3, r4
 8000e8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e90:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e98:	fb08 f800 	mul.w	r8, r8, r0
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x14c>
 8000ea0:	192c      	adds	r4, r5, r4
 8000ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x14a>
 8000ea8:	45a0      	cmp	r8, r4
 8000eaa:	f200 80b6 	bhi.w	800101a <__udivmoddi4+0x2b6>
 8000eae:	4618      	mov	r0, r3
 8000eb0:	eba4 0408 	sub.w	r4, r4, r8
 8000eb4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb8:	e79f      	b.n	8000dfa <__udivmoddi4+0x96>
 8000eba:	f1c7 0c20 	rsb	ip, r7, #32
 8000ebe:	40bb      	lsls	r3, r7
 8000ec0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ec4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ec8:	fa01 f407 	lsl.w	r4, r1, r7
 8000ecc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ed0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ed4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ed8:	4325      	orrs	r5, r4
 8000eda:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ede:	0c2c      	lsrs	r4, r5, #16
 8000ee0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ee4:	fa1f fa8e 	uxth.w	sl, lr
 8000ee8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000eec:	fb09 f40a 	mul.w	r4, r9, sl
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ef6:	fa00 f107 	lsl.w	r1, r0, r7
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1e 0303 	adds.w	r3, lr, r3
 8000f00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f04:	f080 8087 	bcs.w	8001016 <__udivmoddi4+0x2b2>
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	f240 8084 	bls.w	8001016 <__udivmoddi4+0x2b2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	4473      	add	r3, lr
 8000f14:	1b1b      	subs	r3, r3, r4
 8000f16:	b2ad      	uxth	r5, r5
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f24:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f28:	45a2      	cmp	sl, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1e 0404 	adds.w	r4, lr, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	d26b      	bcs.n	800100e <__udivmoddi4+0x2aa>
 8000f36:	45a2      	cmp	sl, r4
 8000f38:	d969      	bls.n	800100e <__udivmoddi4+0x2aa>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	4474      	add	r4, lr
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	fba0 8902 	umull	r8, r9, r0, r2
 8000f46:	eba4 040a 	sub.w	r4, r4, sl
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c2      	mov	sl, r8
 8000f4e:	464b      	mov	r3, r9
 8000f50:	d354      	bcc.n	8000ffc <__udivmoddi4+0x298>
 8000f52:	d051      	beq.n	8000ff8 <__udivmoddi4+0x294>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d069      	beq.n	800102c <__udivmoddi4+0x2c8>
 8000f58:	ebb1 050a 	subs.w	r5, r1, sl
 8000f5c:	eb64 0403 	sbc.w	r4, r4, r3
 8000f60:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f64:	40fd      	lsrs	r5, r7
 8000f66:	40fc      	lsrs	r4, r7
 8000f68:	ea4c 0505 	orr.w	r5, ip, r5
 8000f6c:	e9c6 5400 	strd	r5, r4, [r6]
 8000f70:	2700      	movs	r7, #0
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000f74:	f1c2 0320 	rsb	r3, r2, #32
 8000f78:	fa20 f703 	lsr.w	r7, r0, r3
 8000f7c:	4095      	lsls	r5, r2
 8000f7e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f82:	fa21 f303 	lsr.w	r3, r1, r3
 8000f86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f8a:	4338      	orrs	r0, r7
 8000f8c:	0c01      	lsrs	r1, r0, #16
 8000f8e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f92:	fa1f f885 	uxth.w	r8, r5
 8000f96:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb07 f308 	mul.w	r3, r7, r8
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x256>
 8000faa:	1869      	adds	r1, r5, r1
 8000fac:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fb0:	d22f      	bcs.n	8001012 <__udivmoddi4+0x2ae>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d92d      	bls.n	8001012 <__udivmoddi4+0x2ae>
 8000fb6:	3f02      	subs	r7, #2
 8000fb8:	4429      	add	r1, r5
 8000fba:	1acb      	subs	r3, r1, r3
 8000fbc:	b281      	uxth	r1, r0
 8000fbe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fc2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fca:	fb00 f308 	mul.w	r3, r0, r8
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d907      	bls.n	8000fe2 <__udivmoddi4+0x27e>
 8000fd2:	1869      	adds	r1, r5, r1
 8000fd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fd8:	d217      	bcs.n	800100a <__udivmoddi4+0x2a6>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d915      	bls.n	800100a <__udivmoddi4+0x2a6>
 8000fde:	3802      	subs	r0, #2
 8000fe0:	4429      	add	r1, r5
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fe8:	e73b      	b.n	8000e62 <__udivmoddi4+0xfe>
 8000fea:	4637      	mov	r7, r6
 8000fec:	4630      	mov	r0, r6
 8000fee:	e709      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000ff0:	4607      	mov	r7, r0
 8000ff2:	e6e7      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6fb      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff8:	4541      	cmp	r1, r8
 8000ffa:	d2ab      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8000ffc:	ebb8 0a02 	subs.w	sl, r8, r2
 8001000:	eb69 020e 	sbc.w	r2, r9, lr
 8001004:	3801      	subs	r0, #1
 8001006:	4613      	mov	r3, r2
 8001008:	e7a4      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100a:	4660      	mov	r0, ip
 800100c:	e7e9      	b.n	8000fe2 <__udivmoddi4+0x27e>
 800100e:	4618      	mov	r0, r3
 8001010:	e795      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001012:	4667      	mov	r7, ip
 8001014:	e7d1      	b.n	8000fba <__udivmoddi4+0x256>
 8001016:	4681      	mov	r9, r0
 8001018:	e77c      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101a:	3802      	subs	r0, #2
 800101c:	442c      	add	r4, r5
 800101e:	e747      	b.n	8000eb0 <__udivmoddi4+0x14c>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	442b      	add	r3, r5
 8001026:	e72f      	b.n	8000e88 <__udivmoddi4+0x124>
 8001028:	4638      	mov	r0, r7
 800102a:	e708      	b.n	8000e3e <__udivmoddi4+0xda>
 800102c:	4637      	mov	r7, r6
 800102e:	e6e9      	b.n	8000e04 <__udivmoddi4+0xa0>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_d2uiz>:
 8001034:	004a      	lsls	r2, r1, #1
 8001036:	d211      	bcs.n	800105c <__aeabi_d2uiz+0x28>
 8001038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800103c:	d211      	bcs.n	8001062 <__aeabi_d2uiz+0x2e>
 800103e:	d50d      	bpl.n	800105c <__aeabi_d2uiz+0x28>
 8001040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001048:	d40e      	bmi.n	8001068 <__aeabi_d2uiz+0x34>
 800104a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800104e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001056:	fa23 f002 	lsr.w	r0, r3, r2
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001066:	d102      	bne.n	800106e <__aeabi_d2uiz+0x3a>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr

08001074 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 800107e:	2300      	movs	r3, #0
 8001080:	733b      	strb	r3, [r7, #12]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	217c      	movs	r1, #124	; 0x7c
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <lcd_cmd+0x2c>)
 8001094:	f004 fbd8 	bl	8005848 <HAL_I2C_Master_Transmit>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001b8 	.word	0x200001b8

080010a4 <lcd_data>:

void lcd_data(uint8_t data) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	733b      	strb	r3, [r7, #12]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2302      	movs	r3, #2
 80010c0:	217c      	movs	r1, #124	; 0x7c
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <lcd_data+0x2c>)
 80010c4:	f004 fbc0 	bl	8005848 <HAL_I2C_Master_Transmit>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200001b8 	.word	0x200001b8

080010d4 <lcd_init>:

void lcd_init(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 80010d8:	2028      	movs	r0, #40	; 0x28
 80010da:	f002 fe31 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x38);
 80010de:	2038      	movs	r0, #56	; 0x38
 80010e0:	f7ff ffc8 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f002 fe2b 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x39);
 80010ea:	2039      	movs	r0, #57	; 0x39
 80010ec:	f7ff ffc2 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f002 fe25 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x14);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f7ff ffbc 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f002 fe1f 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x70);
 8001102:	2070      	movs	r0, #112	; 0x70
 8001104:	f7ff ffb6 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f002 fe19 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x56);
 800110e:	2056      	movs	r0, #86	; 0x56
 8001110:	f7ff ffb0 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f002 fe13 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x6C);
 800111a:	206c      	movs	r0, #108	; 0x6c
 800111c:	f7ff ffaa 	bl	8001074 <lcd_cmd>
	HAL_Delay(200);
 8001120:	20c8      	movs	r0, #200	; 0xc8
 8001122:	f002 fe0d 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x38);
 8001126:	2038      	movs	r0, #56	; 0x38
 8001128:	f7ff ffa4 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f002 fe07 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x0C);
 8001132:	200c      	movs	r0, #12
 8001134:	f7ff ff9e 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f002 fe01 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x01);
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff ff98 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f002 fdfb 	bl	8003d40 <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <lcd_clear>:

void lcd_clear(){
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ff8e 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f002 fdf1 	bl	8003d40 <HAL_Delay>
	lcd_cmd(0x02);
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff ff88 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f002 fdeb 	bl	8003d40 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <lcd_locate>:

void lcd_locate(int x, int y) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff72 	bl	8001074 <lcd_cmd>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_print>:

void lcd_print(const char *str) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80011a0:	e007      	b.n	80011b2 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff7c 	bl	80010a4 <lcd_data>
			str++;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f3      	bne.n	80011a2 <lcd_print+0xa>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 80011c2:	b40f      	push	{r0, r1, r2, r3}
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 80011ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ce:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 f8c2 	bl	8008360 <vsiprintf>
 80011dc:	4603      	mov	r3, r0
 80011de:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 80011e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dd03      	ble.n	80011f0 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffd4 	bl	8001198 <lcd_print>
	}

	return ret;
 80011f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fe:	b004      	add	sp, #16
 8001200:	4770      	bx	lr

08001202 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001202:	b580      	push	{r7, lr}
 8001204:	b088      	sub	sp, #32
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800120c:	f003 fe2e 	bl	8004e6c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fee4 	bl	8004ffc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8001234:	f003 fe3c 	bl	8004eb0 <HAL_FLASH_Lock>
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 800124a:	1dfa      	adds	r2, r7, #7
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <INA260_read+0x48>)
 8001256:	f004 faf7 	bl	8005848 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	2364      	movs	r3, #100	; 0x64
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <INA260_read+0x48>)
 8001268:	f004 fbec 	bl	8005a44 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	81fb      	strh	r3, [r7, #14]
	return val;
 800127c:	89fb      	ldrh	r3, [r7, #14]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000164 	.word	0x20000164

0800128c <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	gpio_set();
 8001290:	f000 ff24 	bl	80020dc <gpio_set>
	lcd_init();
 8001294:	f7ff ff1e 	bl	80010d4 <lcd_init>
		lcd_locate(0,1);
		lcd_print("Failed");
	}
	*/
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001298:	213c      	movs	r1, #60	; 0x3c
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <init+0x68>)
 800129c:	f005 ff0e 	bl	80070bc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80012a0:	213c      	movs	r1, #60	; 0x3c
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <init+0x6c>)
 80012a4:	f005 ff0a 	bl	80070bc <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80012a8:	2100      	movs	r1, #0
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <init+0x70>)
 80012ac:	f005 fe36 	bl	8006f1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80012b0:	2104      	movs	r1, #4
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <init+0x70>)
 80012b4:	f005 fe32 	bl	8006f1c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <init+0x70>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <init+0x70>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <init+0x74>)
 80012cc:	f005 fe26 	bl	8006f1c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <init+0x74>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2200      	movs	r2, #0
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);//[:]
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <init+0x78>)
 80012da:	f005 fdd0 	bl	8006e7e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <init+0x7c>)
 80012e0:	f005 fdcd 	bl	8006e7e <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 80012e4:	220e      	movs	r2, #14
 80012e6:	4909      	ldr	r1, [pc, #36]	; (800130c <init+0x80>)
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <init+0x84>)
 80012ea:	f002 fd8f 	bl	8003e0c <HAL_ADC_Start_DMA>

	//log_adress = start_adress_sector7;
	//plan_velo_adress = start_adress_sector10;

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003e8 	.word	0x200003e8
 80012f8:	20000124 	.word	0x20000124
 80012fc:	20000468 	.word	0x20000468
 8001300:	20000428 	.word	0x20000428
 8001304:	200003a8 	.word	0x200003a8
 8001308:	200004a8 	.word	0x200004a8
 800130c:	2000032c 	.word	0x2000032c
 8001310:	200002a4 	.word	0x200002a4

08001314 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	//uint64_t enc_cnt_10ms;


	if(htim->Instance == htim6.Instance){	//1ms
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b92      	ldr	r3, [pc, #584]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 811c 	bne.w	8001562 <HAL_TIM_PeriodElapsedCallback+0x24e>

		cnt_sw++;
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001334:	701a      	strb	r2, [r3, #0]
		if(cnt_sw >= 250) cnt_sw = 30;
 8001336:	4b8e      	ldr	r3, [pc, #568]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2bf9      	cmp	r3, #249	; 0xf9
 800133c:	d902      	bls.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x30>
 800133e:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001340:	221e      	movs	r2, #30
 8001342:	701a      	strb	r2, [r3, #0]


		getEncoder();
 8001344:	f001 f9cc 	bl	80026e0 <getEncoder>
		posPID();
 8001348:	f000 ff42 	bl	80021d0 <posPID>
		velPID(target_vel);
 800134c:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	f001 f809 	bl	800236c <velPID>
		//read_gyro_data();
		//read_accel_data();
		ADval_get();
 800135a:	f001 f89b 	bl	8002494 <ADval_get>
		ADval_sum();
 800135e:	f001 f963 	bl	8002628 <ADval_sum>
//		Cross_Check();
		Maker_Check();
 8001362:	f001 f8f5 	bl	8002550 <Maker_Check>


		timer++;
 8001366:	4b84      	ldr	r3, [pc, #528]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a82      	ldr	r2, [pc, #520]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800136e:	6013      	str	r3, [r2, #0]
		}
		else{
			Sensor_st = 0;
		}*/

		if(main_pattern == 8){
 8001370:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d13d      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0xe0>

			motor_pwmL = order_velL + order_posL;
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	4b7f      	ldr	r3, [pc, #508]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
			motor_pwmR = order_velR + order_posR;
 800138e:	4b7f      	ldr	r3, [pc, #508]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
			Motorset((int16_t)(order_velL + order_posL), (int16_t)(order_velR + order_posR), 0);
 80013a4:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b8:	ee17 3a90 	vmov	r3, s15
 80013bc:	b218      	sxth	r0, r3
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x278>)
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	4b72      	ldr	r3, [pc, #456]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	4619      	mov	r1, r3
 80013dc:	f000 fe98 	bl	8002110 <Motorset>
			/*if(MR_flag == 1  ){
				MR_flag = 0 ;


			}else*/
			if(GL_flag == 18 ){
 80013e0:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d105      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0xe0>
				main_pattern = 11;
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80013ea:	220b      	movs	r2, #11
 80013ec:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
			}

		}


		if(main_pattern == 9){
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d13b      	bne.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x160>

			motor_pwmL = order_velL + order_posL;
 80013fc:	4b60      	ldr	r3, [pc, #384]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800140e:	edc3 7a00 	vstr	s15, [r3]
			motor_pwmR = order_velR + order_posR;
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001424:	edc3 7a00 	vstr	s15, [r3]
			//Motorset((int16_t)(order_velL + order_posL), (int16_t)(order_velR + order_posR), 0);
			Motorset((int16_t)(160 + order_posL), (int16_t)(160 + order_posR), 0);
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800159c <HAL_TIM_PeriodElapsedCallback+0x288>
 8001432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b218      	sxth	r0, r3
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800159c <HAL_TIM_PeriodElapsedCallback+0x288>
 800144a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21b      	sxth	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	f000 fe58 	bl	8002110 <Motorset>
			/*if(MR_flag == 1  ){
				MR_flag = 0 ;


			}else*/
			if(GL_flag >= 18 ){
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b11      	cmp	r3, #17
 8001466:	dd05      	ble.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x160>
				main_pattern = 11;
 8001468:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 800146a:	220b      	movs	r2, #11
 800146c:	701a      	strb	r2, [r3, #0]
				timer = 0;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

		}



		if(main_pattern == 10){
 8001474:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b0a      	cmp	r3, #10
 800147a:	d13b      	bne.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x1e0>

			motor_pwmL = order_velL + order_posL;
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800148e:	edc3 7a00 	vstr	s15, [r3]
			motor_pwmR = order_velR + order_posR;
 8001492:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
			//Motorset((int16_t)(order_velL + order_posL), (int16_t)(order_velR + order_posR), 0);
			Motorset((int16_t)(200 + order_posL), (int16_t)(200 + order_posR), 0);
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80015a0 <HAL_TIM_PeriodElapsedCallback+0x28c>
 80014b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ba:	ee17 3a90 	vmov	r3, s15
 80014be:	b218      	sxth	r0, r3
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015a0 <HAL_TIM_PeriodElapsedCallback+0x28c>
 80014ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d2:	ee17 3a90 	vmov	r3, s15
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	f000 fe18 	bl	8002110 <Motorset>
			/*if(MR_flag == 1  ){
				MR_flag = 0 ;


			}else*/
			if(GL_flag == 18 ){
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d105      	bne.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				main_pattern = 11;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014ea:	220b      	movs	r2, #11
 80014ec:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			}

		}

		 if(main_pattern == 11){
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0b      	cmp	r3, #11
 80014fa:	d11a      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x21e>
			Motorset((int16_t)(order_posL), (int16_t)(order_posR), 0);
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001506:	ee17 3a90 	vmov	r3, s15
 800150a:	b218      	sxth	r0, r3
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001516:	ee17 3a90 	vmov	r3, s15
 800151a:	b21b      	sxth	r3, r3
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	f000 fdf6 	bl	8002110 <Motorset>
			if(timer >= 50){
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b31      	cmp	r3, #49	; 0x31
 800152a:	dd02      	ble.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x21e>
				main_pattern = 12;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 800152e:	220c      	movs	r2, #12
 8001530:	701a      	strb	r2, [r3, #0]
			}
		}
		if(main_pattern == 12){
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d113      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x24e>
			Motorset((int16_t)(order_posL), (int16_t)(order_posR), 0);
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001544:	ee17 3a90 	vmov	r3, s15
 8001548:	b218      	sxth	r0, r3
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001554:	ee17 3a90 	vmov	r3, s15
 8001558:	b21b      	sxth	r3, r3
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f000 fdd7 	bl	8002110 <Motorset>
		}

	}


}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200003a8 	.word	0x200003a8
 8001570:	2000010b 	.word	0x2000010b
 8001574:	20000500 	.word	0x20000500
 8001578:	200000e8 	.word	0x200000e8
 800157c:	200000ec 	.word	0x200000ec
 8001580:	20000094 	.word	0x20000094
 8001584:	20000090 	.word	0x20000090
 8001588:	2000009c 	.word	0x2000009c
 800158c:	20000098 	.word	0x20000098
 8001590:	2000008c 	.word	0x2000008c
 8001594:	200000a0 	.word	0x200000a0
 8001598:	20000100 	.word	0x20000100
 800159c:	43200000 	.word	0x43200000
 80015a0:	43480000 	.word	0x43480000

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f002 fb58 	bl	8003c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f822 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 fcac 	bl	8001f0c <MX_GPIO_Init>
  MX_DMA_Init();
 80015b4:	f000 fc8a 	bl	8001ecc <MX_DMA_Init>
  MX_ADC1_Init();
 80015b8:	f000 f886 	bl	80016c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015bc:	f000 f98c 	bl	80018d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015c0:	f000 f9b8 	bl	8001934 <MX_I2C2_Init>
  MX_SPI3_Init();
 80015c4:	f000 f9e4 	bl	8001990 <MX_SPI3_Init>
  MX_TIM1_Init();
 80015c8:	f000 fa18 	bl	80019fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80015cc:	f000 fa6e 	bl	8001aac <MX_TIM2_Init>
  MX_TIM3_Init();
 80015d0:	f000 fac4 	bl	8001b5c <MX_TIM3_Init>
  MX_TIM8_Init();
 80015d4:	f000 fba8 	bl	8001d28 <MX_TIM8_Init>
  MX_TIM12_Init();
 80015d8:	f000 fbfe 	bl	8001dd8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80015dc:	f000 fc4c 	bl	8001e78 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80015e0:	f000 fb36 	bl	8001c50 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015e4:	f000 fb6a 	bl	8001cbc <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  init();
 80015e8:	f7ff fe50 	bl	800128c <init>


  while (1)
  {
	  setup();
 80015ec:	f001 f970 	bl	80028d0 <setup>
 80015f0:	e7fc      	b.n	80015ec <main+0x48>
	...

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	; 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2230      	movs	r2, #48	; 0x30
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f006 fe8d 	bl	8008322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <SystemClock_Config+0xcc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <SystemClock_Config+0xcc>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <SystemClock_Config+0xcc>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <SystemClock_Config+0xd0>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <SystemClock_Config+0xd0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001650:	2301      	movs	r3, #1
 8001652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165a:	2302      	movs	r3, #2
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001664:	2306      	movs	r3, #6
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001668:	23a8      	movs	r3, #168	; 0xa8
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001670:	2304      	movs	r3, #4
 8001672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f004 ff35 	bl	80064e8 <HAL_RCC_OscConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001684:	f000 fd22 	bl	80020cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001688:	230f      	movs	r3, #15
 800168a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	2302      	movs	r3, #2
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2105      	movs	r1, #5
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 f98e 	bl	80069c8 <HAL_RCC_ClockConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016b2:	f000 fd0b 	bl	80020cc <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	; 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016da:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <MX_ADC1_Init+0x204>)
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <MX_ADC1_Init+0x208>)
 80016de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016e0:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <MX_ADC1_Init+0x204>)
 80016e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e8:	4b78      	ldr	r3, [pc, #480]	; (80018cc <MX_ADC1_Init+0x204>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016ee:	4b77      	ldr	r3, [pc, #476]	; (80018cc <MX_ADC1_Init+0x204>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016f4:	4b75      	ldr	r3, [pc, #468]	; (80018cc <MX_ADC1_Init+0x204>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016fa:	4b74      	ldr	r3, [pc, #464]	; (80018cc <MX_ADC1_Init+0x204>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <MX_ADC1_Init+0x204>)
 8001704:	2200      	movs	r2, #0
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <MX_ADC1_Init+0x204>)
 800170a:	4a72      	ldr	r2, [pc, #456]	; (80018d4 <MX_ADC1_Init+0x20c>)
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <MX_ADC1_Init+0x204>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <MX_ADC1_Init+0x204>)
 8001716:	220e      	movs	r2, #14
 8001718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800171a:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <MX_ADC1_Init+0x204>)
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001722:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <MX_ADC1_Init+0x204>)
 8001724:	2201      	movs	r2, #1
 8001726:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001728:	4868      	ldr	r0, [pc, #416]	; (80018cc <MX_ADC1_Init+0x204>)
 800172a:	f002 fb2b 	bl	8003d84 <HAL_ADC_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001734:	f000 fcca 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001738:	2300      	movs	r3, #0
 800173a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001740:	2302      	movs	r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4860      	ldr	r0, [pc, #384]	; (80018cc <MX_ADC1_Init+0x204>)
 800174a:	f002 fc6f 	bl	800402c <HAL_ADC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001754:	f000 fcba 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001758:	2301      	movs	r3, #1
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	4859      	ldr	r0, [pc, #356]	; (80018cc <MX_ADC1_Init+0x204>)
 8001766:	f002 fc61 	bl	800402c <HAL_ADC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001770:	f000 fcac 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001774:	2302      	movs	r3, #2
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001778:	2303      	movs	r3, #3
 800177a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4852      	ldr	r0, [pc, #328]	; (80018cc <MX_ADC1_Init+0x204>)
 8001782:	f002 fc53 	bl	800402c <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800178c:	f000 fc9e 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001790:	2303      	movs	r3, #3
 8001792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	4619      	mov	r1, r3
 800179c:	484b      	ldr	r0, [pc, #300]	; (80018cc <MX_ADC1_Init+0x204>)
 800179e:	f002 fc45 	bl	800402c <HAL_ADC_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80017a8:	f000 fc90 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017b0:	2305      	movs	r3, #5
 80017b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	4844      	ldr	r0, [pc, #272]	; (80018cc <MX_ADC1_Init+0x204>)
 80017ba:	f002 fc37 	bl	800402c <HAL_ADC_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80017c4:	f000 fc82 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017c8:	2305      	movs	r3, #5
 80017ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017cc:	2306      	movs	r3, #6
 80017ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	483d      	ldr	r0, [pc, #244]	; (80018cc <MX_ADC1_Init+0x204>)
 80017d6:	f002 fc29 	bl	800402c <HAL_ADC_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80017e0:	f000 fc74 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017e4:	2306      	movs	r3, #6
 80017e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80017e8:	2307      	movs	r3, #7
 80017ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4836      	ldr	r0, [pc, #216]	; (80018cc <MX_ADC1_Init+0x204>)
 80017f2:	f002 fc1b 	bl	800402c <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017fc:	f000 fc66 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001800:	2307      	movs	r3, #7
 8001802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001804:	2308      	movs	r3, #8
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	482f      	ldr	r0, [pc, #188]	; (80018cc <MX_ADC1_Init+0x204>)
 800180e:	f002 fc0d 	bl	800402c <HAL_ADC_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001818:	f000 fc58 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800181c:	2308      	movs	r3, #8
 800181e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001820:	2309      	movs	r3, #9
 8001822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <MX_ADC1_Init+0x204>)
 800182a:	f002 fbff 	bl	800402c <HAL_ADC_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001834:	f000 fc4a 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001838:	2309      	movs	r3, #9
 800183a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800183c:	230a      	movs	r3, #10
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4821      	ldr	r0, [pc, #132]	; (80018cc <MX_ADC1_Init+0x204>)
 8001846:	f002 fbf1 	bl	800402c <HAL_ADC_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001850:	f000 fc3c 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001854:	230e      	movs	r3, #14
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001858:	230b      	movs	r3, #11
 800185a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	481a      	ldr	r0, [pc, #104]	; (80018cc <MX_ADC1_Init+0x204>)
 8001862:	f002 fbe3 	bl	800402c <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800186c:	f000 fc2e 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001870:	230f      	movs	r3, #15
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001874:	230c      	movs	r3, #12
 8001876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_ADC1_Init+0x204>)
 800187e:	f002 fbd5 	bl	800402c <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001888:	f000 fc20 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800188c:	230c      	movs	r3, #12
 800188e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001890:	230d      	movs	r3, #13
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_ADC1_Init+0x204>)
 800189a:	f002 fbc7 	bl	800402c <HAL_ADC_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80018a4:	f000 fc12 	bl	80020cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018a8:	230d      	movs	r3, #13
 80018aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80018ac:	230e      	movs	r3, #14
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_ADC1_Init+0x204>)
 80018b6:	f002 fbb9 	bl	800402c <HAL_ADC_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80018c0:	f000 fc04 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002a4 	.word	0x200002a4
 80018d0:	40012000 	.word	0x40012000
 80018d4:	0f000001 	.word	0x0f000001

080018d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_I2C1_Init+0x50>)
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <MX_I2C1_Init+0x54>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_I2C1_Init+0x50>)
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_I2C1_Init+0x58>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_I2C1_Init+0x50>)
 8001916:	f003 fe5f 	bl	80055d8 <HAL_I2C_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001920:	f000 fbd4 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000164 	.word	0x20000164
 800192c:	40005400 	.word	0x40005400
 8001930:	00061a80 	.word	0x00061a80

08001934 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_I2C2_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MX_I2C2_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_I2C2_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_I2C2_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_I2C2_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_I2C2_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_I2C2_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_I2C2_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_I2C2_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_I2C2_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_I2C2_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_I2C2_Init+0x50>)
 8001972:	f003 fe31 	bl	80055d8 <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 fba6 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200001b8 	.word	0x200001b8
 8001988:	40005800 	.word	0x40005800
 800198c:	000186a0 	.word	0x000186a0

08001990 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_SPI3_Init+0x64>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <MX_SPI3_Init+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_SPI3_Init+0x64>)
 800199c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019c4:	2220      	movs	r2, #32
 80019c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019dc:	220a      	movs	r2, #10
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019e2:	f005 f9bd 	bl	8006d60 <HAL_SPI_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80019ec:	f000 fb6e 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000024c 	.word	0x2000024c
 80019f8:	40003c00 	.word	0x40003c00

080019fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 fc89 	bl	8008322 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <MX_TIM1_Init+0xac>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a44:	2303      	movs	r3, #3
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a70:	f005 fa92 	bl	8006f98 <HAL_TIM_Encoder_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a7a:	f000 fb27 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_TIM1_Init+0xa8>)
 8001a8c:	f005 ffba 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a96:	f000 fb19 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3730      	adds	r7, #48	; 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200003e8 	.word	0x200003e8
 8001aa8:	40010000 	.word	0x40010000

08001aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001ae4:	f241 0267 	movw	r2, #4199	; 0x1067
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001af6:	4818      	ldr	r0, [pc, #96]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001af8:	f005 f9e5 	bl	8006ec6 <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b02:	f000 fae3 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	4619      	mov	r1, r3
 8001b14:	4810      	ldr	r0, [pc, #64]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001b16:	f005 ff75 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b20:	f000 fad4 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001b3c:	f005 fbfe 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b46:	f000 fac1 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b4a:	4803      	ldr	r0, [pc, #12]	; (8001b58 <MX_TIM2_Init+0xac>)
 8001b4c:	f001 fe04 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8001b50:	bf00      	nop
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000428 	.word	0x20000428

08001b5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001b80:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <MX_TIM3_Init+0xf0>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001b92:	f241 0267 	movw	r2, #4199	; 0x1067
 8001b96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ba4:	4828      	ldr	r0, [pc, #160]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001ba6:	f005 f98e 	bl	8006ec6 <HAL_TIM_PWM_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 fa8c 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4821      	ldr	r0, [pc, #132]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001bc4:	f005 ff1e 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bce:	f000 fa7d 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001bea:	f005 fba7 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001bf4:	f000 fa6a 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4812      	ldr	r0, [pc, #72]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001c00:	f005 fb9c 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c0a:	f000 fa5f 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2208      	movs	r2, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001c16:	f005 fb91 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c20:	f000 fa54 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	220c      	movs	r2, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001c2c:	f005 fb86 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c36:	f000 fa49 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM3_Init+0xec>)
 8001c3c:	f001 fd8c 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000020c 	.word	0x2000020c
 8001c4c:	40000400 	.word	0x40000400

08001c50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c62:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c66:	2213      	movs	r2, #19
 8001c68:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c72:	f241 0267 	movw	r2, #4199	; 0x1067
 8001c76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c80:	f005 f8d2 	bl	8006e28 <HAL_TIM_Base_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c8a:	f000 fa1f 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_TIM6_Init+0x64>)
 8001c9c:	f005 feb2 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ca6:	f000 fa11 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200003a8 	.word	0x200003a8
 8001cb8:	40001000 	.word	0x40001000

08001cbc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <MX_TIM7_Init+0x68>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001cd2:	22a7      	movs	r2, #167	; 0xa7
 8001cd4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001cde:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ce2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001cec:	f005 f89c 	bl	8006e28 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cf6:	f000 f9e9 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_TIM7_Init+0x64>)
 8001d08:	f005 fe7c 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d12:	f000 f9db 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200004a8 	.word	0x200004a8
 8001d24:	40001400 	.word	0x40001400

08001d28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f006 faf3 	bl	8008322 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <MX_TIM8_Init+0xac>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d70:	2303      	movs	r3, #3
 8001d72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d74:	2302      	movs	r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001d9c:	f005 f8fc 	bl	8006f98 <HAL_TIM_Encoder_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001da6:	f000 f991 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <MX_TIM8_Init+0xa8>)
 8001db8:	f005 fe24 	bl	8007a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001dc2:	f000 f983 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3730      	adds	r7, #48	; 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000124 	.word	0x20000124
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <MX_TIM12_Init+0x9c>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e04:	f240 3247 	movw	r2, #839	; 0x347
 8001e08:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e18:	f005 f855 	bl	8006ec6 <HAL_TIM_PWM_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001e22:	f000 f953 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	; 0x60
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e3e:	f005 fa7d 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e48:	f000 f940 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e54:	f005 fa72 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001e5e:	f000 f935 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e64:	f001 fc78 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000468 	.word	0x20000468
 8001e74:	40001800 	.word	0x40001800

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f005 fe38 	bl	8007b24 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 f907 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002ec 	.word	0x200002ec
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_DMA_Init+0x3c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <MX_DMA_Init+0x3c>)
 8001edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_DMA_Init+0x3c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	2038      	movs	r0, #56	; 0x38
 8001ef4:	f002 fc15 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ef8:	2038      	movs	r0, #56	; 0x38
 8001efa:	f002 fc2e 	bl	800475a <HAL_NVIC_EnableIRQ>

}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <MX_GPIO_Init+0x1a8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f242 0104 	movw	r1, #8196	; 0x2004
 8001fb4:	4840      	ldr	r0, [pc, #256]	; (80020b8 <MX_GPIO_Init+0x1ac>)
 8001fb6:	f003 fadd 	bl	8005574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001fc0:	483e      	ldr	r0, [pc, #248]	; (80020bc <MX_GPIO_Init+0x1b0>)
 8001fc2:	f003 fad7 	bl	8005574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2104      	movs	r1, #4
 8001fca:	483d      	ldr	r0, [pc, #244]	; (80020c0 <MX_GPIO_Init+0x1b4>)
 8001fcc:	f003 fad2 	bl	8005574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001fd0:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001fd4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <MX_GPIO_Init+0x1b8>)
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4838      	ldr	r0, [pc, #224]	; (80020c8 <MX_GPIO_Init+0x1bc>)
 8001fe6:	f003 f92b 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 8001fea:	f242 0304 	movw	r3, #8196	; 0x2004
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	482d      	ldr	r0, [pc, #180]	; (80020b8 <MX_GPIO_Init+0x1ac>)
 8002004:	f003 f91c 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <MX_GPIO_Init+0x1b8>)
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4826      	ldr	r0, [pc, #152]	; (80020b8 <MX_GPIO_Init+0x1ac>)
 800201e:	f003 f90f 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002030:	2302      	movs	r3, #2
 8002032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4820      	ldr	r0, [pc, #128]	; (80020bc <MX_GPIO_Init+0x1b0>)
 800203c:	f003 f900 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4818      	ldr	r0, [pc, #96]	; (80020bc <MX_GPIO_Init+0x1b0>)
 800205a:	f003 f8f1 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800205e:	2304      	movs	r3, #4
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4812      	ldr	r0, [pc, #72]	; (80020c0 <MX_GPIO_Init+0x1b4>)
 8002076:	f003 f8e3 	bl	8005240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2006      	movs	r0, #6
 8002080:	f002 fb4f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002084:	2006      	movs	r0, #6
 8002086:	f002 fb68 	bl	800475a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2007      	movs	r0, #7
 8002090:	f002 fb47 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002094:	2007      	movs	r0, #7
 8002096:	f002 fb60 	bl	800475a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2028      	movs	r0, #40	; 0x28
 80020a0:	f002 fb3f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020a4:	2028      	movs	r0, #40	; 0x28
 80020a6:	f002 fb58 	bl	800475a <HAL_NVIC_EnableIRQ>

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40020800 	.word	0x40020800

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <gpio_set>:
float target_vel;
int i_vel_clear_flag;
int i_pos_clear_flag;
float mon_def_pos = 0;

void gpio_set(void){
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	CS_SET;
 80020e0:	2201      	movs	r2, #1
 80020e2:	2104      	movs	r1, #4
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <gpio_set+0x2c>)
 80020e6:	f003 fa45 	bl	8005574 <HAL_GPIO_WritePin>
	MR_SET;
 80020ea:	2201      	movs	r2, #1
 80020ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f0:	4806      	ldr	r0, [pc, #24]	; (800210c <gpio_set+0x30>)
 80020f2:	f003 fa3f 	bl	8005574 <HAL_GPIO_WritePin>
	ML_SET;
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <gpio_set+0x30>)
 80020fe:	f003 fa39 	bl	8005574 <HAL_GPIO_WritePin>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40020000 	.word	0x40020000

08002110 <Motorset>:

void Motorset(int16_t motorL, int16_t motorR, uint8_t stop) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	70fb      	strb	r3, [r7, #3]

	int16_t pwmL_out,pwmR_out;

	if(motorR >= 0) {
 8002122:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db08      	blt.n	800213c <Motorset+0x2c>
		pwmR_out = motorR;
 800212a:	88bb      	ldrh	r3, [r7, #4]
 800212c:	81bb      	strh	r3, [r7, #12]
		MR_RESET;
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002134:	4824      	ldr	r0, [pc, #144]	; (80021c8 <Motorset+0xb8>)
 8002136:	f003 fa1d 	bl	8005574 <HAL_GPIO_WritePin>
 800213a:	e009      	b.n	8002150 <Motorset+0x40>
	}
	else {
		pwmR_out = motorR * (-1);
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	425b      	negs	r3, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	81bb      	strh	r3, [r7, #12]
		MR_SET;
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214a:	481f      	ldr	r0, [pc, #124]	; (80021c8 <Motorset+0xb8>)
 800214c:	f003 fa12 	bl	8005574 <HAL_GPIO_WritePin>
	}

	if(motorL >= 0) {
 8002150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db08      	blt.n	800216a <Motorset+0x5a>
		pwmL_out = motorL;
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	81fb      	strh	r3, [r7, #14]
		ML_RESET;
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002162:	4819      	ldr	r0, [pc, #100]	; (80021c8 <Motorset+0xb8>)
 8002164:	f003 fa06 	bl	8005574 <HAL_GPIO_WritePin>
 8002168:	e009      	b.n	800217e <Motorset+0x6e>
	}
	else {
		pwmL_out = motorL*(-1) ;
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	425b      	negs	r3, r3
 800216e:	b29b      	uxth	r3, r3
 8002170:	81fb      	strh	r3, [r7, #14]
		ML_SET;
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4813      	ldr	r0, [pc, #76]	; (80021c8 <Motorset+0xb8>)
 800217a:	f003 f9fb 	bl	8005574 <HAL_GPIO_WritePin>
	}

	if(pwmR_out > COUNTER_PERIOD_TIM12) pwmR_out = 839;
 800217e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002182:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8002186:	db02      	blt.n	800218e <Motorset+0x7e>
 8002188:	f240 3347 	movw	r3, #839	; 0x347
 800218c:	81bb      	strh	r3, [r7, #12]
	if(pwmL_out > COUNTER_PERIOD_TIM12) pwmL_out = 839;
 800218e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002192:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8002196:	db02      	blt.n	800219e <Motorset+0x8e>
 8002198:	f240 3347 	movw	r3, #839	; 0x347
 800219c:	81fb      	strh	r3, [r7, #14]

	if(stop == 1) {
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d103      	bne.n	80021ac <Motorset+0x9c>
		pwmR_out = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	81bb      	strh	r3, [r7, #12]
		pwmL_out = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, pwmR_out);
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <Motorset+0xbc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwmL_out);
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <Motorset+0xbc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38

}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40020000 	.word	0x40020000
 80021cc:	20000468 	.word	0x20000468

080021d0 <posPID>:



void posPID(void) {
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0

	float p_pos, d_pos;
	static float i_pos;
	float kp_pos = 0.025f, ki_pos = 0.004f/*0.004f*/, kd_pos = 0.002f/*0.008f*/;
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <posPID+0x158>)
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <posPID+0x15c>)
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b54      	ldr	r3, [pc, #336]	; (8002330 <posPID+0x160>)
 80021e0:	60fb      	str	r3, [r7, #12]
	static float def_pos[] = {0.0f, 0.0f};

	if(i_pos_clear_flag == 1){
 80021e2:	4b54      	ldr	r3, [pc, #336]	; (8002334 <posPID+0x164>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d106      	bne.n	80021f8 <posPID+0x28>
		i_pos = 0;
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <posPID+0x168>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
		i_pos_clear_flag = 0;
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <posPID+0x164>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
	}

	//def_pos[0] = ( ((float)line_senLLL * 1.6f) + ((float)line_senLL * 1.25f) + (float)line_senL) - ((float)line_senR + ((float)line_senRR * 1.25f) + ((float)line_senRRR * 1.6f)); //1.25 1.6
	def_pos[0] = ( ((float)line_senLLL) + ((float)line_senLL ) + (float)line_senL) - ((float)line_senR + ((float)line_senRR ) + ((float)line_senRRR))*1.2; //1.25 1.6
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <posPID+0x16c>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <posPID+0x170>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <posPID+0x174>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002224:	ee17 0a90 	vmov	r0, s15
 8002228:	f7fe f986 	bl	8000538 <__aeabi_f2d>
 800222c:	4604      	mov	r4, r0
 800222e:	460d      	mov	r5, r1
 8002230:	4b45      	ldr	r3, [pc, #276]	; (8002348 <posPID+0x178>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <posPID+0x17c>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002248:	ee37 7a27 	vadd.f32	s14, s14, s15
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <posPID+0x180>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225c:	ee17 0a90 	vmov	r0, s15
 8002260:	f7fe f96a 	bl	8000538 <__aeabi_f2d>
 8002264:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <posPID+0x184>)
 800226a:	f7fe f9bd 	bl	80005e8 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	f7fd ffff 	bl	8000278 <__aeabi_dsub>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	4618      	mov	r0, r3
 8002280:	4621      	mov	r1, r4
 8002282:	f7fe fbc3 	bl	8000a0c <__aeabi_d2f>
 8002286:	4602      	mov	r2, r0
 8002288:	4b33      	ldr	r3, [pc, #204]	; (8002358 <posPID+0x188>)
 800228a:	601a      	str	r2, [r3, #0]


	mon_def_pos = def_pos[0];
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <posPID+0x188>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a32      	ldr	r2, [pc, #200]	; (800235c <posPID+0x18c>)
 8002292:	6013      	str	r3, [r2, #0]


	p_pos = kp_pos * def_pos[0]; //P制御
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <posPID+0x188>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ed97 7a05 	vldr	s14, [r7, #20]
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	edc7 7a02 	vstr	s15, [r7, #8]
	i_pos += ki_pos * def_pos[0] * DELTA_T; //I制御
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <posPID+0x188>)
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002360 <posPID+0x190>
 80022b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <posPID+0x168>)
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <posPID+0x168>)
 80022c8:	edc3 7a00 	vstr	s15, [r3]
	d_pos = kd_pos * (def_pos[0] - def_pos[1]) / DELTA_T; //D制御
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <posPID+0x188>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <posPID+0x188>)
 80022d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002360 <posPID+0x190>
 80022e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ec:	edc7 7a01 	vstr	s15, [r7, #4]

//	order_posR = -p_pos + i_pos + d_pos;
//	order_posL = (p_pos + i_pos + d_pos);
	order_posR = -(p_pos +  d_pos);
 80022f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80022f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	eef1 7a67 	vneg.f32	s15, s15
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <posPID+0x194>)
 8002302:	edc3 7a00 	vstr	s15, [r3]
	order_posL = (p_pos + 	d_pos);
 8002306:	ed97 7a02 	vldr	s14, [r7, #8]
 800230a:	edd7 7a01 	vldr	s15, [r7, #4]
 800230e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <posPID+0x198>)
 8002314:	edc3 7a00 	vstr	s15, [r3]

	def_pos[1] = def_pos[0];
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <posPID+0x188>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <posPID+0x188>)
 800231e:	6053      	str	r3, [r2, #4]

}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	3ccccccd 	.word	0x3ccccccd
 800232c:	3b83126f 	.word	0x3b83126f
 8002330:	3b03126f 	.word	0x3b03126f
 8002334:	200004f4 	.word	0x200004f4
 8002338:	200000a8 	.word	0x200000a8
 800233c:	200000c0 	.word	0x200000c0
 8002340:	200000c2 	.word	0x200000c2
 8002344:	200000c4 	.word	0x200000c4
 8002348:	200000c6 	.word	0x200000c6
 800234c:	200000c8 	.word	0x200000c8
 8002350:	200000ca 	.word	0x200000ca
 8002354:	3ff33333 	.word	0x3ff33333
 8002358:	200000ac 	.word	0x200000ac
 800235c:	200000a4 	.word	0x200000a4
 8002360:	3a83126f 	.word	0x3a83126f
 8002364:	2000008c 	.word	0x2000008c
 8002368:	20000090 	.word	0x20000090

0800236c <velPID>:

void velPID(float target) {
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_vel, kp_vel = 4.8f/*2.8f*/, ki_vel = 50.0f;	//2.8 50
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <velPID+0xc8>)
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <velPID+0xcc>)
 800237c:	613b      	str	r3, [r7, #16]
	//float vel_center, filter_vel_center, acceleration_imu;
	static float i_vel, def_vel, vel_center;

	if(i_vel_clear_flag == 1){
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <velPID+0xd0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d106      	bne.n	8002394 <velPID+0x28>
		i_vel = 0;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <velPID+0xd4>)
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
		i_vel_clear_flag = 0;
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <velPID+0xd0>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
	}

	vel_center = (velR + velL) / 2.0f;
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <velPID+0xd8>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <velPID+0xdc>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <velPID+0xe0>)
 80023ae:	edc3 7a00 	vstr	s15, [r3]
	//acceleration_imu = (float)xa / 16384.0f;
	//filter_vel_center = ComplementaryFilter(acceleration_imu, vel_center, 0.65f, last_vel_center);
	//last_vel_center = filter_vel_center;

	//def_vel = 500.0f - vel_center ;
	def_vel = target - vel_center ;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <velPID+0xe0>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <velPID+0xe4>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]

	p_vel = kp_vel * def_vel;
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <velPID+0xe4>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d4:	edc7 7a03 	vstr	s15, [r7, #12]
	i_vel += ki_vel * def_vel * DELTA_T;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <velPID+0xe4>)
 80023da:	ed93 7a00 	vldr	s14, [r3]
 80023de:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002454 <velPID+0xe8>
 80023ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <velPID+0xd4>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <velPID+0xd4>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]

	order_velR = p_vel + i_vel;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <velPID+0xd4>)
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	edd7 7a03 	vldr	s15, [r7, #12]
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <velPID+0xec>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
	order_velL = p_vel + i_vel;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <velPID+0xd4>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <velPID+0xf0>)
 8002422:	edc3 7a00 	vstr	s15, [r3]
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	4099999a 	.word	0x4099999a
 8002438:	42480000 	.word	0x42480000
 800243c:	200004f0 	.word	0x200004f0
 8002440:	200000b4 	.word	0x200000b4
 8002444:	200004ec 	.word	0x200004ec
 8002448:	200004fc 	.word	0x200004fc
 800244c:	200000b8 	.word	0x200000b8
 8002450:	200000bc 	.word	0x200000bc
 8002454:	3a83126f 	.word	0x3a83126f
 8002458:	20000098 	.word	0x20000098
 800245c:	20000094 	.word	0x20000094

08002460 <ADC_init>:
uint16_t ADC_max[SENSOR_NUMBER];
uint16_t ADC_dif[SENSOR_NUMBER];
uint8_t Sensor_st = 0;


void ADC_init(){
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
//	switch(sensor_mode) {
//	case 0:
		lcd_locate(0,0);
 8002464:	2100      	movs	r1, #0
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fe81 	bl	800116e <lcd_locate>
		lcd_print("genkini");
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <ADC_init+0x2c>)
 800246e:	f7fe fe93 	bl	8001198 <lcd_print>
		lcd_locate(0,1);
 8002472:	2101      	movs	r1, #1
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fe7a 	bl	800116e <lcd_locate>
		lcd_print("mokkori");
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <ADC_init+0x30>)
 800247c:	f7fe fe8c 	bl	8001198 <lcd_print>
		HAL_Delay(100);
 8002480:	2064      	movs	r0, #100	; 0x64
 8002482:	f001 fc5d 	bl	8003d40 <HAL_Delay>
//		break;
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	08008b44 	.word	0x08008b44
 8002490:	08008b4c 	.word	0x08008b4c

08002494 <ADval_get>:
//	}
//	LED(3);

}*/

void ADval_get(void) {
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <ADval_get+0x80>)
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <ADval_get+0x84>)
 800249e:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <ADval_get+0x80>)
 80024a2:	885a      	ldrh	r2, [r3, #2]
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <ADval_get+0x88>)
 80024a6:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <ADval_get+0x80>)
 80024aa:	889a      	ldrh	r2, [r3, #4]
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <ADval_get+0x8c>)
 80024ae:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <ADval_get+0x80>)
 80024b2:	88da      	ldrh	r2, [r3, #6]
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <ADval_get+0x90>)
 80024b6:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <ADval_get+0x80>)
 80024ba:	891a      	ldrh	r2, [r3, #8]
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <ADval_get+0x94>)
 80024be:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <ADval_get+0x80>)
 80024c2:	895a      	ldrh	r2, [r3, #10]
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <ADval_get+0x98>)
 80024c6:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <ADval_get+0x80>)
 80024ca:	899a      	ldrh	r2, [r3, #12]
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <ADval_get+0x9c>)
 80024ce:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <ADval_get+0x80>)
 80024d2:	89da      	ldrh	r2, [r3, #14]
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <ADval_get+0xa0>)
 80024d6:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[8];
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <ADval_get+0x80>)
 80024da:	8a1a      	ldrh	r2, [r3, #16]
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <ADval_get+0xa4>)
 80024de:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[9];
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <ADval_get+0x80>)
 80024e2:	8a5a      	ldrh	r2, [r3, #18]
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <ADval_get+0xa8>)
 80024e6:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[10];
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <ADval_get+0x80>)
 80024ea:	8a9a      	ldrh	r2, [r3, #20]
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <ADval_get+0xac>)
 80024ee:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[11];
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <ADval_get+0x80>)
 80024f2:	8ada      	ldrh	r2, [r3, #22]
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <ADval_get+0xb0>)
 80024f6:	801a      	strh	r2, [r3, #0]
	line_sen12 = ADC1_Buff[12];
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <ADval_get+0x80>)
 80024fa:	8b1a      	ldrh	r2, [r3, #24]
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <ADval_get+0xb4>)
 80024fe:	801a      	strh	r2, [r3, #0]
	line_sen13 = ADC1_Buff[13];
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <ADval_get+0x80>)
 8002502:	8b5a      	ldrh	r2, [r3, #26]
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <ADval_get+0xb8>)
 8002506:	801a      	strh	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000032c 	.word	0x2000032c
 8002518:	2000c134 	.word	0x2000c134
 800251c:	20000582 	.word	0x20000582
 8002520:	20000578 	.word	0x20000578
 8002524:	20000566 	.word	0x20000566
 8002528:	20000512 	.word	0x20000512
 800252c:	2000c130 	.word	0x2000c130
 8002530:	2000057a 	.word	0x2000057a
 8002534:	2000056c 	.word	0x2000056c
 8002538:	20000584 	.word	0x20000584
 800253c:	2000c136 	.word	0x2000c136
 8002540:	20000580 	.word	0x20000580
 8002544:	20000510 	.word	0x20000510
 8002548:	2000c138 	.word	0x2000c138
 800254c:	20000586 	.word	0x20000586

08002550 <Maker_Check>:

	}
	}*/


void Maker_Check(void) {
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

	if(line_sen12 >= 300 && line_sen13 >= 300){	//black
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <Maker_Check+0xbc>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800255c:	d308      	bcc.n	8002570 <Maker_Check+0x20>
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <Maker_Check+0xc0>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002566:	d303      	bcc.n	8002570 <Maker_Check+0x20>
		Sensor_st = 0;
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <Maker_Check+0xc4>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e00c      	b.n	800258a <Maker_Check+0x3a>
	}
	else if(line_sen12 <= 500 && line_sen13 <= 500){	//white
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <Maker_Check+0xbc>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002578:	d807      	bhi.n	800258a <Maker_Check+0x3a>
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <Maker_Check+0xc0>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002582:	d802      	bhi.n	800258a <Maker_Check+0x3a>
		Sensor_st = 2;
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <Maker_Check+0xc4>)
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
	}
/*	else if(line_sen12 <= 300){	//left
			Sensor_st = 1;
		}*/

	/*else*/ if(line_sen13 <= 300){	//right
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <Maker_Check+0xc0>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002592:	d802      	bhi.n	800259a <Maker_Check+0x4a>
			Sensor_st = 2;
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <Maker_Check+0xc4>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
		}

	if(Sensor_st == 2){
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <Maker_Check+0xc4>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d106      	bne.n	80025b0 <Maker_Check+0x60>
					MR_cnt++;
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <Maker_Check+0xc8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <Maker_Check+0xc8>)
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e002      	b.n	80025b6 <Maker_Check+0x66>
				}
				else{
					MR_cnt = 0;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <Maker_Check+0xc8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
				}


	if(MR_cnt >=10){
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <Maker_Check+0xc8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b09      	cmp	r3, #9
 80025bc:	d908      	bls.n	80025d0 <Maker_Check+0x80>
					MR_cnt = 0;
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <Maker_Check+0xc8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
					MR_flag = 0;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <Maker_Check+0xcc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
					maker_pattern = 2;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <Maker_Check+0xd0>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
					}



				if(maker_pattern == 2){
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <Maker_Check+0xd0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d107      	bne.n	80025e8 <Maker_Check+0x98>
					if(line_sen13 >= 500){
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <Maker_Check+0xc0>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025e0:	d302      	bcc.n	80025e8 <Maker_Check+0x98>
					maker_pattern = 3;
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <Maker_Check+0xd0>)
 80025e4:	2203      	movs	r2, #3
 80025e6:	701a      	strb	r2, [r3, #0]
					}
				}

				if(maker_pattern == 3){
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <Maker_Check+0xd0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d107      	bne.n	8002600 <Maker_Check+0xb0>
					GL_flag++;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <Maker_Check+0xd4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <Maker_Check+0xd4>)
 80025f8:	6013      	str	r3, [r2, #0]
					maker_pattern = 0;
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <Maker_Check+0xd0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
		case 4:
				GL_flag++;
				maker_pattern = 0;
			break;
		}*/
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000c138 	.word	0x2000c138
 8002610:	20000586 	.word	0x20000586
 8002614:	20000105 	.word	0x20000105
 8002618:	200000f8 	.word	0x200000f8
 800261c:	200000fc 	.word	0x200000fc
 8002620:	200000ed 	.word	0x200000ed
 8002624:	20000100 	.word	0x20000100

08002628 <ADval_sum>:
	}

	return maker;
}*/

void ADval_sum(void) {
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
	line_senLLL	= line_sen11 + line_sen10;
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <ADval_sum+0x70>)
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <ADval_sum+0x74>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	4413      	add	r3, r2
 8002636:	b29a      	uxth	r2, r3
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <ADval_sum+0x78>)
 800263a:	801a      	strh	r2, [r3, #0]
	line_senLL	= line_sen9 + line_sen8;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <ADval_sum+0x7c>)
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <ADval_sum+0x80>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	4413      	add	r3, r2
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <ADval_sum+0x84>)
 800264a:	801a      	strh	r2, [r3, #0]
	line_senL	= line_sen7 + line_sen6;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <ADval_sum+0x88>)
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <ADval_sum+0x8c>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	4413      	add	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <ADval_sum+0x90>)
 800265a:	801a      	strh	r2, [r3, #0]
	line_senR	= line_sen5 + line_sen4;
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <ADval_sum+0x94>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <ADval_sum+0x98>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	4413      	add	r3, r2
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <ADval_sum+0x9c>)
 800266a:	801a      	strh	r2, [r3, #0]
	line_senRR	= line_sen3 + line_sen2;
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <ADval_sum+0xa0>)
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <ADval_sum+0xa4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <ADval_sum+0xa8>)
 800267a:	801a      	strh	r2, [r3, #0]
	line_senRRR	= line_sen1 + line_sen0;
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <ADval_sum+0xac>)
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <ADval_sum+0xb0>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <ADval_sum+0xb4>)
 800268a:	801a      	strh	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000c136 	.word	0x2000c136
 800269c:	20000584 	.word	0x20000584
 80026a0:	200000c0 	.word	0x200000c0
 80026a4:	20000510 	.word	0x20000510
 80026a8:	20000580 	.word	0x20000580
 80026ac:	200000c2 	.word	0x200000c2
 80026b0:	2000056c 	.word	0x2000056c
 80026b4:	2000057a 	.word	0x2000057a
 80026b8:	200000c4 	.word	0x200000c4
 80026bc:	2000c130 	.word	0x2000c130
 80026c0:	20000512 	.word	0x20000512
 80026c4:	200000c6 	.word	0x200000c6
 80026c8:	20000566 	.word	0x20000566
 80026cc:	20000578 	.word	0x20000578
 80026d0:	200000c8 	.word	0x200000c8
 80026d4:	20000582 	.word	0x20000582
 80026d8:	2000c134 	.word	0x2000c134
 80026dc:	200000ca 	.word	0x200000ca

080026e0 <getEncoder>:



void getEncoder(void) {
 80026e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0

	int16_t enc_tim1_ms;
	int16_t enc_tim8_ms;

	enc_tim1_ms = TIM1 -> CNT;
 80026e8:	4b60      	ldr	r3, [pc, #384]	; (800286c <getEncoder+0x18c>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	80fb      	strh	r3, [r7, #6]
	enc_tim8_ms = TIM8 -> CNT;
 80026ee:	4b60      	ldr	r3, [pc, #384]	; (8002870 <getEncoder+0x190>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	80bb      	strh	r3, [r7, #4]

	TIM1 -> CNT = 0;
 80026f4:	4b5d      	ldr	r3, [pc, #372]	; (800286c <getEncoder+0x18c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <getEncoder+0x190>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total += enc_tim1_ms;
 8002700:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002704:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <getEncoder+0x194>)
 800270a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800270e:	eb1b 0301 	adds.w	r3, fp, r1
 8002712:	eb4c 0402 	adc.w	r4, ip, r2
 8002716:	4a57      	ldr	r2, [pc, #348]	; (8002874 <getEncoder+0x194>)
 8002718:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 800271c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002720:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002724:	4b54      	ldr	r3, [pc, #336]	; (8002878 <getEncoder+0x198>)
 8002726:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800272a:	eb1b 0301 	adds.w	r3, fp, r1
 800272e:	eb4c 0402 	adc.w	r4, ip, r2
 8002732:	4a51      	ldr	r2, [pc, #324]	; (8002878 <getEncoder+0x198>)
 8002734:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 8002738:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <getEncoder+0x194>)
 800273a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800273e:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <getEncoder+0x198>)
 8002740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002744:	eb13 0b01 	adds.w	fp, r3, r1
 8002748:	eb44 0c02 	adc.w	ip, r4, r2
 800274c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8002750:	4611      	mov	r1, r2
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	eb1b 0301 	adds.w	r3, fp, r1
 800275a:	eb4c 0402 	adc.w	r4, ip, r2
 800275e:	1064      	asrs	r4, r4, #1
 8002760:	ea4f 0333 	mov.w	r3, r3, rrx
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <getEncoder+0x19c>)
 8002766:	e9c2 3400 	strd	r3, r4, [r2]

	enc_cnt += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 800276a:	4b45      	ldr	r3, [pc, #276]	; (8002880 <getEncoder+0x1a0>)
 800276c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002770:	4618      	mov	r0, r3
 8002772:	4621      	mov	r1, r4
 8002774:	f7fe fa6a 	bl	8000c4c <__aeabi_l2f>
 8002778:	ee06 0a10 	vmov	s12, r0
 800277c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800278e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002796:	ee76 7a27 	vadd.f32	s15, s12, s15
 800279a:	ee17 0a90 	vmov	r0, s15
 800279e:	f7fe faab 	bl	8000cf8 <__aeabi_f2lz>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <getEncoder+0x1a0>)
 80027a8:	e9c2 3400 	strd	r3, r4, [r2]
	enc_cnt2 += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 80027ac:	4b35      	ldr	r3, [pc, #212]	; (8002884 <getEncoder+0x1a4>)
 80027ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027b2:	4618      	mov	r0, r3
 80027b4:	4621      	mov	r1, r4
 80027b6:	f7fe fa49 	bl	8000c4c <__aeabi_l2f>
 80027ba:	ee06 0a10 	vmov	s12, r0
 80027be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7fe fa8a 	bl	8000cf8 <__aeabi_f2lz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <getEncoder+0x1a4>)
 80027ea:	e9c2 3400 	strd	r3, r4, [r2]

	enc_tim1_cnt_10ms += enc_tim1_ms;
 80027ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <getEncoder+0x1a8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <getEncoder+0x1a8>)
 80027fa:	6013      	str	r3, [r2, #0]
	enc_tim8_cnt_10ms += enc_tim8_ms;
 80027fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <getEncoder+0x1ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4413      	add	r3, r2
 8002806:	4a21      	ldr	r2, [pc, #132]	; (800288c <getEncoder+0x1ac>)
 8002808:	6013      	str	r3, [r2, #0]

	velR = -(float)enc_tim1_ms * ENC_PULSE_MM * 1000.0f;
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002816:	eef1 7a67 	vneg.f32	s15, s15
 800281a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002890 <getEncoder+0x1b0>
 800281e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002822:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002894 <getEncoder+0x1b4>
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <getEncoder+0x1b8>)
 800282c:	edc3 7a00 	vstr	s15, [r3]
	velL = (float)enc_tim8_ms * ENC_PULSE_MM * 1000.0f;
 8002830:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002890 <getEncoder+0x1b0>
 8002840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002844:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002894 <getEncoder+0x1b4>
 8002848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <getEncoder+0x1bc>)
 800284e:	edc3 7a00 	vstr	s15, [r3]
	monR = velR;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <getEncoder+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <getEncoder+0x1c0>)
 8002858:	6013      	str	r3, [r2, #0]
	monL = velL;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <getEncoder+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <getEncoder+0x1c4>)
 8002860:	6013      	str	r3, [r2, #0]

}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800286c:	40010000 	.word	0x40010000
 8002870:	40010400 	.word	0x40010400
 8002874:	200000d0 	.word	0x200000d0
 8002878:	200000d8 	.word	0x200000d8
 800287c:	200000e0 	.word	0x200000e0
 8002880:	20000520 	.word	0x20000520
 8002884:	20000528 	.word	0x20000528
 8002888:	2000c140 	.word	0x2000c140
 800288c:	2000057c 	.word	0x2000057c
 8002890:	3c53953e 	.word	0x3c53953e
 8002894:	447a0000 	.word	0x447a0000
 8002898:	200004ec 	.word	0x200004ec
 800289c:	200004fc 	.word	0x200004fc
 80028a0:	20000508 	.word	0x20000508
 80028a4:	200004e8 	.word	0x200004e8

080028a8 <mileage>:

float mileage(float mm) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
	return mm * ENC_PULSE_MM;
 80028b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80028cc <mileage+0x24>
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028be:	eeb0 0a67 	vmov.f32	s0, s15
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	3c53953e 	.word	0x3c53953e

080028d0 <setup>:
#include "sensor.h"
//#include "sensor.c"

uint32_t log_check_adress;

void setup(void){
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	//led_pattern(setup_mode);

	switch(setup_mode) {
 80028d6:	4bb4      	ldr	r3, [pc, #720]	; (8002ba8 <setup+0x2d8>)
 80028d8:	f993 3000 	ldrsb.w	r3, [r3]
 80028dc:	2b07      	cmp	r3, #7
 80028de:	f200 843e 	bhi.w	800315e <setup+0x88e>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <setup+0x18>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002909 	.word	0x08002909
 80028ec:	08002d2f 	.word	0x08002d2f
 80028f0:	08002d8b 	.word	0x08002d8b
 80028f4:	08002df3 	.word	0x08002df3
 80028f8:	08002e8d 	.word	0x08002e8d
 80028fc:	08002eab 	.word	0x08002eab
 8002900:	08003009 	.word	0x08003009
 8002904:	080030b5 	.word	0x080030b5
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 8002908:	4ba8      	ldr	r3, [pc, #672]	; (8002bac <setup+0x2dc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <setup+0x4c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1049); //MAX4199
 8002910:	4ba7      	ldr	r3, [pc, #668]	; (8002bb0 <setup+0x2e0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f240 4219 	movw	r2, #1049	; 0x419
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
 800291a:	e003      	b.n	8002924 <setup+0x54>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800291c:	4ba4      	ldr	r3, [pc, #656]	; (8002bb0 <setup+0x2e0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8002924:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <setup+0x2e4>)
 8002926:	f993 3000 	ldrsb.w	r3, [r3]
 800292a:	2b0e      	cmp	r3, #14
 800292c:	f200 81fd 	bhi.w	8002d2a <setup+0x45a>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <setup+0x68>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002975 	.word	0x08002975
 800293c:	0800299f 	.word	0x0800299f
 8002940:	080029c9 	.word	0x080029c9
 8002944:	080029f3 	.word	0x080029f3
 8002948:	08002a1d 	.word	0x08002a1d
 800294c:	08002a47 	.word	0x08002a47
 8002950:	08002a71 	.word	0x08002a71
 8002954:	08002a9b 	.word	0x08002a9b
 8002958:	08002ac9 	.word	0x08002ac9
 800295c:	08002af7 	.word	0x08002af7
 8002960:	08002b25 	.word	0x08002b25
 8002964:	08002b67 	.word	0x08002b67
 8002968:	08002c65 	.word	0x08002c65
 800296c:	08002caf 	.word	0x08002caf
 8002970:	08002cf3 	.word	0x08002cf3
			case 0:
				lcd_locate(0,0);
 8002974:	2100      	movs	r1, #0
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe fbf9 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 800297c:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <setup+0x2e8>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	488e      	ldr	r0, [pc, #568]	; (8002bbc <setup+0x2ec>)
 8002984:	f7fe fc1d 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002988:	2101      	movs	r1, #1
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fbef 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 8002990:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <setup+0x2f0>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	488b      	ldr	r0, [pc, #556]	; (8002bc4 <setup+0x2f4>)
 8002998:	f7fe fc13 	bl	80011c2 <lcd_printf>
				break;
 800299c:	e1c6      	b.n	8002d2c <setup+0x45c>
			case 1:
				lcd_locate(0,0);
 800299e:	2100      	movs	r1, #0
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe fbe4 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <setup+0x2f8>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4887      	ldr	r0, [pc, #540]	; (8002bcc <setup+0x2fc>)
 80029ae:	f7fe fc08 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 80029b2:	2101      	movs	r1, #1
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fbda 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <setup+0x300>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4884      	ldr	r0, [pc, #528]	; (8002bd4 <setup+0x304>)
 80029c2:	f7fe fbfe 	bl	80011c2 <lcd_printf>
				break;
 80029c6:	e1b1      	b.n	8002d2c <setup+0x45c>
			case 2:
				lcd_locate(0,0);
 80029c8:	2100      	movs	r1, #0
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe fbcf 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 80029d0:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <setup+0x308>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	4881      	ldr	r0, [pc, #516]	; (8002bdc <setup+0x30c>)
 80029d8:	f7fe fbf3 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 80029dc:	2101      	movs	r1, #1
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe fbc5 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 80029e4:	4b7e      	ldr	r3, [pc, #504]	; (8002be0 <setup+0x310>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	487e      	ldr	r0, [pc, #504]	; (8002be4 <setup+0x314>)
 80029ec:	f7fe fbe9 	bl	80011c2 <lcd_printf>
				break;
 80029f0:	e19c      	b.n	8002d2c <setup+0x45c>
			case 3:
				lcd_locate(0,0);
 80029f2:	2100      	movs	r1, #0
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe fbba 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 80029fa:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <setup+0x318>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	487a      	ldr	r0, [pc, #488]	; (8002bec <setup+0x31c>)
 8002a02:	f7fe fbde 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a06:	2101      	movs	r1, #1
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fbb0 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 8002a0e:	4b78      	ldr	r3, [pc, #480]	; (8002bf0 <setup+0x320>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4877      	ldr	r0, [pc, #476]	; (8002bf4 <setup+0x324>)
 8002a16:	f7fe fbd4 	bl	80011c2 <lcd_printf>
				break;
 8002a1a:	e187      	b.n	8002d2c <setup+0x45c>
			case 4:
				lcd_locate(0,0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fba5 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 8002a24:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <setup+0x328>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4874      	ldr	r0, [pc, #464]	; (8002bfc <setup+0x32c>)
 8002a2c:	f7fe fbc9 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a30:	2101      	movs	r1, #1
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe fb9b 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 8002a38:	4b71      	ldr	r3, [pc, #452]	; (8002c00 <setup+0x330>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4871      	ldr	r0, [pc, #452]	; (8002c04 <setup+0x334>)
 8002a40:	f7fe fbbf 	bl	80011c2 <lcd_printf>
				break;
 8002a44:	e172      	b.n	8002d2c <setup+0x45c>
			case 5:
				lcd_locate(0,0);
 8002a46:	2100      	movs	r1, #0
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe fb90 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 8002a4e:	4b6e      	ldr	r3, [pc, #440]	; (8002c08 <setup+0x338>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	486d      	ldr	r0, [pc, #436]	; (8002c0c <setup+0x33c>)
 8002a56:	f7fe fbb4 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fb86 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 8002a62:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <setup+0x340>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	486a      	ldr	r0, [pc, #424]	; (8002c14 <setup+0x344>)
 8002a6a:	f7fe fbaa 	bl	80011c2 <lcd_printf>
				break;
 8002a6e:	e15d      	b.n	8002d2c <setup+0x45c>
			case 6:
				lcd_locate(0,0);
 8002a70:	2100      	movs	r1, #0
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe fb7b 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD10",line_sen12);
 8002a78:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <setup+0x348>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4863      	ldr	r0, [pc, #396]	; (8002c0c <setup+0x33c>)
 8002a80:	f7fe fb9f 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a84:	2101      	movs	r1, #1
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fb71 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD11",line_sen13);
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <setup+0x34c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4860      	ldr	r0, [pc, #384]	; (8002c14 <setup+0x344>)
 8002a94:	f7fe fb95 	bl	80011c2 <lcd_printf>
				break;
 8002a98:	e148      	b.n	8002d2c <setup+0x45c>
			case 7:
				lcd_locate(0,0);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe fb66 	bl	800116e <lcd_locate>
				lcd_printf("XG%6x",xg);
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <setup+0x350>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	485e      	ldr	r0, [pc, #376]	; (8002c24 <setup+0x354>)
 8002aac:	f7fe fb89 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe fb5b 	bl	800116e <lcd_locate>
				lcd_printf("YG%6x",yg);
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <setup+0x358>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	485a      	ldr	r0, [pc, #360]	; (8002c2c <setup+0x35c>)
 8002ac2:	f7fe fb7e 	bl	80011c2 <lcd_printf>
				break;
 8002ac6:	e131      	b.n	8002d2c <setup+0x45c>
			case 8:
				lcd_locate(0,0);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe fb4f 	bl	800116e <lcd_locate>
				lcd_printf("ZG%6x",zg);
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <setup+0x360>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4856      	ldr	r0, [pc, #344]	; (8002c34 <setup+0x364>)
 8002ada:	f7fe fb72 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fe fb44 	bl	800116e <lcd_locate>
				lcd_printf("XA%6x",xa);
 8002ae6:	4b54      	ldr	r3, [pc, #336]	; (8002c38 <setup+0x368>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	4853      	ldr	r0, [pc, #332]	; (8002c3c <setup+0x36c>)
 8002af0:	f7fe fb67 	bl	80011c2 <lcd_printf>
				break;
 8002af4:	e11a      	b.n	8002d2c <setup+0x45c>
			case 9:
				lcd_locate(0,0);
 8002af6:	2100      	movs	r1, #0
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fe fb38 	bl	800116e <lcd_locate>
				lcd_printf("YA%6x",ya);
 8002afe:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <setup+0x370>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	484f      	ldr	r0, [pc, #316]	; (8002c44 <setup+0x374>)
 8002b08:	f7fe fb5b 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe fb2d 	bl	800116e <lcd_locate>
				lcd_printf("ZA%6x",za);
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <setup+0x378>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	484b      	ldr	r0, [pc, #300]	; (8002c4c <setup+0x37c>)
 8002b1e:	f7fe fb50 	bl	80011c2 <lcd_printf>
				break;
 8002b22:	e103      	b.n	8002d2c <setup+0x45c>
			case 10:
				lcd_locate(0,0);
 8002b24:	2100      	movs	r1, #0
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe fb21 	bl	800116e <lcd_locate>
				lcd_print("Encoder1");
 8002b2c:	4848      	ldr	r0, [pc, #288]	; (8002c50 <setup+0x380>)
 8002b2e:	f7fe fb33 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002b32:	2101      	movs	r1, #1
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fe fb1a 	bl	800116e <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim1_total));
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <setup+0x384>)
 8002b3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b40:	4618      	mov	r0, r3
 8002b42:	4621      	mov	r1, r4
 8002b44:	f7fe f882 	bl	8000c4c <__aeabi_l2f>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	ee00 3a10 	vmov	s0, r3
 8002b4e:	f7ff feab 	bl	80028a8 <mileage>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	ee17 1a90 	vmov	r1, s15
 8002b5e:	483e      	ldr	r0, [pc, #248]	; (8002c58 <setup+0x388>)
 8002b60:	f7fe fb2f 	bl	80011c2 <lcd_printf>
				break;
 8002b64:	e0e2      	b.n	8002d2c <setup+0x45c>
			case 11:
				lcd_locate(0,0);
 8002b66:	2100      	movs	r1, #0
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe fb00 	bl	800116e <lcd_locate>
				lcd_print("Encoder2");
 8002b6e:	483b      	ldr	r0, [pc, #236]	; (8002c5c <setup+0x38c>)
 8002b70:	f7fe fb12 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002b74:	2101      	movs	r1, #1
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe faf9 	bl	800116e <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim8_total));
 8002b7c:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <setup+0x390>)
 8002b7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b82:	4618      	mov	r0, r3
 8002b84:	4621      	mov	r1, r4
 8002b86:	f7fe f861 	bl	8000c4c <__aeabi_l2f>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	ee00 3a10 	vmov	s0, r3
 8002b90:	f7ff fe8a 	bl	80028a8 <mileage>
 8002b94:	eef0 7a40 	vmov.f32	s15, s0
 8002b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9c:	ee17 1a90 	vmov	r1, s15
 8002ba0:	482d      	ldr	r0, [pc, #180]	; (8002c58 <setup+0x388>)
 8002ba2:	f7fe fb0e 	bl	80011c2 <lcd_printf>
				break;
 8002ba6:	e0c1      	b.n	8002d2c <setup+0x45c>
 8002ba8:	20000106 	.word	0x20000106
 8002bac:	2000010a 	.word	0x2000010a
 8002bb0:	20000428 	.word	0x20000428
 8002bb4:	20000108 	.word	0x20000108
 8002bb8:	2000c134 	.word	0x2000c134
 8002bbc:	08008b54 	.word	0x08008b54
 8002bc0:	20000582 	.word	0x20000582
 8002bc4:	08008b5c 	.word	0x08008b5c
 8002bc8:	20000578 	.word	0x20000578
 8002bcc:	08008b64 	.word	0x08008b64
 8002bd0:	20000566 	.word	0x20000566
 8002bd4:	08008b6c 	.word	0x08008b6c
 8002bd8:	20000512 	.word	0x20000512
 8002bdc:	08008b74 	.word	0x08008b74
 8002be0:	2000c130 	.word	0x2000c130
 8002be4:	08008b7c 	.word	0x08008b7c
 8002be8:	2000057a 	.word	0x2000057a
 8002bec:	08008b84 	.word	0x08008b84
 8002bf0:	2000056c 	.word	0x2000056c
 8002bf4:	08008b8c 	.word	0x08008b8c
 8002bf8:	20000580 	.word	0x20000580
 8002bfc:	08008b94 	.word	0x08008b94
 8002c00:	20000510 	.word	0x20000510
 8002c04:	08008b9c 	.word	0x08008b9c
 8002c08:	20000584 	.word	0x20000584
 8002c0c:	08008ba4 	.word	0x08008ba4
 8002c10:	2000c136 	.word	0x2000c136
 8002c14:	08008bac 	.word	0x08008bac
 8002c18:	2000c138 	.word	0x2000c138
 8002c1c:	20000586 	.word	0x20000586
 8002c20:	20000120 	.word	0x20000120
 8002c24:	08008bb4 	.word	0x08008bb4
 8002c28:	2000011e 	.word	0x2000011e
 8002c2c:	08008bbc 	.word	0x08008bbc
 8002c30:	20000118 	.word	0x20000118
 8002c34:	08008bc4 	.word	0x08008bc4
 8002c38:	2000011c 	.word	0x2000011c
 8002c3c:	08008bcc 	.word	0x08008bcc
 8002c40:	20000122 	.word	0x20000122
 8002c44:	08008bd4 	.word	0x08008bd4
 8002c48:	2000011a 	.word	0x2000011a
 8002c4c:	08008bdc 	.word	0x08008bdc
 8002c50:	08008be4 	.word	0x08008be4
 8002c54:	200000d0 	.word	0x200000d0
 8002c58:	08008bf0 	.word	0x08008bf0
 8002c5c:	08008bf4 	.word	0x08008bf4
 8002c60:	200000d8 	.word	0x200000d8
			case 12:
				lcd_locate(0,0);
 8002c64:	2100      	movs	r1, #0
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa81 	bl	800116e <lcd_locate>
				lcd_print("Voltage_");
 8002c6c:	48ba      	ldr	r0, [pc, #744]	; (8002f58 <setup+0x688>)
 8002c6e:	f7fe fa93 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002c72:	2101      	movs	r1, #1
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fa7a 	bl	800116e <lcd_locate>
				volt_reg = INA260_read(0x02);
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f7fe fae0 	bl	8001240 <INA260_read>
 8002c80:	4603      	mov	r3, r0
 8002c82:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8002f5c <setup+0x68c>
 8002c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c96:	ee17 0a90 	vmov	r0, s15
 8002c9a:	f7fd fc4d 	bl	8000538 <__aeabi_f2d>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4623      	mov	r3, r4
 8002ca6:	48ae      	ldr	r0, [pc, #696]	; (8002f60 <setup+0x690>)
 8002ca8:	f7fe fa8b 	bl	80011c2 <lcd_printf>
				break;
 8002cac:	e03e      	b.n	8002d2c <setup+0x45c>
			case 13:
				lcd_locate(0,0);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe fa5c 	bl	800116e <lcd_locate>
				lcd_print("error_th");
 8002cb6:	48ab      	ldr	r0, [pc, #684]	; (8002f64 <setup+0x694>)
 8002cb8:	f7fe fa6e 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fe fa55 	bl	800116e <lcd_locate>
				lcd_printf("%8d",line_senLLL + line_senLL + line_senL + line_senR + line_senRR + line_senRRR);
 8002cc4:	4ba8      	ldr	r3, [pc, #672]	; (8002f68 <setup+0x698>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4ba8      	ldr	r3, [pc, #672]	; (8002f6c <setup+0x69c>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4aa7      	ldr	r2, [pc, #668]	; (8002f70 <setup+0x6a0>)
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4aa7      	ldr	r2, [pc, #668]	; (8002f74 <setup+0x6a4>)
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4aa6      	ldr	r2, [pc, #664]	; (8002f78 <setup+0x6a8>)
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4aa6      	ldr	r2, [pc, #664]	; (8002f7c <setup+0x6ac>)
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	48a5      	ldr	r0, [pc, #660]	; (8002f80 <setup+0x6b0>)
 8002cec:	f7fe fa69 	bl	80011c2 <lcd_printf>
				break;
 8002cf0:	e01c      	b.n	8002d2c <setup+0x45c>
			case 14:
				lcd_locate(0,0);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fe fa3a 	bl	800116e <lcd_locate>
				lcd_print("cross_th");
 8002cfa:	48a2      	ldr	r0, [pc, #648]	; (8002f84 <setup+0x6b4>)
 8002cfc:	f7fe fa4c 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002d00:	2101      	movs	r1, #1
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe fa33 	bl	800116e <lcd_locate>
				lcd_printf("%8d", line_senLL + line_senL + line_senR + line_senRR);
 8002d08:	4b98      	ldr	r3, [pc, #608]	; (8002f6c <setup+0x69c>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b98      	ldr	r3, [pc, #608]	; (8002f70 <setup+0x6a0>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a97      	ldr	r2, [pc, #604]	; (8002f74 <setup+0x6a4>)
 8002d16:	8812      	ldrh	r2, [r2, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a97      	ldr	r2, [pc, #604]	; (8002f78 <setup+0x6a8>)
 8002d1c:	8812      	ldrh	r2, [r2, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	4897      	ldr	r0, [pc, #604]	; (8002f80 <setup+0x6b0>)
 8002d24:	f7fe fa4d 	bl	80011c2 <lcd_printf>
				break;
 8002d28:	e000      	b.n	8002d2c <setup+0x45c>
			default:
				break;
 8002d2a:	bf00      	nop
			}

			break;
 8002d2c:	e220      	b.n	8003170 <setup+0x8a0>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002d2e:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <setup+0x6b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
	/*		lcd_locate(0,0);
			lcd_print("test_ESC");
			lcd_locate(0,1);
			lcd_print("SW_PUSH_");
			*/
			lcd_locate(0,0);
 8002d36:	2100      	movs	r1, #0
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe fa18 	bl	800116e <lcd_locate>
			lcd_print("nomusan");
 8002d3e:	4893      	ldr	r0, [pc, #588]	; (8002f8c <setup+0x6bc>)
 8002d40:	f7fe fa2a 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002d44:	2101      	movs	r1, #1
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe fa11 	bl	800116e <lcd_locate>
			lcd_print("no_KTAN");
 8002d4c:	4890      	ldr	r0, [pc, #576]	; (8002f90 <setup+0x6c0>)
 8002d4e:	f7fe fa23 	bl	8001198 <lcd_print>

			if( sw_center_state == 1 ) {
 8002d52:	4b90      	ldr	r3, [pc, #576]	; (8002f94 <setup+0x6c4>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <setup+0x490>
				ADC_init();
 8002d5a:	f7ff fb81 	bl	8002460 <ADC_init>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
			}
			break;
 8002d5e:	e207      	b.n	8003170 <setup+0x8a0>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8002d60:	4b8d      	ldr	r3, [pc, #564]	; (8002f98 <setup+0x6c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 8002d6a:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <setup+0x6c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 8002d74:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <setup+0x6c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 8002d7e:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <setup+0x6c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002d88:	e1f2      	b.n	8003170 <setup+0x8a0>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8002d8a:	4b83      	ldr	r3, [pc, #524]	; (8002f98 <setup+0x6c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d92:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 8002d94:	4b80      	ldr	r3, [pc, #512]	; (8002f98 <setup+0x6c8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 8002d9e:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <setup+0x6c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 8002da8:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <setup+0x6c8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 8002db2:	2100      	movs	r1, #0
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fe f9da 	bl	800116e <lcd_locate>
			lcd_print("test_MD_");
 8002dba:	4878      	ldr	r0, [pc, #480]	; (8002f9c <setup+0x6cc>)
 8002dbc:	f7fe f9ec 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fe f9d3 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH_");
 8002dc8:	4875      	ldr	r0, [pc, #468]	; (8002fa0 <setup+0x6d0>)
 8002dca:	f7fe f9e5 	bl	8001198 <lcd_print>

			if( sw_center_state == 1 ) {
 8002dce:	4b71      	ldr	r3, [pc, #452]	; (8002f94 <setup+0x6c4>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <setup+0x516>
				Motorset(400, 400, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ddc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002de0:	f7ff f996 	bl	8002110 <Motorset>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
				*/
			}
			break;
 8002de4:	e1c4      	b.n	8003170 <setup+0x8a0>
				Motorset(0, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7ff f990 	bl	8002110 <Motorset>
			break;
 8002df0:	e1be      	b.n	8003170 <setup+0x8a0>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8002df2:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <setup+0x6d4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <setup+0x6d4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38

			lcd_locate(0,0);
 8002e02:	2100      	movs	r1, #0
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fe f9b2 	bl	800116e <lcd_locate>
			lcd_print("_erase__");
 8002e0a:	4867      	ldr	r0, [pc, #412]	; (8002fa8 <setup+0x6d8>)
 8002e0c:	f7fe f9c4 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002e10:	2101      	movs	r1, #1
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe f9ab 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH_");
 8002e18:	4861      	ldr	r0, [pc, #388]	; (8002fa0 <setup+0x6d0>)
 8002e1a:	f7fe f9bd 	bl	8001198 <lcd_print>

			if( sw_center_state == 1 ) {
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <setup+0x6c4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 819d 	bne.w	8003162 <setup+0x892>
				if( isnan( *(float*)start_adress_sector7 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_7);
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <setup+0x6dc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eef4 7a67 	vcmp.f32	s15, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	d602      	bvs.n	8002e40 <setup+0x570>
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f7fe f9e1 	bl	8001202 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector9 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_9);
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <setup+0x6e0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	eef4 7a67 	vcmp.f32	s15, s15
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	d602      	bvs.n	8002e58 <setup+0x588>
 8002e52:	2009      	movs	r0, #9
 8002e54:	f7fe f9d5 	bl	8001202 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector10 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_10);
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <setup+0x6e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	eef4 7a67 	vcmp.f32	s15, s15
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	d602      	bvs.n	8002e70 <setup+0x5a0>
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	f7fe f9c9 	bl	8001202 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector11 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_11);
 8002e70:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <setup+0x6e8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eef4 7a67 	vcmp.f32	s15, s15
 8002e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e80:	f180 816f 	bvs.w	8003162 <setup+0x892>
 8002e84:	200b      	movs	r0, #11
 8002e86:	f7fe f9bc 	bl	8001202 <FLASH_EreaseSector>
			}

			break;
 8002e8a:	e16a      	b.n	8003162 <setup+0x892>
		case 4:
			lcd_locate(0,0);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fe f96d 	bl	800116e <lcd_locate>
			lcd_print("_case-4_");
 8002e94:	4849      	ldr	r0, [pc, #292]	; (8002fbc <setup+0x6ec>)
 8002e96:	f7fe f97f 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe f966 	bl	800116e <lcd_locate>
			lcd_print("________");
 8002ea2:	4847      	ldr	r0, [pc, #284]	; (8002fc0 <setup+0x6f0>)
 8002ea4:	f7fe f978 	bl	8001198 <lcd_print>
			break;
 8002ea8:	e162      	b.n	8003170 <setup+0x8a0>
		case 5:
			lcd_locate(0,0);
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe f95e 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8002eb2:	4844      	ldr	r0, [pc, #272]	; (8002fc4 <setup+0x6f4>)
 8002eb4:	f7fe f970 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002eb8:	2101      	movs	r1, #1
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fe f957 	bl	800116e <lcd_locate>
			lcd_print("START 1 ");
 8002ec0:	4841      	ldr	r0, [pc, #260]	; (8002fc8 <setup+0x6f8>)
 8002ec2:	f7fe f969 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8002ec6:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <setup+0x6c4>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f040 814b 	bne.w	8003166 <setup+0x896>
				HAL_Delay(1000);
 8002ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed4:	f000 ff34 	bl	8003d40 <HAL_Delay>
				order_posR = 0.0f;
 8002ed8:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <setup+0x6fc>)
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
				order_posL = 0.0f;
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <setup+0x700>)
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
				order_velR = 0.0f;
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <setup+0x704>)
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
				order_velL = 0.0f;
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <setup+0x708>)
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002ef8:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <setup+0x70c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <setup+0x710>)
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f04f 0400 	mov.w	r4, #0
 8002f08:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <setup+0x6c4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <setup+0x714>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002f18:	f7fe f919 	bl	800114e <lcd_clear>
				HAL_Delay(1000);
 8002f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f20:	f000 ff0e 	bl	8003d40 <HAL_Delay>
				main_pattern = 8;
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <setup+0x718>)
 8002f26:	2208      	movs	r2, #8
 8002f28:	701a      	strb	r2, [r3, #0]
				MR_flag = 0;
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <setup+0x71c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
				MR_flag = 0;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <setup+0x71c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
				crossline_flag_L = 0;
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <setup+0x720>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
				crossline_flag_M = 0;
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <setup+0x724>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
				i_vel_clear_flag = 1;
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <setup+0x728>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
				i_pos_clear_flag = 1;
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <setup+0x72c>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
				target_vel = 100.0f;
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <setup+0x730>)
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <setup+0x734>)
 8002f52:	601a      	str	r2, [r3, #0]

			}
			break;
 8002f54:	e107      	b.n	8003166 <setup+0x896>
 8002f56:	bf00      	nop
 8002f58:	08008c00 	.word	0x08008c00
 8002f5c:	3aa3d70a 	.word	0x3aa3d70a
 8002f60:	08008c0c 	.word	0x08008c0c
 8002f64:	08008c18 	.word	0x08008c18
 8002f68:	200000c0 	.word	0x200000c0
 8002f6c:	200000c2 	.word	0x200000c2
 8002f70:	200000c4 	.word	0x200000c4
 8002f74:	200000c6 	.word	0x200000c6
 8002f78:	200000c8 	.word	0x200000c8
 8002f7c:	200000ca 	.word	0x200000ca
 8002f80:	08008bf0 	.word	0x08008bf0
 8002f84:	08008c24 	.word	0x08008c24
 8002f88:	20000428 	.word	0x20000428
 8002f8c:	08008c30 	.word	0x08008c30
 8002f90:	08008c38 	.word	0x08008c38
 8002f94:	2000010a 	.word	0x2000010a
 8002f98:	2000020c 	.word	0x2000020c
 8002f9c:	08008c40 	.word	0x08008c40
 8002fa0:	08008c4c 	.word	0x08008c4c
 8002fa4:	20000468 	.word	0x20000468
 8002fa8:	08008c58 	.word	0x08008c58
 8002fac:	08008ca8 	.word	0x08008ca8
 8002fb0:	08008cac 	.word	0x08008cac
 8002fb4:	08008cb0 	.word	0x08008cb0
 8002fb8:	08008cb4 	.word	0x08008cb4
 8002fbc:	08008c64 	.word	0x08008c64
 8002fc0:	08008c70 	.word	0x08008c70
 8002fc4:	08008c7c 	.word	0x08008c7c
 8002fc8:	08008c84 	.word	0x08008c84
 8002fcc:	2000008c 	.word	0x2000008c
 8002fd0:	20000090 	.word	0x20000090
 8002fd4:	20000098 	.word	0x20000098
 8002fd8:	20000094 	.word	0x20000094
 8002fdc:	200000e8 	.word	0x200000e8
 8002fe0:	20000520 	.word	0x20000520
 8002fe4:	20000104 	.word	0x20000104
 8002fe8:	200000ec 	.word	0x200000ec
 8002fec:	200000fc 	.word	0x200000fc
 8002ff0:	200000f0 	.word	0x200000f0
 8002ff4:	200000f4 	.word	0x200000f4
 8002ff8:	200004f0 	.word	0x200004f0
 8002ffc:	200004f4 	.word	0x200004f4
 8003000:	20000500 	.word	0x20000500
 8003004:	42c80000 	.word	0x42c80000
		case 6:
			lcd_locate(0,0);
 8003008:	2100      	movs	r1, #0
 800300a:	2000      	movs	r0, #0
 800300c:	f7fe f8af 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8003010:	4859      	ldr	r0, [pc, #356]	; (8003178 <setup+0x8a8>)
 8003012:	f7fe f8c1 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8003016:	2101      	movs	r1, #1
 8003018:	2000      	movs	r0, #0
 800301a:	f7fe f8a8 	bl	800116e <lcd_locate>
			lcd_print("START 2 ");
 800301e:	4857      	ldr	r0, [pc, #348]	; (800317c <setup+0x8ac>)
 8003020:	f7fe f8ba 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <setup+0x8b0>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 809e 	bne.w	800316a <setup+0x89a>
						HAL_Delay(1000);
 800302e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003032:	f000 fe85 	bl	8003d40 <HAL_Delay>
						order_posR = 0.0f;
 8003036:	4b53      	ldr	r3, [pc, #332]	; (8003184 <setup+0x8b4>)
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
						order_posL = 0.0f;
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <setup+0x8b8>)
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
						order_velR = 0.0f;
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <setup+0x8bc>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
						order_velL = 0.0f;
 800304e:	4b50      	ldr	r3, [pc, #320]	; (8003190 <setup+0x8c0>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
						timer = 0;
 8003056:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <setup+0x8c4>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
						enc_cnt = 0;
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <setup+0x8c8>)
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	f04f 0400 	mov.w	r4, #0
 8003066:	e9c2 3400 	strd	r3, r4, [r2]
						sw_center_state = 0;
 800306a:	4b45      	ldr	r3, [pc, #276]	; (8003180 <setup+0x8b0>)
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
						velocity_pattern = 1;
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <setup+0x8cc>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
						lcd_clear();
 8003076:	f7fe f86a 	bl	800114e <lcd_clear>
						HAL_Delay(1000);
 800307a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307e:	f000 fe5f 	bl	8003d40 <HAL_Delay>
						main_pattern = 9;
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <setup+0x8d0>)
 8003084:	2209      	movs	r2, #9
 8003086:	701a      	strb	r2, [r3, #0]
						MR_flag = 0;
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <setup+0x8d4>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
						MR_flag = 0;
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <setup+0x8d4>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
						crossline_flag_L = 0;
 8003094:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <setup+0x8d8>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
						crossline_flag_M = 0;
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <setup+0x8dc>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
						i_vel_clear_flag = 1;
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <setup+0x8e0>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
						i_pos_clear_flag = 1;
 80030a6:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <setup+0x8e4>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
						target_vel = 1000.0f;
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <setup+0x8e8>)
 80030ae:	4a43      	ldr	r2, [pc, #268]	; (80031bc <setup+0x8ec>)
 80030b0:	601a      	str	r2, [r3, #0]

					}
			break;
 80030b2:	e05a      	b.n	800316a <setup+0x89a>
		case 7:
			lcd_locate(0,0);
 80030b4:	2100      	movs	r1, #0
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fe f859 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 80030bc:	482e      	ldr	r0, [pc, #184]	; (8003178 <setup+0x8a8>)
 80030be:	f7fe f86b 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 80030c2:	2101      	movs	r1, #1
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe f852 	bl	800116e <lcd_locate>
			lcd_print("START 3 ");
 80030ca:	483d      	ldr	r0, [pc, #244]	; (80031c0 <setup+0x8f0>)
 80030cc:	f7fe f864 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <setup+0x8b0>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d14a      	bne.n	800316e <setup+0x89e>
						HAL_Delay(1000);
 80030d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030dc:	f000 fe30 	bl	8003d40 <HAL_Delay>
						order_posR = 0.0f;
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <setup+0x8b4>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
						order_posL = 0.0f;
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <setup+0x8b8>)
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
						order_velR = 0.0f;
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <setup+0x8bc>)
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
						order_velL = 0.0f;
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <setup+0x8c0>)
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
						timer = 0;
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <setup+0x8c4>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
						enc_cnt = 0;
 8003106:	4a24      	ldr	r2, [pc, #144]	; (8003198 <setup+0x8c8>)
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	e9c2 3400 	strd	r3, r4, [r2]
						sw_center_state = 0;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <setup+0x8b0>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
						velocity_pattern = 1;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <setup+0x8cc>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
						lcd_clear();
 8003120:	f7fe f815 	bl	800114e <lcd_clear>
						HAL_Delay(1000);
 8003124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003128:	f000 fe0a 	bl	8003d40 <HAL_Delay>
						main_pattern = 10;
 800312c:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <setup+0x8d0>)
 800312e:	220a      	movs	r2, #10
 8003130:	701a      	strb	r2, [r3, #0]
						MR_flag = 0;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <setup+0x8d4>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
						MR_flag = 0;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <setup+0x8d4>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
						crossline_flag_L = 0;
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <setup+0x8d8>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
						crossline_flag_M = 0;
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <setup+0x8dc>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
						i_vel_clear_flag = 1;
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <setup+0x8e0>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
						i_pos_clear_flag = 1;
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <setup+0x8e4>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
						target_vel = 1000.0f;
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <setup+0x8e8>)
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <setup+0x8ec>)
 800315a:	601a      	str	r2, [r3, #0]

					}
			break;
 800315c:	e007      	b.n	800316e <setup+0x89e>
		default:
			break;
 800315e:	bf00      	nop
 8003160:	e006      	b.n	8003170 <setup+0x8a0>
			break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <setup+0x8a0>
			break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <setup+0x8a0>
			break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <setup+0x8a0>
			break;
 800316e:	bf00      	nop
	}
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	08008c7c 	.word	0x08008c7c
 800317c:	08008c90 	.word	0x08008c90
 8003180:	2000010a 	.word	0x2000010a
 8003184:	2000008c 	.word	0x2000008c
 8003188:	20000090 	.word	0x20000090
 800318c:	20000098 	.word	0x20000098
 8003190:	20000094 	.word	0x20000094
 8003194:	200000e8 	.word	0x200000e8
 8003198:	20000520 	.word	0x20000520
 800319c:	20000104 	.word	0x20000104
 80031a0:	200000ec 	.word	0x200000ec
 80031a4:	200000fc 	.word	0x200000fc
 80031a8:	200000f0 	.word	0x200000f0
 80031ac:	200000f4 	.word	0x200000f4
 80031b0:	200004f0 	.word	0x200004f0
 80031b4:	200004f4 	.word	0x200004f4
 80031b8:	20000500 	.word	0x20000500
 80031bc:	447a0000 	.word	0x447a0000
 80031c0:	08008c9c 	.word	0x08008c9c

080031c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_MspInit+0x84>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_MspInit+0x84>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	; 0x44
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_MspInit+0x84>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_MspInit+0x84>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a16      	ldr	r2, [pc, #88]	; (8003248 <HAL_MspInit+0x84>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_MspInit+0x84>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2105      	movs	r1, #5
 8003206:	f06f 000b 	mvn.w	r0, #11
 800320a:	f001 fa8a 	bl	8004722 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2105      	movs	r1, #5
 8003212:	f06f 000a 	mvn.w	r0, #10
 8003216:	f001 fa84 	bl	8004722 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2105      	movs	r1, #5
 800321e:	f06f 0009 	mvn.w	r0, #9
 8003222:	f001 fa7e 	bl	8004722 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	f06f 0004 	mvn.w	r0, #4
 800322e:	f001 fa78 	bl	8004722 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2105      	movs	r1, #5
 8003236:	f06f 0003 	mvn.w	r0, #3
 800323a:	f001 fa72 	bl	8004722 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a49      	ldr	r2, [pc, #292]	; (8003390 <HAL_ADC_MspInit+0x144>)
 800326a:	4293      	cmp	r3, r2
 800326c:	f040 808c 	bne.w	8003388 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_ADC_MspInit+0x148>)
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	4a46      	ldr	r2, [pc, #280]	; (8003394 <HAL_ADC_MspInit+0x148>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6453      	str	r3, [r2, #68]	; 0x44
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_ADC_MspInit+0x148>)
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_ADC_MspInit+0x148>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4a3f      	ldr	r2, [pc, #252]	; (8003394 <HAL_ADC_MspInit+0x148>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6313      	str	r3, [r2, #48]	; 0x30
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_ADC_MspInit+0x148>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a38      	ldr	r2, [pc, #224]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	6313      	str	r3, [r2, #48]	; 0x30
 80032d4:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_ADC_MspInit+0x148>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80032e0:	233c      	movs	r3, #60	; 0x3c
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e4:	2303      	movs	r3, #3
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	f107 031c 	add.w	r3, r7, #28
 80032f0:	4619      	mov	r1, r3
 80032f2:	4829      	ldr	r0, [pc, #164]	; (8003398 <HAL_ADC_MspInit+0x14c>)
 80032f4:	f001 ffa4 	bl	8005240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80032f8:	23ff      	movs	r3, #255	; 0xff
 80032fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032fc:	2303      	movs	r3, #3
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	4824      	ldr	r0, [pc, #144]	; (800339c <HAL_ADC_MspInit+0x150>)
 800330c:	f001 ff98 	bl	8005240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003310:	2303      	movs	r3, #3
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003314:	2303      	movs	r3, #3
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	481f      	ldr	r0, [pc, #124]	; (80033a0 <HAL_ADC_MspInit+0x154>)
 8003324:	f001 ff8c 	bl	8005240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 800332a:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_ADC_MspInit+0x15c>)
 800332c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003346:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 800334a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003356:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 800335a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003368:	2200      	movs	r2, #0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800336c:	480d      	ldr	r0, [pc, #52]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 800336e:	f001 fa0f 	bl	8004790 <HAL_DMA_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003378:	f7fe fea8 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_ADC_MspInit+0x158>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40012000 	.word	0x40012000
 8003394:	40023800 	.word	0x40023800
 8003398:	40020800 	.word	0x40020800
 800339c:	40020000 	.word	0x40020000
 80033a0:	40020400 	.word	0x40020400
 80033a4:	20000348 	.word	0x20000348
 80033a8:	40026410 	.word	0x40026410

080033ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a33      	ldr	r2, [pc, #204]	; (8003498 <HAL_I2C_MspInit+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12d      	bne.n	800342a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	4b32      	ldr	r3, [pc, #200]	; (800349c <HAL_I2C_MspInit+0xf0>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_I2C_MspInit+0xf0>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <HAL_I2C_MspInit+0xf0>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f0:	2312      	movs	r3, #18
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f8:	2303      	movs	r3, #3
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033fc:	2304      	movs	r3, #4
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	4826      	ldr	r0, [pc, #152]	; (80034a0 <HAL_I2C_MspInit+0xf4>)
 8003408:	f001 ff1a 	bl	8005240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_I2C_MspInit+0xf0>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_I2C_MspInit+0xf0>)
 8003416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <HAL_I2C_MspInit+0xf0>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003428:	e031      	b.n	800348e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_I2C_MspInit+0xf8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d12c      	bne.n	800348e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_I2C_MspInit+0xf0>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_I2C_MspInit+0xf0>)
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	6313      	str	r3, [r2, #48]	; 0x30
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_I2C_MspInit+0xf0>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003450:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003456:	2312      	movs	r3, #18
 8003458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800345a:	2301      	movs	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003462:	2304      	movs	r3, #4
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	4619      	mov	r1, r3
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <HAL_I2C_MspInit+0xf4>)
 800346e:	f001 fee7 	bl	8005240 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_I2C_MspInit+0xf0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <HAL_I2C_MspInit+0xf0>)
 800347c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_I2C_MspInit+0xf0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	bf00      	nop
 8003490:	3730      	adds	r7, #48	; 0x30
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40005400 	.word	0x40005400
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40005800 	.word	0x40005800

080034a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_SPI_MspInit+0x84>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12c      	bne.n	8003524 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d8:	6413      	str	r3, [r2, #64]	; 0x40
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_SPI_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003502:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003514:	2306      	movs	r3, #6
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_SPI_MspInit+0x8c>)
 8003520:	f001 fe8e 	bl	8005240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40003c00 	.word	0x40003c00
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800

08003538 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a32      	ldr	r2, [pc, #200]	; (8003620 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12d      	bne.n	80035b6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a30      	ldr	r2, [pc, #192]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	481e      	ldr	r0, [pc, #120]	; (8003628 <HAL_TIM_Encoder_MspInit+0xf0>)
 80035b0:	f001 fe46 	bl	8005240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80035b4:	e030      	b.n	8003618 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d12b      	bne.n	8003618 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	6453      	str	r3, [r2, #68]	; 0x44
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6313      	str	r3, [r2, #48]	; 0x30
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_TIM_Encoder_MspInit+0xec>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035f8:	23c0      	movs	r3, #192	; 0xc0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003608:	2303      	movs	r3, #3
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4619      	mov	r1, r3
 8003612:	4807      	ldr	r0, [pc, #28]	; (8003630 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003614:	f001 fe14 	bl	8005240 <HAL_GPIO_Init>
}
 8003618:	bf00      	nop
 800361a:	3730      	adds	r7, #48	; 0x30
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40010000 	.word	0x40010000
 8003624:	40023800 	.word	0x40023800
 8003628:	40020000 	.word	0x40020000
 800362c:	40010400 	.word	0x40010400
 8003630:	40020800 	.word	0x40020800

08003634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003662:	e026      	b.n	80036b2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <HAL_TIM_PWM_MspInit+0x90>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10e      	bne.n	800368c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
}
 800368a:	e012      	b.n	80036b2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_TIM_PWM_MspInit+0x94>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10d      	bne.n	80036b2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 80036a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_TIM_PWM_MspInit+0x8c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40001800 	.word	0x40001800

080036cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_TIM_Base_MspInit+0x80>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d116      	bne.n	800370c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 80036e8:	f043 0310 	orr.w	r3, r3, #16
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2105      	movs	r1, #5
 80036fe:	2036      	movs	r0, #54	; 0x36
 8003700:	f001 f80f 	bl	8004722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003704:	2036      	movs	r0, #54	; 0x36
 8003706:	f001 f828 	bl	800475a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800370a:	e01a      	b.n	8003742 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a10      	ldr	r2, [pc, #64]	; (8003754 <HAL_TIM_Base_MspInit+0x88>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d115      	bne.n	8003742 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_TIM_Base_MspInit+0x84>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2105      	movs	r1, #5
 8003736:	2037      	movs	r0, #55	; 0x37
 8003738:	f000 fff3 	bl	8004722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800373c:	2037      	movs	r0, #55	; 0x37
 800373e:	f001 f80c 	bl	800475a <HAL_NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40001000 	.word	0x40001000
 8003750:	40023800 	.word	0x40023800
 8003754:	40001400 	.word	0x40001400

08003758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d11f      	bne.n	80037ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	4b44      	ldr	r3, [pc, #272]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a43      	ldr	r2, [pc, #268]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	4619      	mov	r1, r3
 80037b2:	4838      	ldr	r0, [pc, #224]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 80037b4:	f001 fd44 	bl	8005240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80037b8:	e066      	b.n	8003888 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a36      	ldr	r2, [pc, #216]	; (8003898 <HAL_TIM_MspPostInit+0x140>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d13d      	bne.n	8003840 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	6313      	str	r3, [r2, #48]	; 0x30
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800380e:	2302      	movs	r3, #2
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003812:	f107 031c 	add.w	r3, r7, #28
 8003816:	4619      	mov	r1, r3
 8003818:	4820      	ldr	r0, [pc, #128]	; (800389c <HAL_TIM_MspPostInit+0x144>)
 800381a:	f001 fd11 	bl	8005240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800381e:	2330      	movs	r3, #48	; 0x30
 8003820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800382e:	2302      	movs	r3, #2
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003832:	f107 031c 	add.w	r3, r7, #28
 8003836:	4619      	mov	r1, r3
 8003838:	4819      	ldr	r0, [pc, #100]	; (80038a0 <HAL_TIM_MspPostInit+0x148>)
 800383a:	f001 fd01 	bl	8005240 <HAL_GPIO_Init>
}
 800383e:	e023      	b.n	8003888 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_TIM_MspPostInit+0x14c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d11e      	bne.n	8003888 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_TIM_MspPostInit+0x138>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003866:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800386a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003878:	2309      	movs	r3, #9
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387c:	f107 031c 	add.w	r3, r7, #28
 8003880:	4619      	mov	r1, r3
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <HAL_TIM_MspPostInit+0x148>)
 8003884:	f001 fcdc 	bl	8005240 <HAL_GPIO_Init>
}
 8003888:	bf00      	nop
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	40020000 	.word	0x40020000
 8003898:	40000400 	.word	0x40000400
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40001800 	.word	0x40001800

080038a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_UART_MspInit+0x84>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d12b      	bne.n	8003922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038d4:	f043 0310 	orr.w	r3, r3, #16
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_UART_MspInit+0x88>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003902:	23c0      	movs	r3, #192	; 0xc0
 8003904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390a:	2301      	movs	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390e:	2303      	movs	r3, #3
 8003910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003912:	2307      	movs	r3, #7
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	; (8003934 <HAL_UART_MspInit+0x8c>)
 800391e:	f001 fc8f 	bl	8005240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3728      	adds	r7, #40	; 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400

08003938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <MemManage_Handler+0x4>

08003952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <BusFault_Handler+0x4>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <UsageFault_Handler+0x4>

0800395e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800398c:	f000 f9b8 	bl	8003d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003998:	2001      	movs	r0, #1
 800399a:	f001 fe05 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80039a6:	2002      	movs	r0, #2
 80039a8:	f001 fdfe 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80039b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039b8:	f001 fdf6 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039c0:	f001 fdf2 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80039c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039c8:	f001 fdee 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039d0:	f001 fdea 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <TIM6_DAC_IRQHandler+0x10>)
 80039de:	f003 fba4 	bl	800712a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200003a8 	.word	0x200003a8

080039ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <TIM7_IRQHandler+0x10>)
 80039f2:	f003 fb9a 	bl	800712a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200004a8 	.word	0x200004a8

08003a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <DMA2_Stream0_IRQHandler+0x10>)
 8003a06:	f000 ffc9 	bl	800499c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000348 	.word	0x20000348

08003a14 <HAL_GPIO_EXTI_Callback>:
int8_t check_sens_val = 0;
uint8_t sw_up_state = 0;
uint8_t sw_center_state = 0;
uint8_t cnt_sw = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]

	if(cnt_sw >= 30) {
 8003a1e:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <HAL_GPIO_EXTI_Callback+0x144>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b1d      	cmp	r3, #29
 8003a24:	f240 8092 	bls.w	8003b4c <HAL_GPIO_EXTI_Callback+0x138>
		if (GPIO_Pin == GPIO_PIN_0) { 	//left
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d110      	bne.n	8003a50 <HAL_GPIO_EXTI_Callback+0x3c>
			sensor_mode++;
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003a30:	f993 3000 	ldrsb.w	r3, [r3]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003a3e:	701a      	strb	r2, [r3, #0]
			if(sensor_mode >= 1) sensor_mode = 0;
 8003a40:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003a42:	f993 3000 	ldrsb.w	r3, [r3]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	dd02      	ble.n	8003a50 <HAL_GPIO_EXTI_Callback+0x3c>
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
			//if(setup_mode == 1) sensor_mode = 0;
			//if(setup_mode == 0) sensor_mode = 1;

		}
		if (GPIO_Pin == GPIO_PIN_1) { 	//up
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d11e      	bne.n	8003a94 <HAL_GPIO_EXTI_Callback+0x80>
			if(sw_up_state > 1) sw_up_state = 1;
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d902      	bls.n	8003a64 <HAL_GPIO_EXTI_Callback+0x50>
 8003a5e:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
			sw_up_state ^= 1;
 8003a64:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003a70:	701a      	strb	r2, [r3, #0]
			check_sens_val--;
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003a74:	f993 3000 	ldrsb.w	r3, [r3]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	b25a      	sxtb	r2, r3
 8003a80:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003a82:	701a      	strb	r2, [r3, #0]
			if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 8003a84:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003a86:	f993 3000 	ldrsb.w	r3, [r3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da02      	bge.n	8003a94 <HAL_GPIO_EXTI_Callback+0x80>
 8003a8e:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003a90:	220e      	movs	r2, #14
 8003a92:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_12) {	//push
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d110      	bne.n	8003abe <HAL_GPIO_EXTI_Callback+0xaa>
			setup_mode++;
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <HAL_GPIO_EXTI_Callback+0x154>)
 8003a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_GPIO_EXTI_Callback+0x154>)
 8003aac:	701a      	strb	r2, [r3, #0]
			if(setup_mode >= 8) setup_mode = 0;
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_GPIO_EXTI_Callback+0x154>)
 8003ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	dd02      	ble.n	8003abe <HAL_GPIO_EXTI_Callback+0xaa>
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_GPIO_EXTI_Callback+0x154>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_13) {	//down
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d110      	bne.n	8003ae8 <HAL_GPIO_EXTI_Callback+0xd4>
			check_sens_val++;
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	b25a      	sxtb	r2, r3
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ad6:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ada:	f993 3000 	ldrsb.w	r3, [r3]
 8003ade:	2b0e      	cmp	r3, #14
 8003ae0:	dd02      	ble.n	8003ae8 <HAL_GPIO_EXTI_Callback+0xd4>
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_14) {	//center
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aee:	d115      	bne.n	8003b1c <HAL_GPIO_EXTI_Callback+0x108>
			if(sw_center_state > 1) sw_center_state = 1;
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x158>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d902      	bls.n	8003afe <HAL_GPIO_EXTI_Callback+0xea>
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x158>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
			sw_center_state ^= 1;
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x158>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x158>)
 8003b0a:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8003b12:	2b0e      	cmp	r3, #14
 8003b14:	dd02      	ble.n	8003b1c <HAL_GPIO_EXTI_Callback+0x108>
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_15) {;	//right
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d110      	bne.n	8003b46 <HAL_GPIO_EXTI_Callback+0x132>
			sensor_mode++;
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003b26:	f993 3000 	ldrsb.w	r3, [r3]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	b25a      	sxtb	r2, r3
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003b34:	701a      	strb	r2, [r3, #0]
			if(sensor_mode >= 1) sensor_mode = 0;
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003b38:	f993 3000 	ldrsb.w	r3, [r3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	dd02      	ble.n	8003b46 <HAL_GPIO_EXTI_Callback+0x132>
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x148>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
			//if(setup_mode == 1) sensor_mode = 0;
			//if(setup_mode == 0) sensor_mode = 1;

		}
		cnt_sw = 0;
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_GPIO_EXTI_Callback+0x144>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	2000010b 	.word	0x2000010b
 8003b5c:	20000107 	.word	0x20000107
 8003b60:	20000109 	.word	0x20000109
 8003b64:	20000108 	.word	0x20000108
 8003b68:	20000106 	.word	0x20000106
 8003b6c:	2000010a 	.word	0x2000010a

08003b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <_sbrk+0x5c>)
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <_sbrk+0x60>)
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <_sbrk+0x64>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <_sbrk+0x64>)
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <_sbrk+0x68>)
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <_sbrk+0x64>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d207      	bcs.n	8003bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba0:	f004 fb8a 	bl	80082b8 <__errno>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e009      	b.n	8003bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <_sbrk+0x64>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <_sbrk+0x64>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <_sbrk+0x64>)
 8003bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20020000 	.word	0x20020000
 8003bd0:	00000400 	.word	0x00000400
 8003bd4:	2000010c 	.word	0x2000010c
 8003bd8:	2000c170 	.word	0x2000c170

08003bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <SystemInit+0x28>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <SystemInit+0x28>)
 8003be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <SystemInit+0x28>)
 8003bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c0e:	e003      	b.n	8003c18 <LoopCopyDataInit>

08003c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c16:	3104      	adds	r1, #4

08003c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c18:	480b      	ldr	r0, [pc, #44]	; (8003c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c20:	d3f6      	bcc.n	8003c10 <CopyDataInit>
  ldr  r2, =_sbss
 8003c22:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c24:	e002      	b.n	8003c2c <LoopFillZerobss>

08003c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c28:	f842 3b04 	str.w	r3, [r2], #4

08003c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c30:	d3f9      	bcc.n	8003c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c32:	f7ff ffd3 	bl	8003bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c36:	f004 fb45 	bl	80082c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3a:	f7fd fcb3 	bl	80015a4 <main>
  bx  lr    
 8003c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c44:	08008d1c 	.word	0x08008d1c
  ldr  r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c4c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003c50:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003c54:	2000c16c 	.word	0x2000c16c

08003c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c58:	e7fe      	b.n	8003c58 <ADC_IRQHandler>
	...

08003c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_Init+0x40>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_Init+0x40>)
 8003c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_Init+0x40>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_Init+0x40>)
 8003c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_Init+0x40>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_Init+0x40>)
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c84:	2003      	movs	r0, #3
 8003c86:	f000 fd41 	bl	800470c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f000 f808 	bl	8003ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c90:	f7ff fa98 	bl	80031c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_InitTick+0x54>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_InitTick+0x58>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fd59 	bl	8004776 <HAL_SYSTICK_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00e      	b.n	8003cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d80a      	bhi.n	8003cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f000 fd21 	bl	8004722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce0:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <HAL_InitTick+0x5c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	20000008 	.word	0x20000008
 8003cfc:	20000004 	.word	0x20000004

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000008 	.word	0x20000008
 8003d24:	2000c144 	.word	0x2000c144

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000c144 	.word	0x2000c144

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_Delay+0x40>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000008 	.word	0x20000008

08003d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e033      	b.n	8003e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fa52 	bl	800324c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dca:	f023 0302 	bic.w	r3, r3, #2
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa4a 	bl	8004270 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
 8003df2:	e001      	b.n	8003df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_Start_DMA+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e0cc      	b.n	8003fc4 <HAL_ADC_Start_DMA+0x1b8>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d018      	beq.n	8003e72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e50:	4b5e      	ldr	r3, [pc, #376]	; (8003fcc <HAL_ADC_Start_DMA+0x1c0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5e      	ldr	r2, [pc, #376]	; (8003fd0 <HAL_ADC_Start_DMA+0x1c4>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0c9a      	lsrs	r2, r3, #18
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e64:	e002      	b.n	8003e6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f9      	bne.n	8003e66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 80a0 	bne.w	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f023 0206 	bic.w	r2, r3, #6
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8003ece:	e002      	b.n	8003ed6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_ADC_Start_DMA+0x1c8>)
 8003ee0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_ADC_Start_DMA+0x1cc>)
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <HAL_ADC_Start_DMA+0x1d0>)
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <HAL_ADC_Start_DMA+0x1d4>)
 8003ef8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	334c      	adds	r3, #76	; 0x4c
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f000 fcda 	bl	80048ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d12a      	bne.n	8003f9a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_ADC_Start_DMA+0x1d8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d015      	beq.n	8003f7a <HAL_ADC_Start_DMA+0x16e>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <HAL_ADC_Start_DMA+0x1dc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d105      	bne.n	8003f64 <HAL_ADC_Start_DMA+0x158>
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_ADC_Start_DMA+0x1c8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_ADC_Start_DMA+0x1e0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d129      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_ADC_Start_DMA+0x1c8>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d823      	bhi.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11c      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e013      	b.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <HAL_ADC_Start_DMA+0x1d8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	431bde83 	.word	0x431bde83
 8003fd4:	40012300 	.word	0x40012300
 8003fd8:	08004469 	.word	0x08004469
 8003fdc:	08004523 	.word	0x08004523
 8003fe0:	0800453f 	.word	0x0800453f
 8003fe4:	40012000 	.word	0x40012000
 8003fe8:	40012100 	.word	0x40012100
 8003fec:	40012200 	.word	0x40012200

08003ff0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1c>
 8004044:	2302      	movs	r3, #2
 8004046:	e105      	b.n	8004254 <HAL_ADC_ConfigChannel+0x228>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b09      	cmp	r3, #9
 8004056:	d925      	bls.n	80040a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	3b1e      	subs	r3, #30
 800406e:	2207      	movs	r2, #7
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43da      	mvns	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	400a      	ands	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68d9      	ldr	r1, [r3, #12]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	4618      	mov	r0, r3
 8004090:	4603      	mov	r3, r0
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4403      	add	r3, r0
 8004096:	3b1e      	subs	r3, #30
 8004098:	409a      	lsls	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e022      	b.n	80040ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	2207      	movs	r2, #7
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	400a      	ands	r2, r1
 80040c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6919      	ldr	r1, [r3, #16]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4618      	mov	r0, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4403      	add	r3, r0
 80040e0:	409a      	lsls	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d824      	bhi.n	800413c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	3b05      	subs	r3, #5
 8004104:	221f      	movs	r2, #31
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43da      	mvns	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	400a      	ands	r2, r1
 8004112:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	3b05      	subs	r3, #5
 800412e:	fa00 f203 	lsl.w	r2, r0, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	635a      	str	r2, [r3, #52]	; 0x34
 800413a:	e04c      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d824      	bhi.n	800418e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	3b23      	subs	r3, #35	; 0x23
 8004156:	221f      	movs	r2, #31
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43da      	mvns	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	400a      	ands	r2, r1
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	4618      	mov	r0, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	3b23      	subs	r3, #35	; 0x23
 8004180:	fa00 f203 	lsl.w	r2, r0, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
 800418c:	e023      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b41      	subs	r3, #65	; 0x41
 80041a0:	221f      	movs	r2, #31
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	400a      	ands	r2, r1
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b41      	subs	r3, #65	; 0x41
 80041ca:	fa00 f203 	lsl.w	r2, r0, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_ADC_ConfigChannel+0x234>)
 80041d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_ADC_ConfigChannel+0x238>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1cc>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b12      	cmp	r3, #18
 80041ea:	d105      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_ADC_ConfigChannel+0x238>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d123      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b10      	cmp	r3, #16
 8004208:	d003      	beq.n	8004212 <HAL_ADC_ConfigChannel+0x1e6>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b11      	cmp	r3, #17
 8004210:	d11b      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b10      	cmp	r3, #16
 8004224:	d111      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_ADC_ConfigChannel+0x23c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_ADC_ConfigChannel+0x240>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0c9a      	lsrs	r2, r3, #18
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800423c:	e002      	b.n	8004244 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3b01      	subs	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f9      	bne.n	800423e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012300 	.word	0x40012300
 8004264:	40012000 	.word	0x40012000
 8004268:	20000000 	.word	0x20000000
 800426c:	431bde83 	.word	0x431bde83

08004270 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004278:	4b79      	ldr	r3, [pc, #484]	; (8004460 <ADC_Init+0x1f0>)
 800427a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <ADC_Init+0x1f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	e00f      	b.n	800436e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800436c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0202 	bic.w	r2, r2, #2
 800437c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7e1b      	ldrb	r3, [r3, #24]
 8004388:	005a      	lsls	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	035a      	lsls	r2, r3, #13
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e007      	b.n	80043e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	3b01      	subs	r3, #1
 8004400:	051a      	lsls	r2, r3, #20
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004426:	025a      	lsls	r2, r3, #9
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	029a      	lsls	r2, r3, #10
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012300 	.word	0x40012300
 8004464:	0f000001 	.word	0x0f000001

08004468 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13c      	bne.n	80044fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d12b      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d127      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d119      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0220 	bic.w	r2, r2, #32
 80044ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fd7b 	bl	8003ff0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044fa:	e00e      	b.n	800451a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd85 	bl	8004018 <HAL_ADC_ErrorCallback>
}
 800450e:	e004      	b.n	800451a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fd67 	bl	8004004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fd5a 	bl	8004018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	60d3      	str	r3, [r2, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <__NVIC_GetPriorityGrouping+0x18>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0307 	and.w	r3, r3, #7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db0b      	blt.n	80045fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	4907      	ldr	r1, [pc, #28]	; (8004608 <__NVIC_EnableIRQ+0x38>)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2001      	movs	r0, #1
 80045f2:	fa00 f202 	lsl.w	r2, r0, r2
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	; (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	; (800465c <__NVIC_SetPriority+0x50>)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d8:	d301      	bcc.n	80046de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046da:	2301      	movs	r3, #1
 80046dc:	e00f      	b.n	80046fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <SysTick_Config+0x40>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046e6:	210f      	movs	r1, #15
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	f7ff ff8e 	bl	800460c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <SysTick_Config+0x40>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <SysTick_Config+0x40>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	e000e010 	.word	0xe000e010

0800470c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff29 	bl	800456c <__NVIC_SetPriorityGrouping>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004734:	f7ff ff3e 	bl	80045b4 <__NVIC_GetPriorityGrouping>
 8004738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7ff ff8e 	bl	8004660 <NVIC_EncodePriority>
 8004744:	4602      	mov	r2, r0
 8004746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff5d 	bl	800460c <__NVIC_SetPriority>
}
 8004752:	bf00      	nop
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff31 	bl	80045d0 <__NVIC_EnableIRQ>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ffa2 	bl	80046c8 <SysTick_Config>
 8004784:	4603      	mov	r3, r0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7ff fac4 	bl	8003d28 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e099      	b.n	80048e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047cc:	e00f      	b.n	80047ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ce:	f7ff faab 	bl	8003d28 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d908      	bls.n	80047ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e078      	b.n	80048e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e8      	bne.n	80047ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_DMA_Init+0x158>)
 8004808:	4013      	ands	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800481a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b04      	cmp	r3, #4
 8004846:	d107      	bne.n	8004858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4313      	orrs	r3, r2
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b04      	cmp	r3, #4
 8004880:	d117      	bne.n	80048b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fa6f 	bl	8004d78 <DMA_CheckFifoParam>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ae:	2301      	movs	r3, #1
 80048b0:	e016      	b.n	80048e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa26 	bl	8004d0c <DMA_CalcBaseAndBitshift>
 80048c0:	4603      	mov	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	409a      	lsls	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	f010803f 	.word	0xf010803f

080048ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_DMA_Start_IT+0x26>
 800490e:	2302      	movs	r3, #2
 8004910:	e040      	b.n	8004994 <HAL_DMA_Start_IT+0xa8>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d12f      	bne.n	8004986 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f9b8 	bl	8004cb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0216 	orr.w	r2, r2, #22
 800495a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_DMA_IRQHandler+0x258>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a92      	ldr	r2, [pc, #584]	; (8004bf8 <HAL_DMA_IRQHandler+0x25c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a9b      	lsrs	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	2208      	movs	r2, #8
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01a      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	2208      	movs	r2, #8
 80049f6:	409a      	lsls	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	2204      	movs	r2, #4
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	2204      	movs	r2, #4
 8004a62:	409a      	lsls	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	2210      	movs	r2, #16
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d03c      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2210      	movs	r2, #16
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d024      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
 8004aca:	e01f      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
 8004adc:	e016      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0208 	bic.w	r2, r2, #8
 8004afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	2220      	movs	r2, #32
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808e 	beq.w	8004c3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	2220      	movs	r2, #32
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d136      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0216 	bic.w	r2, r2, #22
 8004b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x1da>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0208 	bic.w	r2, r2, #8
 8004b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d07d      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
        }
        return;
 8004bb2:	e078      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d030      	beq.n	8004c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e02b      	b.n	8004c3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d027      	beq.n	8004c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
 8004bf2:	e022      	b.n	8004c3a <HAL_DMA_IRQHandler+0x29e>
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0210 	bic.w	r2, r2, #16
 8004c18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d032      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d022      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2205      	movs	r2, #5
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d307      	bcc.n	8004c82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f2      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x2ca>
 8004c80:	e000      	b.n	8004c84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e000      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ca6:	bf00      	nop
    }
  }
}
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop

08004cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d108      	bne.n	8004cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cee:	e007      	b.n	8004d00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3b10      	subs	r3, #16
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <DMA_CalcBaseAndBitshift+0x64>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <DMA_CalcBaseAndBitshift+0x68>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d909      	bls.n	8004d4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d4c:	e007      	b.n	8004d5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	aaaaaaab 	.word	0xaaaaaaab
 8004d74:	08008cd0 	.word	0x08008cd0

08004d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d11f      	bne.n	8004dd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d855      	bhi.n	8004e44 <DMA_CheckFifoParam+0xcc>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <DMA_CheckFifoParam+0x28>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004dc3 	.word	0x08004dc3
 8004da8:	08004db1 	.word	0x08004db1
 8004dac:	08004e45 	.word	0x08004e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d045      	beq.n	8004e48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc0:	e042      	b.n	8004e48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dca:	d13f      	bne.n	8004e4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd0:	e03c      	b.n	8004e4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	d121      	bne.n	8004e20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d836      	bhi.n	8004e50 <DMA_CheckFifoParam+0xd8>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <DMA_CheckFifoParam+0x70>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004dff 	.word	0x08004dff
 8004df0:	08004df9 	.word	0x08004df9
 8004df4:	08004e11 	.word	0x08004e11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e02f      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d024      	beq.n	8004e54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0e:	e021      	b.n	8004e54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e18:	d11e      	bne.n	8004e58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e1e:	e01b      	b.n	8004e58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d902      	bls.n	8004e2c <DMA_CheckFifoParam+0xb4>
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d003      	beq.n	8004e32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e2a:	e018      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e015      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00e      	beq.n	8004e5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
      break;
 8004e42:	e00b      	b.n	8004e5c <DMA_CheckFifoParam+0xe4>
      break;
 8004e44:	bf00      	nop
 8004e46:	e00a      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e008      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e4c:	bf00      	nop
 8004e4e:	e006      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e50:	bf00      	nop
 8004e52:	e004      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e54:	bf00      	nop
 8004e56:	e002      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;   
 8004e58:	bf00      	nop
 8004e5a:	e000      	b.n	8004e5e <DMA_CheckFifoParam+0xe6>
      break;
 8004e5c:	bf00      	nop
    }
  } 
  
  return status; 
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_FLASH_Unlock+0x38>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da0b      	bge.n	8004e96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_FLASH_Unlock+0x38>)
 8004e80:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_FLASH_Unlock+0x3c>)
 8004e82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_FLASH_Unlock+0x38>)
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_FLASH_Unlock+0x40>)
 8004e88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_FLASH_Unlock+0x38>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da01      	bge.n	8004e96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004e96:	79fb      	ldrb	r3, [r7, #7]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40023c00 	.word	0x40023c00
 8004ea8:	45670123 	.word	0x45670123
 8004eac:	cdef89ab 	.word	0xcdef89ab

08004eb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_FLASH_Lock+0x1c>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <HAL_FLASH_Lock+0x1c>)
 8004eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ebe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40023c00 	.word	0x40023c00

08004ed0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <FLASH_WaitForLastOperation+0x78>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee2:	f7fe ff21 	bl	8003d28 <HAL_GetTick>
 8004ee6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ee8:	e010      	b.n	8004f0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d00c      	beq.n	8004f0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <FLASH_WaitForLastOperation+0x38>
 8004ef8:	f7fe ff16 	bl	8003d28 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d201      	bcs.n	8004f0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e019      	b.n	8004f40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <FLASH_WaitForLastOperation+0x7c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e8      	bne.n	8004eea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <FLASH_WaitForLastOperation+0x7c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f24:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <FLASH_WaitForLastOperation+0x7c>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <FLASH_WaitForLastOperation+0x7c>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004f36:	f000 f80b 	bl	8004f50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
  
}  
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	2000c148 	.word	0x2000c148
 8004f4c:	40023c00 	.word	0x40023c00

08004f50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f043 0310 	orr.w	r3, r3, #16
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004f6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004f6e:	2210      	movs	r2, #16
 8004f70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004f72:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f043 0308 	orr.w	r3, r3, #8
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004f88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004f90:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004fa6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004fba:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004fc4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	4a05      	ldr	r2, [pc, #20]	; (8004ff8 <FLASH_SetErrorCode+0xa8>)
 8004fe2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <FLASH_SetErrorCode+0xa4>)
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	60da      	str	r2, [r3, #12]
  }
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40023c00 	.word	0x40023c00
 8004ff8:	2000c148 	.word	0x2000c148

08004ffc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_FLASHEx_Erase+0xd8>)
 8005010:	7e1b      	ldrb	r3, [r3, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_FLASHEx_Erase+0x1e>
 8005016:	2302      	movs	r3, #2
 8005018:	e058      	b.n	80050cc <HAL_FLASHEx_Erase+0xd0>
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_FLASHEx_Erase+0xd8>)
 800501c:	2201      	movs	r2, #1
 800501e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005024:	f7ff ff54 	bl	8004ed0 <FLASH_WaitForLastOperation>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d148      	bne.n	80050c4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d115      	bne.n	800506e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f000 f844 	bl	80050dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005058:	f7ff ff3a 	bl	8004ed0 <FLASH_WaitForLastOperation>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_FLASHEx_Erase+0xdc>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <HAL_FLASHEx_Erase+0xdc>)
 8005066:	f023 0304 	bic.w	r3, r3, #4
 800506a:	6113      	str	r3, [r2, #16]
 800506c:	e028      	b.n	80050c0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	e01c      	b.n	80050b0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	68b8      	ldr	r0, [r7, #8]
 8005080:	f000 f850 	bl	8005124 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005088:	f7ff ff22 	bl	8004ed0 <FLASH_WaitForLastOperation>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <HAL_FLASHEx_Erase+0xdc>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <HAL_FLASHEx_Erase+0xdc>)
 8005096:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800509a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	601a      	str	r2, [r3, #0]
          break;
 80050a8:	e00a      	b.n	80050c0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3da      	bcc.n	8005076 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80050c0:	f000 f878 	bl	80051b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_FLASHEx_Erase+0xd8>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	761a      	strb	r2, [r3, #24]

  return status;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	2000c148 	.word	0x2000c148
 80050d8:	40023c00 	.word	0x40023c00

080050dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <FLASH_MassErase+0x44>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <FLASH_MassErase+0x44>)
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <FLASH_MassErase+0x44>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4a09      	ldr	r2, [pc, #36]	; (8005120 <FLASH_MassErase+0x44>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <FLASH_MassErase+0x44>)
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	4313      	orrs	r3, r2
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <FLASH_MassErase+0x44>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	6113      	str	r3, [r2, #16]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40023c00 	.word	0x40023c00

08005124 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e010      	b.n	8005162 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d103      	bne.n	800514e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e009      	b.n	8005162 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d103      	bne.n	800515c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e002      	b.n	8005162 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800515c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005160:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	490f      	ldr	r1, [pc, #60]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005180:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005184:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4313      	orrs	r3, r2
 8005190:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	4a04      	ldr	r2, [pc, #16]	; (80051b0 <FLASH_Erase_Sector+0x8c>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	6113      	str	r3, [r2, #16]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40023c00 	.word	0x40023c00

080051b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <FLASH_FlushCaches+0x88>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <FLASH_FlushCaches+0x88>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <FLASH_FlushCaches+0x88>)
 80051ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <FLASH_FlushCaches+0x88>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <FLASH_FlushCaches+0x88>)
 80051d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <FLASH_FlushCaches+0x88>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a16      	ldr	r2, [pc, #88]	; (800523c <FLASH_FlushCaches+0x88>)
 80051e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <FLASH_FlushCaches+0x88>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <FLASH_FlushCaches+0x88>)
 80051ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <FLASH_FlushCaches+0x88>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d017      	beq.n	8005230 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <FLASH_FlushCaches+0x88>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <FLASH_FlushCaches+0x88>)
 8005206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <FLASH_FlushCaches+0x88>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	; (800523c <FLASH_FlushCaches+0x88>)
 8005212:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <FLASH_FlushCaches+0x88>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a07      	ldr	r2, [pc, #28]	; (800523c <FLASH_FlushCaches+0x88>)
 800521e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005222:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <FLASH_FlushCaches+0x88>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <FLASH_FlushCaches+0x88>)
 800522a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522e:	6013      	str	r3, [r2, #0]
  }
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00

08005240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	; 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	e16b      	b.n	8005534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800525c:	2201      	movs	r2, #1
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	f040 815a 	bne.w	800552e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d00b      	beq.n	800529a <HAL_GPIO_Init+0x5a>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d007      	beq.n	800529a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800528e:	2b11      	cmp	r3, #17
 8005290:	d003      	beq.n	800529a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b12      	cmp	r3, #18
 8005298:	d130      	bne.n	80052fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	2203      	movs	r2, #3
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052d0:	2201      	movs	r2, #1
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 0201 	and.w	r2, r3, #1
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0xfc>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b12      	cmp	r3, #18
 800533a:	d123      	bne.n	8005384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	08da      	lsrs	r2, r3, #3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3208      	adds	r2, #8
 8005344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	220f      	movs	r2, #15
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	08da      	lsrs	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3208      	adds	r2, #8
 800537e:	69b9      	ldr	r1, [r7, #24]
 8005380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	2203      	movs	r2, #3
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0203 	and.w	r2, r3, #3
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80b4 	beq.w	800552e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	4b5f      	ldr	r3, [pc, #380]	; (8005548 <HAL_GPIO_Init+0x308>)
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4a5e      	ldr	r2, [pc, #376]	; (8005548 <HAL_GPIO_Init+0x308>)
 80053d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b5c      	ldr	r3, [pc, #368]	; (8005548 <HAL_GPIO_Init+0x308>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053e2:	4a5a      	ldr	r2, [pc, #360]	; (800554c <HAL_GPIO_Init+0x30c>)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	3302      	adds	r3, #2
 80053ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	220f      	movs	r2, #15
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4013      	ands	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a51      	ldr	r2, [pc, #324]	; (8005550 <HAL_GPIO_Init+0x310>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d02b      	beq.n	8005466 <HAL_GPIO_Init+0x226>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a50      	ldr	r2, [pc, #320]	; (8005554 <HAL_GPIO_Init+0x314>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d025      	beq.n	8005462 <HAL_GPIO_Init+0x222>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4f      	ldr	r2, [pc, #316]	; (8005558 <HAL_GPIO_Init+0x318>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01f      	beq.n	800545e <HAL_GPIO_Init+0x21e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a4e      	ldr	r2, [pc, #312]	; (800555c <HAL_GPIO_Init+0x31c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d019      	beq.n	800545a <HAL_GPIO_Init+0x21a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a4d      	ldr	r2, [pc, #308]	; (8005560 <HAL_GPIO_Init+0x320>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_GPIO_Init+0x216>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a4c      	ldr	r2, [pc, #304]	; (8005564 <HAL_GPIO_Init+0x324>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00d      	beq.n	8005452 <HAL_GPIO_Init+0x212>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a4b      	ldr	r2, [pc, #300]	; (8005568 <HAL_GPIO_Init+0x328>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <HAL_GPIO_Init+0x20e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_GPIO_Init+0x32c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_GPIO_Init+0x20a>
 8005446:	2307      	movs	r3, #7
 8005448:	e00e      	b.n	8005468 <HAL_GPIO_Init+0x228>
 800544a:	2308      	movs	r3, #8
 800544c:	e00c      	b.n	8005468 <HAL_GPIO_Init+0x228>
 800544e:	2306      	movs	r3, #6
 8005450:	e00a      	b.n	8005468 <HAL_GPIO_Init+0x228>
 8005452:	2305      	movs	r3, #5
 8005454:	e008      	b.n	8005468 <HAL_GPIO_Init+0x228>
 8005456:	2304      	movs	r3, #4
 8005458:	e006      	b.n	8005468 <HAL_GPIO_Init+0x228>
 800545a:	2303      	movs	r3, #3
 800545c:	e004      	b.n	8005468 <HAL_GPIO_Init+0x228>
 800545e:	2302      	movs	r3, #2
 8005460:	e002      	b.n	8005468 <HAL_GPIO_Init+0x228>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <HAL_GPIO_Init+0x228>
 8005466:	2300      	movs	r3, #0
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	f002 0203 	and.w	r2, r2, #3
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	4093      	lsls	r3, r2
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005478:	4934      	ldr	r1, [pc, #208]	; (800554c <HAL_GPIO_Init+0x30c>)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005486:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <HAL_GPIO_Init+0x330>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054aa:	4a31      	ldr	r2, [pc, #196]	; (8005570 <HAL_GPIO_Init+0x330>)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054b0:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <HAL_GPIO_Init+0x330>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_GPIO_Init+0x330>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054da:	4b25      	ldr	r3, [pc, #148]	; (8005570 <HAL_GPIO_Init+0x330>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054fe:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <HAL_GPIO_Init+0x330>)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_GPIO_Init+0x330>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005528:	4a11      	ldr	r2, [pc, #68]	; (8005570 <HAL_GPIO_Init+0x330>)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	f67f ae90 	bls.w	800525c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800553c:	bf00      	nop
 800553e:	3724      	adds	r7, #36	; 0x24
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40023800 	.word	0x40023800
 800554c:	40013800 	.word	0x40013800
 8005550:	40020000 	.word	0x40020000
 8005554:	40020400 	.word	0x40020400
 8005558:	40020800 	.word	0x40020800
 800555c:	40020c00 	.word	0x40020c00
 8005560:	40021000 	.word	0x40021000
 8005564:	40021400 	.word	0x40021400
 8005568:	40021800 	.word	0x40021800
 800556c:	40021c00 	.word	0x40021c00
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
 8005580:	4613      	mov	r3, r2
 8005582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005584:	787b      	ldrb	r3, [r7, #1]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005590:	e003      	b.n	800559a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	041a      	lsls	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	619a      	str	r2, [r3, #24]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d006      	beq.n	80055cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055be:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fa24 	bl	8003a14 <HAL_GPIO_EXTI_Callback>
  }
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40013c00 	.word	0x40013c00

080055d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e11f      	b.n	800582a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fd fed4 	bl	80033ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800563c:	f001 fb68 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8005640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a7b      	ldr	r2, [pc, #492]	; (8005834 <HAL_I2C_Init+0x25c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d807      	bhi.n	800565c <HAL_I2C_Init+0x84>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a7a      	ldr	r2, [pc, #488]	; (8005838 <HAL_I2C_Init+0x260>)
 8005650:	4293      	cmp	r3, r2
 8005652:	bf94      	ite	ls
 8005654:	2301      	movls	r3, #1
 8005656:	2300      	movhi	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e006      	b.n	800566a <HAL_I2C_Init+0x92>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a77      	ldr	r2, [pc, #476]	; (800583c <HAL_I2C_Init+0x264>)
 8005660:	4293      	cmp	r3, r2
 8005662:	bf94      	ite	ls
 8005664:	2301      	movls	r3, #1
 8005666:	2300      	movhi	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0db      	b.n	800582a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a72      	ldr	r2, [pc, #456]	; (8005840 <HAL_I2C_Init+0x268>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	0c9b      	lsrs	r3, r3, #18
 800567c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a64      	ldr	r2, [pc, #400]	; (8005834 <HAL_I2C_Init+0x25c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d802      	bhi.n	80056ac <HAL_I2C_Init+0xd4>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	e009      	b.n	80056c0 <HAL_I2C_Init+0xe8>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	4a63      	ldr	r2, [pc, #396]	; (8005844 <HAL_I2C_Init+0x26c>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	3301      	adds	r3, #1
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4956      	ldr	r1, [pc, #344]	; (8005834 <HAL_I2C_Init+0x25c>)
 80056dc:	428b      	cmp	r3, r1
 80056de:	d80d      	bhi.n	80056fc <HAL_I2C_Init+0x124>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1e59      	subs	r1, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ee:	3301      	adds	r3, #1
 80056f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	bf38      	it	cc
 80056f8:	2304      	movcc	r3, #4
 80056fa:	e04f      	b.n	800579c <HAL_I2C_Init+0x1c4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d111      	bne.n	8005728 <HAL_I2C_Init+0x150>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e58      	subs	r0, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	440b      	add	r3, r1
 8005712:	fbb0 f3f3 	udiv	r3, r0, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e012      	b.n	800574e <HAL_I2C_Init+0x176>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e58      	subs	r0, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	0099      	lsls	r1, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	fbb0 f3f3 	udiv	r3, r0, r3
 800573e:	3301      	adds	r3, #1
 8005740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Init+0x17e>
 8005752:	2301      	movs	r3, #1
 8005754:	e022      	b.n	800579c <HAL_I2C_Init+0x1c4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10e      	bne.n	800577c <HAL_I2C_Init+0x1a4>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1e58      	subs	r0, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6859      	ldr	r1, [r3, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	440b      	add	r3, r1
 800576c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005770:	3301      	adds	r3, #1
 8005772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	e00f      	b.n	800579c <HAL_I2C_Init+0x1c4>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	1e58      	subs	r0, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	0099      	lsls	r1, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005792:	3301      	adds	r3, #1
 8005794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	6809      	ldr	r1, [r1, #0]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6911      	ldr	r1, [r2, #16]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68d2      	ldr	r2, [r2, #12]
 80057d6:	4311      	orrs	r1, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	430b      	orrs	r3, r1
 80057de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	000186a0 	.word	0x000186a0
 8005838:	001e847f 	.word	0x001e847f
 800583c:	003d08ff 	.word	0x003d08ff
 8005840:	431bde83 	.word	0x431bde83
 8005844:	10624dd3 	.word	0x10624dd3

08005848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	461a      	mov	r2, r3
 8005854:	460b      	mov	r3, r1
 8005856:	817b      	strh	r3, [r7, #10]
 8005858:	4613      	mov	r3, r2
 800585a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800585c:	f7fe fa64 	bl	8003d28 <HAL_GetTick>
 8005860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b20      	cmp	r3, #32
 800586c:	f040 80e0 	bne.w	8005a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2319      	movs	r3, #25
 8005876:	2201      	movs	r2, #1
 8005878:	4970      	ldr	r1, [pc, #448]	; (8005a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fc56 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
 8005888:	e0d3      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_I2C_Master_Transmit+0x50>
 8005894:	2302      	movs	r3, #2
 8005896:	e0cc      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d007      	beq.n	80058be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0201 	orr.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2210      	movs	r2, #16
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	893a      	ldrh	r2, [r7, #8]
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a50      	ldr	r2, [pc, #320]	; (8005a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005900:	8979      	ldrh	r1, [r7, #10]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fac2 	bl	8005e90 <I2C_MasterRequestWrite>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e08d      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800592c:	e066      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	6a39      	ldr	r1, [r7, #32]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fcd0 	bl	80062d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b04      	cmp	r3, #4
 8005944:	d107      	bne.n	8005956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e06b      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d11b      	bne.n	80059d0 <HAL_I2C_Master_Transmit+0x188>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	6a39      	ldr	r1, [r7, #32]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fcc0 	bl	800635a <I2C_WaitOnBTFFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00d      	beq.n	80059fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d107      	bne.n	80059f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e01a      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d194      	bne.n	800592e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	00100002 	.word	0x00100002
 8005a40:	ffff0000 	.word	0xffff0000

08005a44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	460b      	mov	r3, r1
 8005a52:	817b      	strh	r3, [r7, #10]
 8005a54:	4613      	mov	r3, r2
 8005a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a58:	f7fe f966 	bl	8003d28 <HAL_GetTick>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	f040 820b 	bne.w	8005e82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2319      	movs	r3, #25
 8005a72:	2201      	movs	r2, #1
 8005a74:	497c      	ldr	r1, [pc, #496]	; (8005c68 <HAL_I2C_Master_Receive+0x224>)
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fb58 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
 8005a84:	e1fe      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_I2C_Master_Receive+0x50>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e1f7      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d007      	beq.n	8005aba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2222      	movs	r2, #34	; 0x22
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	893a      	ldrh	r2, [r7, #8]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a5c      	ldr	r2, [pc, #368]	; (8005c6c <HAL_I2C_Master_Receive+0x228>)
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005afc:	8979      	ldrh	r1, [r7, #10]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fa46 	bl	8005f94 <I2C_MasterRequestRead>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e1b8      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d113      	bne.n	8005b42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e18c      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d11b      	bne.n	8005b82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e16c      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d11b      	bne.n	8005bc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	e14c      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005be8:	e138      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	f200 80f1 	bhi.w	8005dd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d123      	bne.n	8005c44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fbeb 	bl	80063dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e139      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c42:	e10b      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d14e      	bne.n	8005cea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	2200      	movs	r2, #0
 8005c54:	4906      	ldr	r1, [pc, #24]	; (8005c70 <HAL_I2C_Master_Receive+0x22c>)
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fa68 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e10e      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
 8005c66:	bf00      	nop
 8005c68:	00100002 	.word	0x00100002
 8005c6c:	ffff0000 	.word	0xffff0000
 8005c70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ce8:	e0b8      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4966      	ldr	r1, [pc, #408]	; (8005e8c <HAL_I2C_Master_Receive+0x448>)
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa19 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0bf      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	494f      	ldr	r1, [pc, #316]	; (8005e8c <HAL_I2C_Master_Receive+0x448>)
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f9eb 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e091      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd4:	e042      	b.n	8005e5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fafe 	bl	80063dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e04c      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d118      	bne.n	8005e5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f aec2 	bne.w	8005bea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e82:	2302      	movs	r3, #2
  }
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	00010004 	.word	0x00010004

08005e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d006      	beq.n	8005eba <I2C_MasterRequestWrite+0x2a>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d003      	beq.n	8005eba <I2C_MasterRequestWrite+0x2a>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eb8:	d108      	bne.n	8005ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e00b      	b.n	8005ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b12      	cmp	r3, #18
 8005ed2:	d107      	bne.n	8005ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f91b 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00c      	beq.n	8005f16 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e035      	b.n	8005f82 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1e:	d108      	bne.n	8005f32 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f20:	897b      	ldrh	r3, [r7, #10]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f2e:	611a      	str	r2, [r3, #16]
 8005f30:	e01b      	b.n	8005f6a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f32:	897b      	ldrh	r3, [r7, #10]
 8005f34:	11db      	asrs	r3, r3, #7
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 0306 	and.w	r3, r3, #6
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f063 030f 	orn	r3, r3, #15
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	490f      	ldr	r1, [pc, #60]	; (8005f8c <I2C_MasterRequestWrite+0xfc>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f942 	bl	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e010      	b.n	8005f82 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f60:	897b      	ldrh	r3, [r7, #10]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4908      	ldr	r1, [pc, #32]	; (8005f90 <I2C_MasterRequestWrite+0x100>)
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f932 	bl	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	00010008 	.word	0x00010008
 8005f90:	00010002 	.word	0x00010002

08005f94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d006      	beq.n	8005fce <I2C_MasterRequestRead+0x3a>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <I2C_MasterRequestRead+0x3a>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fcc:	d108      	bne.n	8005fe0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e00b      	b.n	8005ff8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b11      	cmp	r3, #17
 8005fe6:	d107      	bne.n	8005ff8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f891 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e078      	b.n	800611c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006032:	d108      	bne.n	8006046 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006034:	897b      	ldrh	r3, [r7, #10]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	611a      	str	r2, [r3, #16]
 8006044:	e05e      	b.n	8006104 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	11db      	asrs	r3, r3, #7
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0306 	and.w	r3, r3, #6
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f063 030f 	orn	r3, r3, #15
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4930      	ldr	r1, [pc, #192]	; (8006124 <I2C_MasterRequestRead+0x190>)
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f8b8 	bl	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e053      	b.n	800611c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006074:	897b      	ldrh	r3, [r7, #10]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4929      	ldr	r1, [pc, #164]	; (8006128 <I2C_MasterRequestRead+0x194>)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f8a8 	bl	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e043      	b.n	800611c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f830 	bl	800612c <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e017      	b.n	800611c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	11db      	asrs	r3, r3, #7
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f063 030e 	orn	r3, r3, #14
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4907      	ldr	r1, [pc, #28]	; (8006128 <I2C_MasterRequestRead+0x194>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f865 	bl	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	00010008 	.word	0x00010008
 8006128:	00010002 	.word	0x00010002

0800612c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800613c:	e025      	b.n	800618a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d021      	beq.n	800618a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fd fdef 	bl	8003d28 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e023      	b.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10d      	bne.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	43da      	mvns	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4013      	ands	r3, r2
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	e00c      	b.n	80061ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d0b6      	beq.n	800613e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e8:	e051      	b.n	800628e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f8:	d123      	bne.n	8006242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0204 	orr.w	r2, r3, #4
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e046      	b.n	80062d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d021      	beq.n	800628e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fd fd6d 	bl	8003d28 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d116      	bne.n	800628e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e020      	b.n	80062d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10c      	bne.n	80062b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	43da      	mvns	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	e00b      	b.n	80062ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d18d      	bne.n	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062e4:	e02d      	b.n	8006342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f8ce 	bl	8006488 <I2C_IsAcknowledgeFailed>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e02d      	b.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d021      	beq.n	8006342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fd fd13 	bl	8003d28 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d116      	bne.n	8006342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e007      	b.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d1ca      	bne.n	80062e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006366:	e02d      	b.n	80063c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f88d 	bl	8006488 <I2C_IsAcknowledgeFailed>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e02d      	b.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d021      	beq.n	80063c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006380:	f7fd fcd2 	bl	8003d28 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d302      	bcc.n	8006396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d116      	bne.n	80063c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	f043 0220 	orr.w	r2, r3, #32
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e007      	b.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d1ca      	bne.n	8006368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e8:	e042      	b.n	8006470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d119      	bne.n	800642c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0210 	mvn.w	r2, #16
 8006400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e029      	b.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642c:	f7fd fc7c 	bl	8003d28 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d302      	bcc.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d116      	bne.n	8006470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e007      	b.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d1b5      	bne.n	80063ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649e:	d11b      	bne.n	80064d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	f043 0204 	orr.w	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e25b      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d075      	beq.n	80065f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006506:	4ba3      	ldr	r3, [pc, #652]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 030c 	and.w	r3, r3, #12
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00c      	beq.n	800652c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006512:	4ba0      	ldr	r3, [pc, #640]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800651a:	2b08      	cmp	r3, #8
 800651c:	d112      	bne.n	8006544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800651e:	4b9d      	ldr	r3, [pc, #628]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652a:	d10b      	bne.n	8006544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652c:	4b99      	ldr	r3, [pc, #612]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d05b      	beq.n	80065f0 <HAL_RCC_OscConfig+0x108>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d157      	bne.n	80065f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e236      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d106      	bne.n	800655c <HAL_RCC_OscConfig+0x74>
 800654e:	4b91      	ldr	r3, [pc, #580]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a90      	ldr	r2, [pc, #576]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e01d      	b.n	8006598 <HAL_RCC_OscConfig+0xb0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006564:	d10c      	bne.n	8006580 <HAL_RCC_OscConfig+0x98>
 8006566:	4b8b      	ldr	r3, [pc, #556]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a8a      	ldr	r2, [pc, #552]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800656c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	4b88      	ldr	r3, [pc, #544]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a87      	ldr	r2, [pc, #540]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e00b      	b.n	8006598 <HAL_RCC_OscConfig+0xb0>
 8006580:	4b84      	ldr	r3, [pc, #528]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a83      	ldr	r2, [pc, #524]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4b81      	ldr	r3, [pc, #516]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a80      	ldr	r2, [pc, #512]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d013      	beq.n	80065c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7fd fbc2 	bl	8003d28 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a8:	f7fd fbbe 	bl	8003d28 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	; 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e1fb      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ba:	4b76      	ldr	r3, [pc, #472]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0xc0>
 80065c6:	e014      	b.n	80065f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c8:	f7fd fbae 	bl	8003d28 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d0:	f7fd fbaa 	bl	8003d28 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	; 0x64
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e1e7      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065e2:	4b6c      	ldr	r3, [pc, #432]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0xe8>
 80065ee:	e000      	b.n	80065f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d063      	beq.n	80066c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065fe:	4b65      	ldr	r3, [pc, #404]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 030c 	and.w	r3, r3, #12
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800660a:	4b62      	ldr	r3, [pc, #392]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006612:	2b08      	cmp	r3, #8
 8006614:	d11c      	bne.n	8006650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006616:	4b5f      	ldr	r3, [pc, #380]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d116      	bne.n	8006650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006622:	4b5c      	ldr	r3, [pc, #368]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_RCC_OscConfig+0x152>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d001      	beq.n	800663a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e1bb      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663a:	4b56      	ldr	r3, [pc, #344]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4952      	ldr	r1, [pc, #328]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800664a:	4313      	orrs	r3, r2
 800664c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664e:	e03a      	b.n	80066c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006658:	4b4f      	ldr	r3, [pc, #316]	; (8006798 <HAL_RCC_OscConfig+0x2b0>)
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665e:	f7fd fb63 	bl	8003d28 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006666:	f7fd fb5f 	bl	8003d28 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e19c      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006678:	4b46      	ldr	r3, [pc, #280]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0f0      	beq.n	8006666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006684:	4b43      	ldr	r3, [pc, #268]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4940      	ldr	r1, [pc, #256]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006694:	4313      	orrs	r3, r2
 8006696:	600b      	str	r3, [r1, #0]
 8006698:	e015      	b.n	80066c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800669a:	4b3f      	ldr	r3, [pc, #252]	; (8006798 <HAL_RCC_OscConfig+0x2b0>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a0:	f7fd fb42 	bl	8003d28 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066a8:	f7fd fb3e 	bl	8003d28 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e17b      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ba:	4b36      	ldr	r3, [pc, #216]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d030      	beq.n	8006734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066da:	4b30      	ldr	r3, [pc, #192]	; (800679c <HAL_RCC_OscConfig+0x2b4>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fd fb22 	bl	8003d28 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066e8:	f7fd fb1e 	bl	8003d28 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e15b      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fa:	4b26      	ldr	r3, [pc, #152]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x200>
 8006706:	e015      	b.n	8006734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006708:	4b24      	ldr	r3, [pc, #144]	; (800679c <HAL_RCC_OscConfig+0x2b4>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670e:	f7fd fb0b 	bl	8003d28 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006716:	f7fd fb07 	bl	8003d28 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e144      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800672a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80a0 	beq.w	8006882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10f      	bne.n	8006772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006760:	6413      	str	r3, [r2, #64]	; 0x40
 8006762:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <HAL_RCC_OscConfig+0x2ac>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_RCC_OscConfig+0x2b8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d121      	bne.n	80067c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_RCC_OscConfig+0x2b8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a07      	ldr	r2, [pc, #28]	; (80067a0 <HAL_RCC_OscConfig+0x2b8>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678a:	f7fd facd 	bl	8003d28 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006790:	e011      	b.n	80067b6 <HAL_RCC_OscConfig+0x2ce>
 8006792:	bf00      	nop
 8006794:	40023800 	.word	0x40023800
 8006798:	42470000 	.word	0x42470000
 800679c:	42470e80 	.word	0x42470e80
 80067a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a4:	f7fd fac0 	bl	8003d28 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e0fd      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b6:	4b81      	ldr	r3, [pc, #516]	; (80069bc <HAL_RCC_OscConfig+0x4d4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f0      	beq.n	80067a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d106      	bne.n	80067d8 <HAL_RCC_OscConfig+0x2f0>
 80067ca:	4b7d      	ldr	r3, [pc, #500]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	4a7c      	ldr	r2, [pc, #496]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067d0:	f043 0301 	orr.w	r3, r3, #1
 80067d4:	6713      	str	r3, [r2, #112]	; 0x70
 80067d6:	e01c      	b.n	8006812 <HAL_RCC_OscConfig+0x32a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d10c      	bne.n	80067fa <HAL_RCC_OscConfig+0x312>
 80067e0:	4b77      	ldr	r3, [pc, #476]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a76      	ldr	r2, [pc, #472]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	4b74      	ldr	r3, [pc, #464]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	4a73      	ldr	r2, [pc, #460]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6713      	str	r3, [r2, #112]	; 0x70
 80067f8:	e00b      	b.n	8006812 <HAL_RCC_OscConfig+0x32a>
 80067fa:	4b71      	ldr	r3, [pc, #452]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a70      	ldr	r2, [pc, #448]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	4b6e      	ldr	r3, [pc, #440]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	4a6d      	ldr	r2, [pc, #436]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 800680c:	f023 0304 	bic.w	r3, r3, #4
 8006810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d015      	beq.n	8006846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681a:	f7fd fa85 	bl	8003d28 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006820:	e00a      	b.n	8006838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006822:	f7fd fa81 	bl	8003d28 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006830:	4293      	cmp	r3, r2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e0bc      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ee      	beq.n	8006822 <HAL_RCC_OscConfig+0x33a>
 8006844:	e014      	b.n	8006870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006846:	f7fd fa6f 	bl	8003d28 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684c:	e00a      	b.n	8006864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fd fa6b 	bl	8003d28 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e0a6      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006864:	4b56      	ldr	r3, [pc, #344]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ee      	bne.n	800684e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006876:	4b52      	ldr	r3, [pc, #328]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a51      	ldr	r2, [pc, #324]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 800687c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 8092 	beq.w	80069b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800688c:	4b4c      	ldr	r3, [pc, #304]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b08      	cmp	r3, #8
 8006896:	d05c      	beq.n	8006952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d141      	bne.n	8006924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <HAL_RCC_OscConfig+0x4dc>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fd fa3f 	bl	8003d28 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ae:	f7fd fa3b 	bl	8003d28 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e078      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c0:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f0      	bne.n	80068ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	019b      	lsls	r3, r3, #6
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	3b01      	subs	r3, #1
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	4933      	ldr	r1, [pc, #204]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068f6:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <HAL_RCC_OscConfig+0x4dc>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fd fa14 	bl	8003d28 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006904:	f7fd fa10 	bl	8003d28 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e04d      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006916:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x41c>
 8006922:	e045      	b.n	80069b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006924:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <HAL_RCC_OscConfig+0x4dc>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692a:	f7fd f9fd 	bl	8003d28 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006932:	f7fd f9f9 	bl	8003d28 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e036      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f0      	bne.n	8006932 <HAL_RCC_OscConfig+0x44a>
 8006950:	e02e      	b.n	80069b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e029      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800695e:	4b18      	ldr	r3, [pc, #96]	; (80069c0 <HAL_RCC_OscConfig+0x4d8>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	429a      	cmp	r2, r3
 8006970:	d11c      	bne.n	80069ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697c:	429a      	cmp	r2, r3
 800697e:	d115      	bne.n	80069ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006986:	4013      	ands	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800698c:	4293      	cmp	r3, r2
 800698e:	d10d      	bne.n	80069ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800699a:	429a      	cmp	r2, r3
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d001      	beq.n	80069b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40007000 	.word	0x40007000
 80069c0:	40023800 	.word	0x40023800
 80069c4:	42470060 	.word	0x42470060

080069c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0cc      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069dc:	4b68      	ldr	r3, [pc, #416]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d90c      	bls.n	8006a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ea:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b63      	ldr	r3, [pc, #396]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0b8      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d020      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a1c:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4a58      	ldr	r2, [pc, #352]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a34:	4b53      	ldr	r3, [pc, #332]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a52      	ldr	r2, [pc, #328]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a40:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	494d      	ldr	r1, [pc, #308]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d044      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	4b47      	ldr	r3, [pc, #284]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d119      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e07f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d107      	bne.n	8006a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a86:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e06f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a96:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e067      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f023 0203 	bic.w	r2, r3, #3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4934      	ldr	r1, [pc, #208]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ab8:	f7fd f936 	bl	8003d28 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006abe:	e00a      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac0:	f7fd f932 	bl	8003d28 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e04f      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 020c 	and.w	r2, r3, #12
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1eb      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d20c      	bcs.n	8006b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCC_ClockConfig+0x1b8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e032      	b.n	8006b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b1c:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4916      	ldr	r1, [pc, #88]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b4e:	f000 f821 	bl	8006b94 <HAL_RCC_GetSysClockFreq>
 8006b52:	4601      	mov	r1, r0
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	fa21 f303 	lsr.w	r3, r1, r3
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1c8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fd f896 	bl	8003ca0 <HAL_InitTick>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023c00 	.word	0x40023c00
 8006b84:	40023800 	.word	0x40023800
 8006b88:	08008cb8 	.word	0x08008cb8
 8006b8c:	20000000 	.word	0x20000000
 8006b90:	20000004 	.word	0x20000004

08006b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006baa:	4b50      	ldr	r3, [pc, #320]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d007      	beq.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d008      	beq.n	8006bcc <HAL_RCC_GetSysClockFreq+0x38>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 808d 	bne.w	8006cda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bc2:	60bb      	str	r3, [r7, #8]
       break;
 8006bc4:	e08c      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bc6:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bc8:	60bb      	str	r3, [r7, #8]
      break;
 8006bca:	e089      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bcc:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bd6:	4b45      	ldr	r3, [pc, #276]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d023      	beq.n	8006c2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be2:	4b42      	ldr	r3, [pc, #264]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	f04f 0400 	mov.w	r4, #0
 8006bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	ea03 0501 	and.w	r5, r3, r1
 8006bf8:	ea04 0602 	and.w	r6, r4, r2
 8006bfc:	4a3d      	ldr	r2, [pc, #244]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bfe:	fb02 f106 	mul.w	r1, r2, r6
 8006c02:	2200      	movs	r2, #0
 8006c04:	fb02 f205 	mul.w	r2, r2, r5
 8006c08:	440a      	add	r2, r1
 8006c0a:	493a      	ldr	r1, [pc, #232]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c0c:	fba5 0101 	umull	r0, r1, r5, r1
 8006c10:	1853      	adds	r3, r2, r1
 8006c12:	4619      	mov	r1, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f04f 0400 	mov.w	r4, #0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	f7fa f853 	bl	8000cc8 <__aeabi_uldivmod>
 8006c22:	4603      	mov	r3, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	e049      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2a:	4b30      	ldr	r3, [pc, #192]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	f04f 0400 	mov.w	r4, #0
 8006c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	ea03 0501 	and.w	r5, r3, r1
 8006c40:	ea04 0602 	and.w	r6, r4, r2
 8006c44:	4629      	mov	r1, r5
 8006c46:	4632      	mov	r2, r6
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	f04f 0400 	mov.w	r4, #0
 8006c50:	0154      	lsls	r4, r2, #5
 8006c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c56:	014b      	lsls	r3, r1, #5
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	1b49      	subs	r1, r1, r5
 8006c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	f04f 0400 	mov.w	r4, #0
 8006c6a:	0194      	lsls	r4, r2, #6
 8006c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c70:	018b      	lsls	r3, r1, #6
 8006c72:	1a5b      	subs	r3, r3, r1
 8006c74:	eb64 0402 	sbc.w	r4, r4, r2
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	00e2      	lsls	r2, r4, #3
 8006c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c86:	00d9      	lsls	r1, r3, #3
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	195b      	adds	r3, r3, r5
 8006c8e:	eb44 0406 	adc.w	r4, r4, r6
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	02a2      	lsls	r2, r4, #10
 8006c9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ca0:	0299      	lsls	r1, r3, #10
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4621      	mov	r1, r4
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f04f 0400 	mov.w	r4, #0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	f7fa f808 	bl	8000cc8 <__aeabi_uldivmod>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCC_GetSysClockFreq+0x158>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	3301      	adds	r3, #1
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	60bb      	str	r3, [r7, #8]
      break;
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006cdc:	60bb      	str	r3, [r7, #8]
      break;
 8006cde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	00f42400 	.word	0x00f42400
 8006cf4:	00b71b00 	.word	0x00b71b00

08006cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000000 	.word	0x20000000

08006d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d14:	f7ff fff0 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	0a9b      	lsrs	r3, r3, #10
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	4a03      	ldr	r2, [pc, #12]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d26:	5cd3      	ldrb	r3, [r2, r3]
 8006d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40023800 	.word	0x40023800
 8006d34:	08008cc8 	.word	0x08008cc8

08006d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d3c:	f7ff ffdc 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d40:	4601      	mov	r1, r0
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	0b5b      	lsrs	r3, r3, #13
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	4a03      	ldr	r2, [pc, #12]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	08008cc8 	.word	0x08008cc8

08006d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e056      	b.n	8006e20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fc fb8b 	bl	80034a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2202      	movs	r2, #2
 8006d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	ea42 0103 	orr.w	r1, r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	f003 0104 	and.w	r1, r3, #4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e01d      	b.n	8006e76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc fc3c 	bl	80036cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f000 fb56 	bl	8007518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d007      	beq.n	8006eb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e01d      	b.n	8006f14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fc fba1 	bl	8003634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f000 fb07 	bl	8007518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fd42 	bl	80079b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <HAL_TIM_PWM_Start+0x74>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIM_PWM_Start+0x2c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a14      	ldr	r2, [pc, #80]	; (8006f94 <HAL_TIM_PWM_Start+0x78>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d101      	bne.n	8006f4c <HAL_TIM_PWM_Start+0x30>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_TIM_PWM_Start+0x32>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b06      	cmp	r3, #6
 8006f72:	d007      	beq.n	8006f84 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40010400 	.word	0x40010400

08006f98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e083      	b.n	80070b4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fc fab9 	bl	8003538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f000 fa93 	bl	8007518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	4313      	orrs	r3, r2
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007038:	f023 030c 	bic.w	r3, r3, #12
 800703c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	4313      	orrs	r3, r2
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	011a      	lsls	r2, r3, #4
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	031b      	lsls	r3, r3, #12
 8007068:	4313      	orrs	r3, r2
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007076:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	4313      	orrs	r3, r2
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <HAL_TIM_Encoder_Start+0x16>
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d008      	beq.n	80070e2 <HAL_TIM_Encoder_Start+0x26>
 80070d0:	e00f      	b.n	80070f2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fc6c 	bl	80079b8 <TIM_CCxChannelCmd>
      break;
 80070e0:	e016      	b.n	8007110 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2201      	movs	r2, #1
 80070e8:	2104      	movs	r1, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fc64 	bl	80079b8 <TIM_CCxChannelCmd>
      break;
 80070f0:	e00e      	b.n	8007110 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2201      	movs	r2, #1
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fc5c 	bl	80079b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2201      	movs	r2, #1
 8007106:	2104      	movs	r1, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fc55 	bl	80079b8 <TIM_CCxChannelCmd>
      break;
 800710e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b02      	cmp	r3, #2
 800713e:	d122      	bne.n	8007186 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b02      	cmp	r3, #2
 800714c:	d11b      	bne.n	8007186 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f06f 0202 	mvn.w	r2, #2
 8007156:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f9b5 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 8007172:	e005      	b.n	8007180 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f9a7 	bl	80074c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9b8 	bl	80074f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d122      	bne.n	80071da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d11b      	bne.n	80071da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f06f 0204 	mvn.w	r2, #4
 80071aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f98b 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 80071c6:	e005      	b.n	80071d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f97d 	bl	80074c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f98e 	bl	80074f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d122      	bne.n	800722e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d11b      	bne.n	800722e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f06f 0208 	mvn.w	r2, #8
 80071fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f961 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 800721a:	e005      	b.n	8007228 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f953 	bl	80074c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f964 	bl	80074f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b10      	cmp	r3, #16
 800723a:	d122      	bne.n	8007282 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b10      	cmp	r3, #16
 8007248:	d11b      	bne.n	8007282 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0210 	mvn.w	r2, #16
 8007252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2208      	movs	r2, #8
 8007258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f937 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 800726e:	e005      	b.n	800727c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f929 	bl	80074c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f93a 	bl	80074f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b01      	cmp	r3, #1
 800728e:	d10e      	bne.n	80072ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b01      	cmp	r3, #1
 800729c:	d107      	bne.n	80072ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f06f 0201 	mvn.w	r2, #1
 80072a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fa f833 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d10e      	bne.n	80072da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c6:	2b80      	cmp	r3, #128	; 0x80
 80072c8:	d107      	bne.n	80072da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc1b 	bl	8007b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d10e      	bne.n	8007306 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f8ff 	bl	8007504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b20      	cmp	r3, #32
 8007312:	d10e      	bne.n	8007332 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b20      	cmp	r3, #32
 8007320:	d107      	bne.n	8007332 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0220 	mvn.w	r2, #32
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbe5 	bl	8007afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007352:	2302      	movs	r3, #2
 8007354:	e0b4      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b0c      	cmp	r3, #12
 800736a:	f200 809f 	bhi.w	80074ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073a9 	.word	0x080073a9
 8007378:	080074ad 	.word	0x080074ad
 800737c:	080074ad 	.word	0x080074ad
 8007380:	080074ad 	.word	0x080074ad
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080074ad 	.word	0x080074ad
 800738c:	080074ad 	.word	0x080074ad
 8007390:	080074ad 	.word	0x080074ad
 8007394:	0800742b 	.word	0x0800742b
 8007398:	080074ad 	.word	0x080074ad
 800739c:	080074ad 	.word	0x080074ad
 80073a0:	080074ad 	.word	0x080074ad
 80073a4:	0800746b 	.word	0x0800746b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f952 	bl	8007658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0208 	orr.w	r2, r2, #8
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0204 	bic.w	r2, r2, #4
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	619a      	str	r2, [r3, #24]
      break;
 80073e6:	e062      	b.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f9a2 	bl	8007738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6999      	ldr	r1, [r3, #24]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	021a      	lsls	r2, r3, #8
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	619a      	str	r2, [r3, #24]
      break;
 8007428:	e041      	b.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 f9f7 	bl	8007824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0208 	orr.w	r2, r2, #8
 8007444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0204 	bic.w	r2, r2, #4
 8007454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	61da      	str	r2, [r3, #28]
      break;
 8007468:	e021      	b.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fa4b 	bl	800790c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69d9      	ldr	r1, [r3, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	021a      	lsls	r2, r3, #8
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	61da      	str	r2, [r3, #28]
      break;
 80074aa:	e000      	b.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80074ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a40      	ldr	r2, [pc, #256]	; (800762c <TIM_Base_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007536:	d00f      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a3d      	ldr	r2, [pc, #244]	; (8007630 <TIM_Base_SetConfig+0x118>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00b      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <TIM_Base_SetConfig+0x11c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d007      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a3b      	ldr	r2, [pc, #236]	; (8007638 <TIM_Base_SetConfig+0x120>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a3a      	ldr	r2, [pc, #232]	; (800763c <TIM_Base_SetConfig+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d108      	bne.n	800756a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2f      	ldr	r2, [pc, #188]	; (800762c <TIM_Base_SetConfig+0x114>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d02b      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007578:	d027      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <TIM_Base_SetConfig+0x118>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d023      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2b      	ldr	r2, [pc, #172]	; (8007634 <TIM_Base_SetConfig+0x11c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01f      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <TIM_Base_SetConfig+0x120>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01b      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a29      	ldr	r2, [pc, #164]	; (800763c <TIM_Base_SetConfig+0x124>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d017      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a28      	ldr	r2, [pc, #160]	; (8007640 <TIM_Base_SetConfig+0x128>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a27      	ldr	r2, [pc, #156]	; (8007644 <TIM_Base_SetConfig+0x12c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00f      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a26      	ldr	r2, [pc, #152]	; (8007648 <TIM_Base_SetConfig+0x130>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00b      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <TIM_Base_SetConfig+0x134>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a24      	ldr	r2, [pc, #144]	; (8007650 <TIM_Base_SetConfig+0x138>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a23      	ldr	r2, [pc, #140]	; (8007654 <TIM_Base_SetConfig+0x13c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d108      	bne.n	80075dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a0a      	ldr	r2, [pc, #40]	; (800762c <TIM_Base_SetConfig+0x114>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0xf8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a0c      	ldr	r2, [pc, #48]	; (800763c <TIM_Base_SetConfig+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d103      	bne.n	8007618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	615a      	str	r2, [r3, #20]
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40010400 	.word	0x40010400
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800
 800764c:	40001800 	.word	0x40001800
 8007650:	40001c00 	.word	0x40001c00
 8007654:	40002000 	.word	0x40002000

08007658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f023 0201 	bic.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0302 	bic.w	r3, r3, #2
 80076a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <TIM_OC1_SetConfig+0xd8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC1_SetConfig+0x64>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <TIM_OC1_SetConfig+0xdc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0308 	bic.w	r3, r3, #8
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0304 	bic.w	r3, r3, #4
 80076d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a15      	ldr	r2, [pc, #84]	; (8007730 <TIM_OC1_SetConfig+0xd8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC1_SetConfig+0x8e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a14      	ldr	r2, [pc, #80]	; (8007734 <TIM_OC1_SetConfig+0xdc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d111      	bne.n	800770a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	621a      	str	r2, [r3, #32]
}
 8007724:	bf00      	nop
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400

08007738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	f023 0210 	bic.w	r2, r3, #16
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a22      	ldr	r2, [pc, #136]	; (800781c <TIM_OC2_SetConfig+0xe4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_OC2_SetConfig+0x68>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <TIM_OC2_SetConfig+0xe8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10d      	bne.n	80077bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a17      	ldr	r2, [pc, #92]	; (800781c <TIM_OC2_SetConfig+0xe4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x94>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	; (8007820 <TIM_OC2_SetConfig+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d113      	bne.n	80077f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40010400 	.word	0x40010400

08007824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a21      	ldr	r2, [pc, #132]	; (8007904 <TIM_OC3_SetConfig+0xe0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC3_SetConfig+0x66>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a20      	ldr	r2, [pc, #128]	; (8007908 <TIM_OC3_SetConfig+0xe4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d10d      	bne.n	80078a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <TIM_OC3_SetConfig+0xe0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC3_SetConfig+0x92>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <TIM_OC3_SetConfig+0xe4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d113      	bne.n	80078de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	621a      	str	r2, [r3, #32]
}
 80078f8:	bf00      	nop
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	40010000 	.word	0x40010000
 8007908:	40010400 	.word	0x40010400

0800790c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	031b      	lsls	r3, r3, #12
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a12      	ldr	r2, [pc, #72]	; (80079b0 <TIM_OC4_SetConfig+0xa4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC4_SetConfig+0x68>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <TIM_OC4_SetConfig+0xa8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d109      	bne.n	8007988 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	019b      	lsls	r3, r3, #6
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40010400 	.word	0x40010400

080079b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2201      	movs	r2, #1
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	43db      	mvns	r3, r3
 80079da:	401a      	ands	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	fa01 f303 	lsl.w	r3, r1, r3
 80079f0:	431a      	orrs	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e05a      	b.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d022      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a68:	d01d      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d018      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1a      	ldr	r2, [pc, #104]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a17      	ldr	r2, [pc, #92]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40001800 	.word	0x40001800

08007afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e03f      	b.n	8007bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fb feac 	bl	80038a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f829 	bl	8007bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	431a      	orrs	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007c02:	f023 030c 	bic.w	r3, r3, #12
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2e:	f040 818b 	bne.w	8007f48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4ac1      	ldr	r2, [pc, #772]	; (8007f3c <UART_SetConfig+0x37c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d005      	beq.n	8007c48 <UART_SetConfig+0x88>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4abf      	ldr	r2, [pc, #764]	; (8007f40 <UART_SetConfig+0x380>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f040 80bd 	bne.w	8007dc2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c48:	f7ff f876 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 8007c4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	461d      	mov	r5, r3
 8007c52:	f04f 0600 	mov.w	r6, #0
 8007c56:	46a8      	mov	r8, r5
 8007c58:	46b1      	mov	r9, r6
 8007c5a:	eb18 0308 	adds.w	r3, r8, r8
 8007c5e:	eb49 0409 	adc.w	r4, r9, r9
 8007c62:	4698      	mov	r8, r3
 8007c64:	46a1      	mov	r9, r4
 8007c66:	eb18 0805 	adds.w	r8, r8, r5
 8007c6a:	eb49 0906 	adc.w	r9, r9, r6
 8007c6e:	f04f 0100 	mov.w	r1, #0
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c82:	4688      	mov	r8, r1
 8007c84:	4691      	mov	r9, r2
 8007c86:	eb18 0005 	adds.w	r0, r8, r5
 8007c8a:	eb49 0106 	adc.w	r1, r9, r6
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	461d      	mov	r5, r3
 8007c94:	f04f 0600 	mov.w	r6, #0
 8007c98:	196b      	adds	r3, r5, r5
 8007c9a:	eb46 0406 	adc.w	r4, r6, r6
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	f7f9 f811 	bl	8000cc8 <__aeabi_uldivmod>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	461a      	mov	r2, r3
 8007cac:	4ba5      	ldr	r3, [pc, #660]	; (8007f44 <UART_SetConfig+0x384>)
 8007cae:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	461d      	mov	r5, r3
 8007cbc:	f04f 0600 	mov.w	r6, #0
 8007cc0:	46a9      	mov	r9, r5
 8007cc2:	46b2      	mov	sl, r6
 8007cc4:	eb19 0309 	adds.w	r3, r9, r9
 8007cc8:	eb4a 040a 	adc.w	r4, sl, sl
 8007ccc:	4699      	mov	r9, r3
 8007cce:	46a2      	mov	sl, r4
 8007cd0:	eb19 0905 	adds.w	r9, r9, r5
 8007cd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ce4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ce8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cec:	4689      	mov	r9, r1
 8007cee:	4692      	mov	sl, r2
 8007cf0:	eb19 0005 	adds.w	r0, r9, r5
 8007cf4:	eb4a 0106 	adc.w	r1, sl, r6
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	461d      	mov	r5, r3
 8007cfe:	f04f 0600 	mov.w	r6, #0
 8007d02:	196b      	adds	r3, r5, r5
 8007d04:	eb46 0406 	adc.w	r4, r6, r6
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	f7f8 ffdc 	bl	8000cc8 <__aeabi_uldivmod>
 8007d10:	4603      	mov	r3, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b8b      	ldr	r3, [pc, #556]	; (8007f44 <UART_SetConfig+0x384>)
 8007d18:	fba3 1302 	umull	r1, r3, r3, r2
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	2164      	movs	r1, #100	; 0x64
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	3332      	adds	r3, #50	; 0x32
 8007d2a:	4a86      	ldr	r2, [pc, #536]	; (8007f44 <UART_SetConfig+0x384>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d38:	4498      	add	r8, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	f04f 0600 	mov.w	r6, #0
 8007d42:	46a9      	mov	r9, r5
 8007d44:	46b2      	mov	sl, r6
 8007d46:	eb19 0309 	adds.w	r3, r9, r9
 8007d4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007d4e:	4699      	mov	r9, r3
 8007d50:	46a2      	mov	sl, r4
 8007d52:	eb19 0905 	adds.w	r9, r9, r5
 8007d56:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d5a:	f04f 0100 	mov.w	r1, #0
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d6e:	4689      	mov	r9, r1
 8007d70:	4692      	mov	sl, r2
 8007d72:	eb19 0005 	adds.w	r0, r9, r5
 8007d76:	eb4a 0106 	adc.w	r1, sl, r6
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	461d      	mov	r5, r3
 8007d80:	f04f 0600 	mov.w	r6, #0
 8007d84:	196b      	adds	r3, r5, r5
 8007d86:	eb46 0406 	adc.w	r4, r6, r6
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	f7f8 ff9b 	bl	8000cc8 <__aeabi_uldivmod>
 8007d92:	4603      	mov	r3, r0
 8007d94:	460c      	mov	r4, r1
 8007d96:	461a      	mov	r2, r3
 8007d98:	4b6a      	ldr	r3, [pc, #424]	; (8007f44 <UART_SetConfig+0x384>)
 8007d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2164      	movs	r1, #100	; 0x64
 8007da2:	fb01 f303 	mul.w	r3, r1, r3
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	3332      	adds	r3, #50	; 0x32
 8007dac:	4a65      	ldr	r2, [pc, #404]	; (8007f44 <UART_SetConfig+0x384>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	f003 0207 	and.w	r2, r3, #7
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4442      	add	r2, r8
 8007dbe:	609a      	str	r2, [r3, #8]
 8007dc0:	e26f      	b.n	80082a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dc2:	f7fe ffa5 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8007dc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	461d      	mov	r5, r3
 8007dcc:	f04f 0600 	mov.w	r6, #0
 8007dd0:	46a8      	mov	r8, r5
 8007dd2:	46b1      	mov	r9, r6
 8007dd4:	eb18 0308 	adds.w	r3, r8, r8
 8007dd8:	eb49 0409 	adc.w	r4, r9, r9
 8007ddc:	4698      	mov	r8, r3
 8007dde:	46a1      	mov	r9, r4
 8007de0:	eb18 0805 	adds.w	r8, r8, r5
 8007de4:	eb49 0906 	adc.w	r9, r9, r6
 8007de8:	f04f 0100 	mov.w	r1, #0
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007df4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007df8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007dfc:	4688      	mov	r8, r1
 8007dfe:	4691      	mov	r9, r2
 8007e00:	eb18 0005 	adds.w	r0, r8, r5
 8007e04:	eb49 0106 	adc.w	r1, r9, r6
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	461d      	mov	r5, r3
 8007e0e:	f04f 0600 	mov.w	r6, #0
 8007e12:	196b      	adds	r3, r5, r5
 8007e14:	eb46 0406 	adc.w	r4, r6, r6
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4623      	mov	r3, r4
 8007e1c:	f7f8 ff54 	bl	8000cc8 <__aeabi_uldivmod>
 8007e20:	4603      	mov	r3, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	461a      	mov	r2, r3
 8007e26:	4b47      	ldr	r3, [pc, #284]	; (8007f44 <UART_SetConfig+0x384>)
 8007e28:	fba3 2302 	umull	r2, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	461d      	mov	r5, r3
 8007e36:	f04f 0600 	mov.w	r6, #0
 8007e3a:	46a9      	mov	r9, r5
 8007e3c:	46b2      	mov	sl, r6
 8007e3e:	eb19 0309 	adds.w	r3, r9, r9
 8007e42:	eb4a 040a 	adc.w	r4, sl, sl
 8007e46:	4699      	mov	r9, r3
 8007e48:	46a2      	mov	sl, r4
 8007e4a:	eb19 0905 	adds.w	r9, r9, r5
 8007e4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e52:	f04f 0100 	mov.w	r1, #0
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e66:	4689      	mov	r9, r1
 8007e68:	4692      	mov	sl, r2
 8007e6a:	eb19 0005 	adds.w	r0, r9, r5
 8007e6e:	eb4a 0106 	adc.w	r1, sl, r6
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	461d      	mov	r5, r3
 8007e78:	f04f 0600 	mov.w	r6, #0
 8007e7c:	196b      	adds	r3, r5, r5
 8007e7e:	eb46 0406 	adc.w	r4, r6, r6
 8007e82:	461a      	mov	r2, r3
 8007e84:	4623      	mov	r3, r4
 8007e86:	f7f8 ff1f 	bl	8000cc8 <__aeabi_uldivmod>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <UART_SetConfig+0x384>)
 8007e92:	fba3 1302 	umull	r1, r3, r3, r2
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	2164      	movs	r1, #100	; 0x64
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	3332      	adds	r3, #50	; 0x32
 8007ea4:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <UART_SetConfig+0x384>)
 8007ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb2:	4498      	add	r8, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	f04f 0600 	mov.w	r6, #0
 8007ebc:	46a9      	mov	r9, r5
 8007ebe:	46b2      	mov	sl, r6
 8007ec0:	eb19 0309 	adds.w	r3, r9, r9
 8007ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ec8:	4699      	mov	r9, r3
 8007eca:	46a2      	mov	sl, r4
 8007ecc:	eb19 0905 	adds.w	r9, r9, r5
 8007ed0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ee8:	4689      	mov	r9, r1
 8007eea:	4692      	mov	sl, r2
 8007eec:	eb19 0005 	adds.w	r0, r9, r5
 8007ef0:	eb4a 0106 	adc.w	r1, sl, r6
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	461d      	mov	r5, r3
 8007efa:	f04f 0600 	mov.w	r6, #0
 8007efe:	196b      	adds	r3, r5, r5
 8007f00:	eb46 0406 	adc.w	r4, r6, r6
 8007f04:	461a      	mov	r2, r3
 8007f06:	4623      	mov	r3, r4
 8007f08:	f7f8 fede 	bl	8000cc8 <__aeabi_uldivmod>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	461a      	mov	r2, r3
 8007f12:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <UART_SetConfig+0x384>)
 8007f14:	fba3 1302 	umull	r1, r3, r3, r2
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	2164      	movs	r1, #100	; 0x64
 8007f1c:	fb01 f303 	mul.w	r3, r1, r3
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	3332      	adds	r3, #50	; 0x32
 8007f26:	4a07      	ldr	r2, [pc, #28]	; (8007f44 <UART_SetConfig+0x384>)
 8007f28:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	f003 0207 	and.w	r2, r3, #7
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4442      	add	r2, r8
 8007f38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f3a:	e1b2      	b.n	80082a2 <UART_SetConfig+0x6e2>
 8007f3c:	40011000 	.word	0x40011000
 8007f40:	40011400 	.word	0x40011400
 8007f44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4ad7      	ldr	r2, [pc, #860]	; (80082ac <UART_SetConfig+0x6ec>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d005      	beq.n	8007f5e <UART_SetConfig+0x39e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4ad6      	ldr	r2, [pc, #856]	; (80082b0 <UART_SetConfig+0x6f0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	f040 80d1 	bne.w	8008100 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f5e:	f7fe feeb 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 8007f62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	469a      	mov	sl, r3
 8007f68:	f04f 0b00 	mov.w	fp, #0
 8007f6c:	46d0      	mov	r8, sl
 8007f6e:	46d9      	mov	r9, fp
 8007f70:	eb18 0308 	adds.w	r3, r8, r8
 8007f74:	eb49 0409 	adc.w	r4, r9, r9
 8007f78:	4698      	mov	r8, r3
 8007f7a:	46a1      	mov	r9, r4
 8007f7c:	eb18 080a 	adds.w	r8, r8, sl
 8007f80:	eb49 090b 	adc.w	r9, r9, fp
 8007f84:	f04f 0100 	mov.w	r1, #0
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f98:	4688      	mov	r8, r1
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	eb1a 0508 	adds.w	r5, sl, r8
 8007fa0:	eb4b 0609 	adc.w	r6, fp, r9
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	f04f 0400 	mov.w	r4, #0
 8007fb6:	0094      	lsls	r4, r2, #2
 8007fb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fbc:	008b      	lsls	r3, r1, #2
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	f7f8 fe7f 	bl	8000cc8 <__aeabi_uldivmod>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4bb8      	ldr	r3, [pc, #736]	; (80082b4 <UART_SetConfig+0x6f4>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	469b      	mov	fp, r3
 8007fe0:	f04f 0c00 	mov.w	ip, #0
 8007fe4:	46d9      	mov	r9, fp
 8007fe6:	46e2      	mov	sl, ip
 8007fe8:	eb19 0309 	adds.w	r3, r9, r9
 8007fec:	eb4a 040a 	adc.w	r4, sl, sl
 8007ff0:	4699      	mov	r9, r3
 8007ff2:	46a2      	mov	sl, r4
 8007ff4:	eb19 090b 	adds.w	r9, r9, fp
 8007ff8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ffc:	f04f 0100 	mov.w	r1, #0
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008008:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800800c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008010:	4689      	mov	r9, r1
 8008012:	4692      	mov	sl, r2
 8008014:	eb1b 0509 	adds.w	r5, fp, r9
 8008018:	eb4c 060a 	adc.w	r6, ip, sl
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4619      	mov	r1, r3
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	f04f 0400 	mov.w	r4, #0
 800802e:	0094      	lsls	r4, r2, #2
 8008030:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008034:	008b      	lsls	r3, r1, #2
 8008036:	461a      	mov	r2, r3
 8008038:	4623      	mov	r3, r4
 800803a:	4628      	mov	r0, r5
 800803c:	4631      	mov	r1, r6
 800803e:	f7f8 fe43 	bl	8000cc8 <__aeabi_uldivmod>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	461a      	mov	r2, r3
 8008048:	4b9a      	ldr	r3, [pc, #616]	; (80082b4 <UART_SetConfig+0x6f4>)
 800804a:	fba3 1302 	umull	r1, r3, r3, r2
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	2164      	movs	r1, #100	; 0x64
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	3332      	adds	r3, #50	; 0x32
 800805c:	4a95      	ldr	r2, [pc, #596]	; (80082b4 <UART_SetConfig+0x6f4>)
 800805e:	fba2 2303 	umull	r2, r3, r2, r3
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008068:	4498      	add	r8, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	469b      	mov	fp, r3
 800806e:	f04f 0c00 	mov.w	ip, #0
 8008072:	46d9      	mov	r9, fp
 8008074:	46e2      	mov	sl, ip
 8008076:	eb19 0309 	adds.w	r3, r9, r9
 800807a:	eb4a 040a 	adc.w	r4, sl, sl
 800807e:	4699      	mov	r9, r3
 8008080:	46a2      	mov	sl, r4
 8008082:	eb19 090b 	adds.w	r9, r9, fp
 8008086:	eb4a 0a0c 	adc.w	sl, sl, ip
 800808a:	f04f 0100 	mov.w	r1, #0
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800809a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800809e:	4689      	mov	r9, r1
 80080a0:	4692      	mov	sl, r2
 80080a2:	eb1b 0509 	adds.w	r5, fp, r9
 80080a6:	eb4c 060a 	adc.w	r6, ip, sl
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	4619      	mov	r1, r3
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	f04f 0400 	mov.w	r4, #0
 80080bc:	0094      	lsls	r4, r2, #2
 80080be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080c2:	008b      	lsls	r3, r1, #2
 80080c4:	461a      	mov	r2, r3
 80080c6:	4623      	mov	r3, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	4631      	mov	r1, r6
 80080cc:	f7f8 fdfc 	bl	8000cc8 <__aeabi_uldivmod>
 80080d0:	4603      	mov	r3, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	461a      	mov	r2, r3
 80080d6:	4b77      	ldr	r3, [pc, #476]	; (80082b4 <UART_SetConfig+0x6f4>)
 80080d8:	fba3 1302 	umull	r1, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	2164      	movs	r1, #100	; 0x64
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	3332      	adds	r3, #50	; 0x32
 80080ea:	4a72      	ldr	r2, [pc, #456]	; (80082b4 <UART_SetConfig+0x6f4>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	095b      	lsrs	r3, r3, #5
 80080f2:	f003 020f 	and.w	r2, r3, #15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4442      	add	r2, r8
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	e0d0      	b.n	80082a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008100:	f7fe fe06 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8008104:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	469a      	mov	sl, r3
 800810a:	f04f 0b00 	mov.w	fp, #0
 800810e:	46d0      	mov	r8, sl
 8008110:	46d9      	mov	r9, fp
 8008112:	eb18 0308 	adds.w	r3, r8, r8
 8008116:	eb49 0409 	adc.w	r4, r9, r9
 800811a:	4698      	mov	r8, r3
 800811c:	46a1      	mov	r9, r4
 800811e:	eb18 080a 	adds.w	r8, r8, sl
 8008122:	eb49 090b 	adc.w	r9, r9, fp
 8008126:	f04f 0100 	mov.w	r1, #0
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008132:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008136:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800813a:	4688      	mov	r8, r1
 800813c:	4691      	mov	r9, r2
 800813e:	eb1a 0508 	adds.w	r5, sl, r8
 8008142:	eb4b 0609 	adc.w	r6, fp, r9
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	4619      	mov	r1, r3
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	0094      	lsls	r4, r2, #2
 800815a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800815e:	008b      	lsls	r3, r1, #2
 8008160:	461a      	mov	r2, r3
 8008162:	4623      	mov	r3, r4
 8008164:	4628      	mov	r0, r5
 8008166:	4631      	mov	r1, r6
 8008168:	f7f8 fdae 	bl	8000cc8 <__aeabi_uldivmod>
 800816c:	4603      	mov	r3, r0
 800816e:	460c      	mov	r4, r1
 8008170:	461a      	mov	r2, r3
 8008172:	4b50      	ldr	r3, [pc, #320]	; (80082b4 <UART_SetConfig+0x6f4>)
 8008174:	fba3 2302 	umull	r2, r3, r3, r2
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	469b      	mov	fp, r3
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	46d9      	mov	r9, fp
 8008188:	46e2      	mov	sl, ip
 800818a:	eb19 0309 	adds.w	r3, r9, r9
 800818e:	eb4a 040a 	adc.w	r4, sl, sl
 8008192:	4699      	mov	r9, r3
 8008194:	46a2      	mov	sl, r4
 8008196:	eb19 090b 	adds.w	r9, r9, fp
 800819a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800819e:	f04f 0100 	mov.w	r1, #0
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081b2:	4689      	mov	r9, r1
 80081b4:	4692      	mov	sl, r2
 80081b6:	eb1b 0509 	adds.w	r5, fp, r9
 80081ba:	eb4c 060a 	adc.w	r6, ip, sl
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4619      	mov	r1, r3
 80081c4:	f04f 0200 	mov.w	r2, #0
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	f04f 0400 	mov.w	r4, #0
 80081d0:	0094      	lsls	r4, r2, #2
 80081d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081d6:	008b      	lsls	r3, r1, #2
 80081d8:	461a      	mov	r2, r3
 80081da:	4623      	mov	r3, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	4631      	mov	r1, r6
 80081e0:	f7f8 fd72 	bl	8000cc8 <__aeabi_uldivmod>
 80081e4:	4603      	mov	r3, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b32      	ldr	r3, [pc, #200]	; (80082b4 <UART_SetConfig+0x6f4>)
 80081ec:	fba3 1302 	umull	r1, r3, r3, r2
 80081f0:	095b      	lsrs	r3, r3, #5
 80081f2:	2164      	movs	r1, #100	; 0x64
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	3332      	adds	r3, #50	; 0x32
 80081fe:	4a2d      	ldr	r2, [pc, #180]	; (80082b4 <UART_SetConfig+0x6f4>)
 8008200:	fba2 2303 	umull	r2, r3, r2, r3
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800820a:	4498      	add	r8, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	469b      	mov	fp, r3
 8008210:	f04f 0c00 	mov.w	ip, #0
 8008214:	46d9      	mov	r9, fp
 8008216:	46e2      	mov	sl, ip
 8008218:	eb19 0309 	adds.w	r3, r9, r9
 800821c:	eb4a 040a 	adc.w	r4, sl, sl
 8008220:	4699      	mov	r9, r3
 8008222:	46a2      	mov	sl, r4
 8008224:	eb19 090b 	adds.w	r9, r9, fp
 8008228:	eb4a 0a0c 	adc.w	sl, sl, ip
 800822c:	f04f 0100 	mov.w	r1, #0
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008238:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800823c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008240:	4689      	mov	r9, r1
 8008242:	4692      	mov	sl, r2
 8008244:	eb1b 0509 	adds.w	r5, fp, r9
 8008248:	eb4c 060a 	adc.w	r6, ip, sl
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4619      	mov	r1, r3
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	f04f 0400 	mov.w	r4, #0
 800825e:	0094      	lsls	r4, r2, #2
 8008260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008264:	008b      	lsls	r3, r1, #2
 8008266:	461a      	mov	r2, r3
 8008268:	4623      	mov	r3, r4
 800826a:	4628      	mov	r0, r5
 800826c:	4631      	mov	r1, r6
 800826e:	f7f8 fd2b 	bl	8000cc8 <__aeabi_uldivmod>
 8008272:	4603      	mov	r3, r0
 8008274:	460c      	mov	r4, r1
 8008276:	461a      	mov	r2, r3
 8008278:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <UART_SetConfig+0x6f4>)
 800827a:	fba3 1302 	umull	r1, r3, r3, r2
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	2164      	movs	r1, #100	; 0x64
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	3332      	adds	r3, #50	; 0x32
 800828c:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <UART_SetConfig+0x6f4>)
 800828e:	fba2 2303 	umull	r2, r3, r2, r3
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	f003 020f 	and.w	r2, r3, #15
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4442      	add	r2, r8
 800829e:	609a      	str	r2, [r3, #8]
}
 80082a0:	e7ff      	b.n	80082a2 <UART_SetConfig+0x6e2>
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	40011000 	.word	0x40011000
 80082b0:	40011400 	.word	0x40011400
 80082b4:	51eb851f 	.word	0x51eb851f

080082b8 <__errno>:
 80082b8:	4b01      	ldr	r3, [pc, #4]	; (80082c0 <__errno+0x8>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000000c 	.word	0x2000000c

080082c4 <__libc_init_array>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4e0d      	ldr	r6, [pc, #52]	; (80082fc <__libc_init_array+0x38>)
 80082c8:	4c0d      	ldr	r4, [pc, #52]	; (8008300 <__libc_init_array+0x3c>)
 80082ca:	1ba4      	subs	r4, r4, r6
 80082cc:	10a4      	asrs	r4, r4, #2
 80082ce:	2500      	movs	r5, #0
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	d109      	bne.n	80082e8 <__libc_init_array+0x24>
 80082d4:	4e0b      	ldr	r6, [pc, #44]	; (8008304 <__libc_init_array+0x40>)
 80082d6:	4c0c      	ldr	r4, [pc, #48]	; (8008308 <__libc_init_array+0x44>)
 80082d8:	f000 fc28 	bl	8008b2c <_init>
 80082dc:	1ba4      	subs	r4, r4, r6
 80082de:	10a4      	asrs	r4, r4, #2
 80082e0:	2500      	movs	r5, #0
 80082e2:	42a5      	cmp	r5, r4
 80082e4:	d105      	bne.n	80082f2 <__libc_init_array+0x2e>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082ec:	4798      	blx	r3
 80082ee:	3501      	adds	r5, #1
 80082f0:	e7ee      	b.n	80082d0 <__libc_init_array+0xc>
 80082f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082f6:	4798      	blx	r3
 80082f8:	3501      	adds	r5, #1
 80082fa:	e7f2      	b.n	80082e2 <__libc_init_array+0x1e>
 80082fc:	08008d14 	.word	0x08008d14
 8008300:	08008d14 	.word	0x08008d14
 8008304:	08008d14 	.word	0x08008d14
 8008308:	08008d18 	.word	0x08008d18

0800830c <memcpy>:
 800830c:	b510      	push	{r4, lr}
 800830e:	1e43      	subs	r3, r0, #1
 8008310:	440a      	add	r2, r1
 8008312:	4291      	cmp	r1, r2
 8008314:	d100      	bne.n	8008318 <memcpy+0xc>
 8008316:	bd10      	pop	{r4, pc}
 8008318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008320:	e7f7      	b.n	8008312 <memcpy+0x6>

08008322 <memset>:
 8008322:	4402      	add	r2, r0
 8008324:	4603      	mov	r3, r0
 8008326:	4293      	cmp	r3, r2
 8008328:	d100      	bne.n	800832c <memset+0xa>
 800832a:	4770      	bx	lr
 800832c:	f803 1b01 	strb.w	r1, [r3], #1
 8008330:	e7f9      	b.n	8008326 <memset+0x4>
	...

08008334 <_vsiprintf_r>:
 8008334:	b500      	push	{lr}
 8008336:	b09b      	sub	sp, #108	; 0x6c
 8008338:	9100      	str	r1, [sp, #0]
 800833a:	9104      	str	r1, [sp, #16]
 800833c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	9102      	str	r1, [sp, #8]
 8008344:	4905      	ldr	r1, [pc, #20]	; (800835c <_vsiprintf_r+0x28>)
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	4669      	mov	r1, sp
 800834a:	f000 f86d 	bl	8008428 <_svfiprintf_r>
 800834e:	9b00      	ldr	r3, [sp, #0]
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	b01b      	add	sp, #108	; 0x6c
 8008356:	f85d fb04 	ldr.w	pc, [sp], #4
 800835a:	bf00      	nop
 800835c:	ffff0208 	.word	0xffff0208

08008360 <vsiprintf>:
 8008360:	4613      	mov	r3, r2
 8008362:	460a      	mov	r2, r1
 8008364:	4601      	mov	r1, r0
 8008366:	4802      	ldr	r0, [pc, #8]	; (8008370 <vsiprintf+0x10>)
 8008368:	6800      	ldr	r0, [r0, #0]
 800836a:	f7ff bfe3 	b.w	8008334 <_vsiprintf_r>
 800836e:	bf00      	nop
 8008370:	2000000c 	.word	0x2000000c

08008374 <__ssputs_r>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	688e      	ldr	r6, [r1, #8]
 800837a:	429e      	cmp	r6, r3
 800837c:	4682      	mov	sl, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4690      	mov	r8, r2
 8008382:	4699      	mov	r9, r3
 8008384:	d837      	bhi.n	80083f6 <__ssputs_r+0x82>
 8008386:	898a      	ldrh	r2, [r1, #12]
 8008388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800838c:	d031      	beq.n	80083f2 <__ssputs_r+0x7e>
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	6909      	ldr	r1, [r1, #16]
 8008392:	1a6f      	subs	r7, r5, r1
 8008394:	6965      	ldr	r5, [r4, #20]
 8008396:	2302      	movs	r3, #2
 8008398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800839c:	fb95 f5f3 	sdiv	r5, r5, r3
 80083a0:	f109 0301 	add.w	r3, r9, #1
 80083a4:	443b      	add	r3, r7
 80083a6:	429d      	cmp	r5, r3
 80083a8:	bf38      	it	cc
 80083aa:	461d      	movcc	r5, r3
 80083ac:	0553      	lsls	r3, r2, #21
 80083ae:	d530      	bpl.n	8008412 <__ssputs_r+0x9e>
 80083b0:	4629      	mov	r1, r5
 80083b2:	f000 fb21 	bl	80089f8 <_malloc_r>
 80083b6:	4606      	mov	r6, r0
 80083b8:	b950      	cbnz	r0, 80083d0 <__ssputs_r+0x5c>
 80083ba:	230c      	movs	r3, #12
 80083bc:	f8ca 3000 	str.w	r3, [sl]
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d0:	463a      	mov	r2, r7
 80083d2:	6921      	ldr	r1, [r4, #16]
 80083d4:	f7ff ff9a 	bl	800830c <memcpy>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	6126      	str	r6, [r4, #16]
 80083e6:	6165      	str	r5, [r4, #20]
 80083e8:	443e      	add	r6, r7
 80083ea:	1bed      	subs	r5, r5, r7
 80083ec:	6026      	str	r6, [r4, #0]
 80083ee:	60a5      	str	r5, [r4, #8]
 80083f0:	464e      	mov	r6, r9
 80083f2:	454e      	cmp	r6, r9
 80083f4:	d900      	bls.n	80083f8 <__ssputs_r+0x84>
 80083f6:	464e      	mov	r6, r9
 80083f8:	4632      	mov	r2, r6
 80083fa:	4641      	mov	r1, r8
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	f000 fa93 	bl	8008928 <memmove>
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	1b9b      	subs	r3, r3, r6
 8008406:	60a3      	str	r3, [r4, #8]
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	441e      	add	r6, r3
 800840c:	6026      	str	r6, [r4, #0]
 800840e:	2000      	movs	r0, #0
 8008410:	e7dc      	b.n	80083cc <__ssputs_r+0x58>
 8008412:	462a      	mov	r2, r5
 8008414:	f000 fb4a 	bl	8008aac <_realloc_r>
 8008418:	4606      	mov	r6, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d1e2      	bne.n	80083e4 <__ssputs_r+0x70>
 800841e:	6921      	ldr	r1, [r4, #16]
 8008420:	4650      	mov	r0, sl
 8008422:	f000 fa9b 	bl	800895c <_free_r>
 8008426:	e7c8      	b.n	80083ba <__ssputs_r+0x46>

08008428 <_svfiprintf_r>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	461d      	mov	r5, r3
 800842e:	898b      	ldrh	r3, [r1, #12]
 8008430:	061f      	lsls	r7, r3, #24
 8008432:	b09d      	sub	sp, #116	; 0x74
 8008434:	4680      	mov	r8, r0
 8008436:	460c      	mov	r4, r1
 8008438:	4616      	mov	r6, r2
 800843a:	d50f      	bpl.n	800845c <_svfiprintf_r+0x34>
 800843c:	690b      	ldr	r3, [r1, #16]
 800843e:	b96b      	cbnz	r3, 800845c <_svfiprintf_r+0x34>
 8008440:	2140      	movs	r1, #64	; 0x40
 8008442:	f000 fad9 	bl	80089f8 <_malloc_r>
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	6120      	str	r0, [r4, #16]
 800844a:	b928      	cbnz	r0, 8008458 <_svfiprintf_r+0x30>
 800844c:	230c      	movs	r3, #12
 800844e:	f8c8 3000 	str.w	r3, [r8]
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	e0c8      	b.n	80085ea <_svfiprintf_r+0x1c2>
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	6163      	str	r3, [r4, #20]
 800845c:	2300      	movs	r3, #0
 800845e:	9309      	str	r3, [sp, #36]	; 0x24
 8008460:	2320      	movs	r3, #32
 8008462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008466:	2330      	movs	r3, #48	; 0x30
 8008468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800846c:	9503      	str	r5, [sp, #12]
 800846e:	f04f 0b01 	mov.w	fp, #1
 8008472:	4637      	mov	r7, r6
 8008474:	463d      	mov	r5, r7
 8008476:	f815 3b01 	ldrb.w	r3, [r5], #1
 800847a:	b10b      	cbz	r3, 8008480 <_svfiprintf_r+0x58>
 800847c:	2b25      	cmp	r3, #37	; 0x25
 800847e:	d13e      	bne.n	80084fe <_svfiprintf_r+0xd6>
 8008480:	ebb7 0a06 	subs.w	sl, r7, r6
 8008484:	d00b      	beq.n	800849e <_svfiprintf_r+0x76>
 8008486:	4653      	mov	r3, sl
 8008488:	4632      	mov	r2, r6
 800848a:	4621      	mov	r1, r4
 800848c:	4640      	mov	r0, r8
 800848e:	f7ff ff71 	bl	8008374 <__ssputs_r>
 8008492:	3001      	adds	r0, #1
 8008494:	f000 80a4 	beq.w	80085e0 <_svfiprintf_r+0x1b8>
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	4453      	add	r3, sl
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	783b      	ldrb	r3, [r7, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 809d 	beq.w	80085e0 <_svfiprintf_r+0x1b8>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	9307      	str	r3, [sp, #28]
 80084b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084b8:	931a      	str	r3, [sp, #104]	; 0x68
 80084ba:	462f      	mov	r7, r5
 80084bc:	2205      	movs	r2, #5
 80084be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80084c2:	4850      	ldr	r0, [pc, #320]	; (8008604 <_svfiprintf_r+0x1dc>)
 80084c4:	f7f7 fe84 	bl	80001d0 <memchr>
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	b9d0      	cbnz	r0, 8008502 <_svfiprintf_r+0xda>
 80084cc:	06d9      	lsls	r1, r3, #27
 80084ce:	bf44      	itt	mi
 80084d0:	2220      	movmi	r2, #32
 80084d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084d6:	071a      	lsls	r2, r3, #28
 80084d8:	bf44      	itt	mi
 80084da:	222b      	movmi	r2, #43	; 0x2b
 80084dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084e0:	782a      	ldrb	r2, [r5, #0]
 80084e2:	2a2a      	cmp	r2, #42	; 0x2a
 80084e4:	d015      	beq.n	8008512 <_svfiprintf_r+0xea>
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	462f      	mov	r7, r5
 80084ea:	2000      	movs	r0, #0
 80084ec:	250a      	movs	r5, #10
 80084ee:	4639      	mov	r1, r7
 80084f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f4:	3b30      	subs	r3, #48	; 0x30
 80084f6:	2b09      	cmp	r3, #9
 80084f8:	d94d      	bls.n	8008596 <_svfiprintf_r+0x16e>
 80084fa:	b1b8      	cbz	r0, 800852c <_svfiprintf_r+0x104>
 80084fc:	e00f      	b.n	800851e <_svfiprintf_r+0xf6>
 80084fe:	462f      	mov	r7, r5
 8008500:	e7b8      	b.n	8008474 <_svfiprintf_r+0x4c>
 8008502:	4a40      	ldr	r2, [pc, #256]	; (8008604 <_svfiprintf_r+0x1dc>)
 8008504:	1a80      	subs	r0, r0, r2
 8008506:	fa0b f000 	lsl.w	r0, fp, r0
 800850a:	4318      	orrs	r0, r3
 800850c:	9004      	str	r0, [sp, #16]
 800850e:	463d      	mov	r5, r7
 8008510:	e7d3      	b.n	80084ba <_svfiprintf_r+0x92>
 8008512:	9a03      	ldr	r2, [sp, #12]
 8008514:	1d11      	adds	r1, r2, #4
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	9103      	str	r1, [sp, #12]
 800851a:	2a00      	cmp	r2, #0
 800851c:	db01      	blt.n	8008522 <_svfiprintf_r+0xfa>
 800851e:	9207      	str	r2, [sp, #28]
 8008520:	e004      	b.n	800852c <_svfiprintf_r+0x104>
 8008522:	4252      	negs	r2, r2
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	9207      	str	r2, [sp, #28]
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	783b      	ldrb	r3, [r7, #0]
 800852e:	2b2e      	cmp	r3, #46	; 0x2e
 8008530:	d10c      	bne.n	800854c <_svfiprintf_r+0x124>
 8008532:	787b      	ldrb	r3, [r7, #1]
 8008534:	2b2a      	cmp	r3, #42	; 0x2a
 8008536:	d133      	bne.n	80085a0 <_svfiprintf_r+0x178>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	1d1a      	adds	r2, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9203      	str	r2, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfb8      	it	lt
 8008544:	f04f 33ff 	movlt.w	r3, #4294967295
 8008548:	3702      	adds	r7, #2
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	4d2e      	ldr	r5, [pc, #184]	; (8008608 <_svfiprintf_r+0x1e0>)
 800854e:	7839      	ldrb	r1, [r7, #0]
 8008550:	2203      	movs	r2, #3
 8008552:	4628      	mov	r0, r5
 8008554:	f7f7 fe3c 	bl	80001d0 <memchr>
 8008558:	b138      	cbz	r0, 800856a <_svfiprintf_r+0x142>
 800855a:	2340      	movs	r3, #64	; 0x40
 800855c:	1b40      	subs	r0, r0, r5
 800855e:	fa03 f000 	lsl.w	r0, r3, r0
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	4303      	orrs	r3, r0
 8008566:	3701      	adds	r7, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	7839      	ldrb	r1, [r7, #0]
 800856c:	4827      	ldr	r0, [pc, #156]	; (800860c <_svfiprintf_r+0x1e4>)
 800856e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008572:	2206      	movs	r2, #6
 8008574:	1c7e      	adds	r6, r7, #1
 8008576:	f7f7 fe2b 	bl	80001d0 <memchr>
 800857a:	2800      	cmp	r0, #0
 800857c:	d038      	beq.n	80085f0 <_svfiprintf_r+0x1c8>
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <_svfiprintf_r+0x1e8>)
 8008580:	bb13      	cbnz	r3, 80085c8 <_svfiprintf_r+0x1a0>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	3307      	adds	r3, #7
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	3308      	adds	r3, #8
 800858c:	9303      	str	r3, [sp, #12]
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	444b      	add	r3, r9
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	e76d      	b.n	8008472 <_svfiprintf_r+0x4a>
 8008596:	fb05 3202 	mla	r2, r5, r2, r3
 800859a:	2001      	movs	r0, #1
 800859c:	460f      	mov	r7, r1
 800859e:	e7a6      	b.n	80084ee <_svfiprintf_r+0xc6>
 80085a0:	2300      	movs	r3, #0
 80085a2:	3701      	adds	r7, #1
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	4619      	mov	r1, r3
 80085a8:	250a      	movs	r5, #10
 80085aa:	4638      	mov	r0, r7
 80085ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b0:	3a30      	subs	r2, #48	; 0x30
 80085b2:	2a09      	cmp	r2, #9
 80085b4:	d903      	bls.n	80085be <_svfiprintf_r+0x196>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0c8      	beq.n	800854c <_svfiprintf_r+0x124>
 80085ba:	9105      	str	r1, [sp, #20]
 80085bc:	e7c6      	b.n	800854c <_svfiprintf_r+0x124>
 80085be:	fb05 2101 	mla	r1, r5, r1, r2
 80085c2:	2301      	movs	r3, #1
 80085c4:	4607      	mov	r7, r0
 80085c6:	e7f0      	b.n	80085aa <_svfiprintf_r+0x182>
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4622      	mov	r2, r4
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <_svfiprintf_r+0x1ec>)
 80085d0:	a904      	add	r1, sp, #16
 80085d2:	4640      	mov	r0, r8
 80085d4:	f3af 8000 	nop.w
 80085d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085dc:	4681      	mov	r9, r0
 80085de:	d1d6      	bne.n	800858e <_svfiprintf_r+0x166>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	065b      	lsls	r3, r3, #25
 80085e4:	f53f af35 	bmi.w	8008452 <_svfiprintf_r+0x2a>
 80085e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ea:	b01d      	add	sp, #116	; 0x74
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4622      	mov	r2, r4
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <_svfiprintf_r+0x1ec>)
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	4640      	mov	r0, r8
 80085fc:	f000 f882 	bl	8008704 <_printf_i>
 8008600:	e7ea      	b.n	80085d8 <_svfiprintf_r+0x1b0>
 8008602:	bf00      	nop
 8008604:	08008cd8 	.word	0x08008cd8
 8008608:	08008cde 	.word	0x08008cde
 800860c:	08008ce2 	.word	0x08008ce2
 8008610:	00000000 	.word	0x00000000
 8008614:	08008375 	.word	0x08008375

08008618 <_printf_common>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	4691      	mov	r9, r2
 800861e:	461f      	mov	r7, r3
 8008620:	688a      	ldr	r2, [r1, #8]
 8008622:	690b      	ldr	r3, [r1, #16]
 8008624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008628:	4293      	cmp	r3, r2
 800862a:	bfb8      	it	lt
 800862c:	4613      	movlt	r3, r2
 800862e:	f8c9 3000 	str.w	r3, [r9]
 8008632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008636:	4606      	mov	r6, r0
 8008638:	460c      	mov	r4, r1
 800863a:	b112      	cbz	r2, 8008642 <_printf_common+0x2a>
 800863c:	3301      	adds	r3, #1
 800863e:	f8c9 3000 	str.w	r3, [r9]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	0699      	lsls	r1, r3, #26
 8008646:	bf42      	ittt	mi
 8008648:	f8d9 3000 	ldrmi.w	r3, [r9]
 800864c:	3302      	addmi	r3, #2
 800864e:	f8c9 3000 	strmi.w	r3, [r9]
 8008652:	6825      	ldr	r5, [r4, #0]
 8008654:	f015 0506 	ands.w	r5, r5, #6
 8008658:	d107      	bne.n	800866a <_printf_common+0x52>
 800865a:	f104 0a19 	add.w	sl, r4, #25
 800865e:	68e3      	ldr	r3, [r4, #12]
 8008660:	f8d9 2000 	ldr.w	r2, [r9]
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	42ab      	cmp	r3, r5
 8008668:	dc28      	bgt.n	80086bc <_printf_common+0xa4>
 800866a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	3300      	adds	r3, #0
 8008672:	bf18      	it	ne
 8008674:	2301      	movne	r3, #1
 8008676:	0692      	lsls	r2, r2, #26
 8008678:	d42d      	bmi.n	80086d6 <_printf_common+0xbe>
 800867a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800867e:	4639      	mov	r1, r7
 8008680:	4630      	mov	r0, r6
 8008682:	47c0      	blx	r8
 8008684:	3001      	adds	r0, #1
 8008686:	d020      	beq.n	80086ca <_printf_common+0xb2>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	68e5      	ldr	r5, [r4, #12]
 800868c:	f8d9 2000 	ldr.w	r2, [r9]
 8008690:	f003 0306 	and.w	r3, r3, #6
 8008694:	2b04      	cmp	r3, #4
 8008696:	bf08      	it	eq
 8008698:	1aad      	subeq	r5, r5, r2
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	bf0c      	ite	eq
 80086a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086a4:	2500      	movne	r5, #0
 80086a6:	4293      	cmp	r3, r2
 80086a8:	bfc4      	itt	gt
 80086aa:	1a9b      	subgt	r3, r3, r2
 80086ac:	18ed      	addgt	r5, r5, r3
 80086ae:	f04f 0900 	mov.w	r9, #0
 80086b2:	341a      	adds	r4, #26
 80086b4:	454d      	cmp	r5, r9
 80086b6:	d11a      	bne.n	80086ee <_printf_common+0xd6>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e008      	b.n	80086ce <_printf_common+0xb6>
 80086bc:	2301      	movs	r3, #1
 80086be:	4652      	mov	r2, sl
 80086c0:	4639      	mov	r1, r7
 80086c2:	4630      	mov	r0, r6
 80086c4:	47c0      	blx	r8
 80086c6:	3001      	adds	r0, #1
 80086c8:	d103      	bne.n	80086d2 <_printf_common+0xba>
 80086ca:	f04f 30ff 	mov.w	r0, #4294967295
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	3501      	adds	r5, #1
 80086d4:	e7c3      	b.n	800865e <_printf_common+0x46>
 80086d6:	18e1      	adds	r1, r4, r3
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	2030      	movs	r0, #48	; 0x30
 80086dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086e0:	4422      	add	r2, r4
 80086e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086ea:	3302      	adds	r3, #2
 80086ec:	e7c5      	b.n	800867a <_printf_common+0x62>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4622      	mov	r2, r4
 80086f2:	4639      	mov	r1, r7
 80086f4:	4630      	mov	r0, r6
 80086f6:	47c0      	blx	r8
 80086f8:	3001      	adds	r0, #1
 80086fa:	d0e6      	beq.n	80086ca <_printf_common+0xb2>
 80086fc:	f109 0901 	add.w	r9, r9, #1
 8008700:	e7d8      	b.n	80086b4 <_printf_common+0x9c>
	...

08008704 <_printf_i>:
 8008704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008708:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800870c:	460c      	mov	r4, r1
 800870e:	7e09      	ldrb	r1, [r1, #24]
 8008710:	b085      	sub	sp, #20
 8008712:	296e      	cmp	r1, #110	; 0x6e
 8008714:	4617      	mov	r7, r2
 8008716:	4606      	mov	r6, r0
 8008718:	4698      	mov	r8, r3
 800871a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800871c:	f000 80b3 	beq.w	8008886 <_printf_i+0x182>
 8008720:	d822      	bhi.n	8008768 <_printf_i+0x64>
 8008722:	2963      	cmp	r1, #99	; 0x63
 8008724:	d036      	beq.n	8008794 <_printf_i+0x90>
 8008726:	d80a      	bhi.n	800873e <_printf_i+0x3a>
 8008728:	2900      	cmp	r1, #0
 800872a:	f000 80b9 	beq.w	80088a0 <_printf_i+0x19c>
 800872e:	2958      	cmp	r1, #88	; 0x58
 8008730:	f000 8083 	beq.w	800883a <_printf_i+0x136>
 8008734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008738:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800873c:	e032      	b.n	80087a4 <_printf_i+0xa0>
 800873e:	2964      	cmp	r1, #100	; 0x64
 8008740:	d001      	beq.n	8008746 <_printf_i+0x42>
 8008742:	2969      	cmp	r1, #105	; 0x69
 8008744:	d1f6      	bne.n	8008734 <_printf_i+0x30>
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	6813      	ldr	r3, [r2, #0]
 800874a:	0605      	lsls	r5, r0, #24
 800874c:	f103 0104 	add.w	r1, r3, #4
 8008750:	d52a      	bpl.n	80087a8 <_printf_i+0xa4>
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6011      	str	r1, [r2, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	da03      	bge.n	8008762 <_printf_i+0x5e>
 800875a:	222d      	movs	r2, #45	; 0x2d
 800875c:	425b      	negs	r3, r3
 800875e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008762:	486f      	ldr	r0, [pc, #444]	; (8008920 <_printf_i+0x21c>)
 8008764:	220a      	movs	r2, #10
 8008766:	e039      	b.n	80087dc <_printf_i+0xd8>
 8008768:	2973      	cmp	r1, #115	; 0x73
 800876a:	f000 809d 	beq.w	80088a8 <_printf_i+0x1a4>
 800876e:	d808      	bhi.n	8008782 <_printf_i+0x7e>
 8008770:	296f      	cmp	r1, #111	; 0x6f
 8008772:	d020      	beq.n	80087b6 <_printf_i+0xb2>
 8008774:	2970      	cmp	r1, #112	; 0x70
 8008776:	d1dd      	bne.n	8008734 <_printf_i+0x30>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f043 0320 	orr.w	r3, r3, #32
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	e003      	b.n	800878a <_printf_i+0x86>
 8008782:	2975      	cmp	r1, #117	; 0x75
 8008784:	d017      	beq.n	80087b6 <_printf_i+0xb2>
 8008786:	2978      	cmp	r1, #120	; 0x78
 8008788:	d1d4      	bne.n	8008734 <_printf_i+0x30>
 800878a:	2378      	movs	r3, #120	; 0x78
 800878c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008790:	4864      	ldr	r0, [pc, #400]	; (8008924 <_printf_i+0x220>)
 8008792:	e055      	b.n	8008840 <_printf_i+0x13c>
 8008794:	6813      	ldr	r3, [r2, #0]
 8008796:	1d19      	adds	r1, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6011      	str	r1, [r2, #0]
 800879c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087a4:	2301      	movs	r3, #1
 80087a6:	e08c      	b.n	80088c2 <_printf_i+0x1be>
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6011      	str	r1, [r2, #0]
 80087ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087b0:	bf18      	it	ne
 80087b2:	b21b      	sxthne	r3, r3
 80087b4:	e7cf      	b.n	8008756 <_printf_i+0x52>
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	1d18      	adds	r0, r3, #4
 80087bc:	6010      	str	r0, [r2, #0]
 80087be:	0628      	lsls	r0, r5, #24
 80087c0:	d501      	bpl.n	80087c6 <_printf_i+0xc2>
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	e002      	b.n	80087cc <_printf_i+0xc8>
 80087c6:	0668      	lsls	r0, r5, #25
 80087c8:	d5fb      	bpl.n	80087c2 <_printf_i+0xbe>
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	4854      	ldr	r0, [pc, #336]	; (8008920 <_printf_i+0x21c>)
 80087ce:	296f      	cmp	r1, #111	; 0x6f
 80087d0:	bf14      	ite	ne
 80087d2:	220a      	movne	r2, #10
 80087d4:	2208      	moveq	r2, #8
 80087d6:	2100      	movs	r1, #0
 80087d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087dc:	6865      	ldr	r5, [r4, #4]
 80087de:	60a5      	str	r5, [r4, #8]
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	f2c0 8095 	blt.w	8008910 <_printf_i+0x20c>
 80087e6:	6821      	ldr	r1, [r4, #0]
 80087e8:	f021 0104 	bic.w	r1, r1, #4
 80087ec:	6021      	str	r1, [r4, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d13d      	bne.n	800886e <_printf_i+0x16a>
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	f040 808e 	bne.w	8008914 <_printf_i+0x210>
 80087f8:	4665      	mov	r5, ip
 80087fa:	2a08      	cmp	r2, #8
 80087fc:	d10b      	bne.n	8008816 <_printf_i+0x112>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	07db      	lsls	r3, r3, #31
 8008802:	d508      	bpl.n	8008816 <_printf_i+0x112>
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	6862      	ldr	r2, [r4, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	bfde      	ittt	le
 800880c:	2330      	movle	r3, #48	; 0x30
 800880e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008812:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008816:	ebac 0305 	sub.w	r3, ip, r5
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	f8cd 8000 	str.w	r8, [sp]
 8008820:	463b      	mov	r3, r7
 8008822:	aa03      	add	r2, sp, #12
 8008824:	4621      	mov	r1, r4
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff fef6 	bl	8008618 <_printf_common>
 800882c:	3001      	adds	r0, #1
 800882e:	d14d      	bne.n	80088cc <_printf_i+0x1c8>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	b005      	add	sp, #20
 8008836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800883a:	4839      	ldr	r0, [pc, #228]	; (8008920 <_printf_i+0x21c>)
 800883c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008840:	6813      	ldr	r3, [r2, #0]
 8008842:	6821      	ldr	r1, [r4, #0]
 8008844:	1d1d      	adds	r5, r3, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6015      	str	r5, [r2, #0]
 800884a:	060a      	lsls	r2, r1, #24
 800884c:	d50b      	bpl.n	8008866 <_printf_i+0x162>
 800884e:	07ca      	lsls	r2, r1, #31
 8008850:	bf44      	itt	mi
 8008852:	f041 0120 	orrmi.w	r1, r1, #32
 8008856:	6021      	strmi	r1, [r4, #0]
 8008858:	b91b      	cbnz	r3, 8008862 <_printf_i+0x15e>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	f022 0220 	bic.w	r2, r2, #32
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	2210      	movs	r2, #16
 8008864:	e7b7      	b.n	80087d6 <_printf_i+0xd2>
 8008866:	064d      	lsls	r5, r1, #25
 8008868:	bf48      	it	mi
 800886a:	b29b      	uxthmi	r3, r3
 800886c:	e7ef      	b.n	800884e <_printf_i+0x14a>
 800886e:	4665      	mov	r5, ip
 8008870:	fbb3 f1f2 	udiv	r1, r3, r2
 8008874:	fb02 3311 	mls	r3, r2, r1, r3
 8008878:	5cc3      	ldrb	r3, [r0, r3]
 800887a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800887e:	460b      	mov	r3, r1
 8008880:	2900      	cmp	r1, #0
 8008882:	d1f5      	bne.n	8008870 <_printf_i+0x16c>
 8008884:	e7b9      	b.n	80087fa <_printf_i+0xf6>
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	6825      	ldr	r5, [r4, #0]
 800888a:	6961      	ldr	r1, [r4, #20]
 800888c:	1d18      	adds	r0, r3, #4
 800888e:	6010      	str	r0, [r2, #0]
 8008890:	0628      	lsls	r0, r5, #24
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	d501      	bpl.n	800889a <_printf_i+0x196>
 8008896:	6019      	str	r1, [r3, #0]
 8008898:	e002      	b.n	80088a0 <_printf_i+0x19c>
 800889a:	066a      	lsls	r2, r5, #25
 800889c:	d5fb      	bpl.n	8008896 <_printf_i+0x192>
 800889e:	8019      	strh	r1, [r3, #0]
 80088a0:	2300      	movs	r3, #0
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	4665      	mov	r5, ip
 80088a6:	e7b9      	b.n	800881c <_printf_i+0x118>
 80088a8:	6813      	ldr	r3, [r2, #0]
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	681d      	ldr	r5, [r3, #0]
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	2100      	movs	r1, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7f7 fc8b 	bl	80001d0 <memchr>
 80088ba:	b108      	cbz	r0, 80088c0 <_printf_i+0x1bc>
 80088bc:	1b40      	subs	r0, r0, r5
 80088be:	6060      	str	r0, [r4, #4]
 80088c0:	6863      	ldr	r3, [r4, #4]
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	2300      	movs	r3, #0
 80088c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ca:	e7a7      	b.n	800881c <_printf_i+0x118>
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4639      	mov	r1, r7
 80088d2:	4630      	mov	r0, r6
 80088d4:	47c0      	blx	r8
 80088d6:	3001      	adds	r0, #1
 80088d8:	d0aa      	beq.n	8008830 <_printf_i+0x12c>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	079b      	lsls	r3, r3, #30
 80088de:	d413      	bmi.n	8008908 <_printf_i+0x204>
 80088e0:	68e0      	ldr	r0, [r4, #12]
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	4298      	cmp	r0, r3
 80088e6:	bfb8      	it	lt
 80088e8:	4618      	movlt	r0, r3
 80088ea:	e7a3      	b.n	8008834 <_printf_i+0x130>
 80088ec:	2301      	movs	r3, #1
 80088ee:	464a      	mov	r2, r9
 80088f0:	4639      	mov	r1, r7
 80088f2:	4630      	mov	r0, r6
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d09a      	beq.n	8008830 <_printf_i+0x12c>
 80088fa:	3501      	adds	r5, #1
 80088fc:	68e3      	ldr	r3, [r4, #12]
 80088fe:	9a03      	ldr	r2, [sp, #12]
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	42ab      	cmp	r3, r5
 8008904:	dcf2      	bgt.n	80088ec <_printf_i+0x1e8>
 8008906:	e7eb      	b.n	80088e0 <_printf_i+0x1dc>
 8008908:	2500      	movs	r5, #0
 800890a:	f104 0919 	add.w	r9, r4, #25
 800890e:	e7f5      	b.n	80088fc <_printf_i+0x1f8>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1ac      	bne.n	800886e <_printf_i+0x16a>
 8008914:	7803      	ldrb	r3, [r0, #0]
 8008916:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800891a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800891e:	e76c      	b.n	80087fa <_printf_i+0xf6>
 8008920:	08008ce9 	.word	0x08008ce9
 8008924:	08008cfa 	.word	0x08008cfa

08008928 <memmove>:
 8008928:	4288      	cmp	r0, r1
 800892a:	b510      	push	{r4, lr}
 800892c:	eb01 0302 	add.w	r3, r1, r2
 8008930:	d807      	bhi.n	8008942 <memmove+0x1a>
 8008932:	1e42      	subs	r2, r0, #1
 8008934:	4299      	cmp	r1, r3
 8008936:	d00a      	beq.n	800894e <memmove+0x26>
 8008938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008940:	e7f8      	b.n	8008934 <memmove+0xc>
 8008942:	4283      	cmp	r3, r0
 8008944:	d9f5      	bls.n	8008932 <memmove+0xa>
 8008946:	1881      	adds	r1, r0, r2
 8008948:	1ad2      	subs	r2, r2, r3
 800894a:	42d3      	cmn	r3, r2
 800894c:	d100      	bne.n	8008950 <memmove+0x28>
 800894e:	bd10      	pop	{r4, pc}
 8008950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008954:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008958:	e7f7      	b.n	800894a <memmove+0x22>
	...

0800895c <_free_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4605      	mov	r5, r0
 8008960:	2900      	cmp	r1, #0
 8008962:	d045      	beq.n	80089f0 <_free_r+0x94>
 8008964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008968:	1f0c      	subs	r4, r1, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	18e4      	addlt	r4, r4, r3
 8008970:	f000 f8d2 	bl	8008b18 <__malloc_lock>
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <_free_r+0x98>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	4610      	mov	r0, r2
 800897a:	b933      	cbnz	r3, 800898a <_free_r+0x2e>
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	6014      	str	r4, [r2, #0]
 8008980:	4628      	mov	r0, r5
 8008982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008986:	f000 b8c8 	b.w	8008b1a <__malloc_unlock>
 800898a:	42a3      	cmp	r3, r4
 800898c:	d90c      	bls.n	80089a8 <_free_r+0x4c>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	1862      	adds	r2, r4, r1
 8008992:	4293      	cmp	r3, r2
 8008994:	bf04      	itt	eq
 8008996:	681a      	ldreq	r2, [r3, #0]
 8008998:	685b      	ldreq	r3, [r3, #4]
 800899a:	6063      	str	r3, [r4, #4]
 800899c:	bf04      	itt	eq
 800899e:	1852      	addeq	r2, r2, r1
 80089a0:	6022      	streq	r2, [r4, #0]
 80089a2:	6004      	str	r4, [r0, #0]
 80089a4:	e7ec      	b.n	8008980 <_free_r+0x24>
 80089a6:	4613      	mov	r3, r2
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	b10a      	cbz	r2, 80089b0 <_free_r+0x54>
 80089ac:	42a2      	cmp	r2, r4
 80089ae:	d9fa      	bls.n	80089a6 <_free_r+0x4a>
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	1858      	adds	r0, r3, r1
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d10b      	bne.n	80089d0 <_free_r+0x74>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	4401      	add	r1, r0
 80089bc:	1858      	adds	r0, r3, r1
 80089be:	4282      	cmp	r2, r0
 80089c0:	6019      	str	r1, [r3, #0]
 80089c2:	d1dd      	bne.n	8008980 <_free_r+0x24>
 80089c4:	6810      	ldr	r0, [r2, #0]
 80089c6:	6852      	ldr	r2, [r2, #4]
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	4401      	add	r1, r0
 80089cc:	6019      	str	r1, [r3, #0]
 80089ce:	e7d7      	b.n	8008980 <_free_r+0x24>
 80089d0:	d902      	bls.n	80089d8 <_free_r+0x7c>
 80089d2:	230c      	movs	r3, #12
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	e7d3      	b.n	8008980 <_free_r+0x24>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	1821      	adds	r1, r4, r0
 80089dc:	428a      	cmp	r2, r1
 80089de:	bf04      	itt	eq
 80089e0:	6811      	ldreq	r1, [r2, #0]
 80089e2:	6852      	ldreq	r2, [r2, #4]
 80089e4:	6062      	str	r2, [r4, #4]
 80089e6:	bf04      	itt	eq
 80089e8:	1809      	addeq	r1, r1, r0
 80089ea:	6021      	streq	r1, [r4, #0]
 80089ec:	605c      	str	r4, [r3, #4]
 80089ee:	e7c7      	b.n	8008980 <_free_r+0x24>
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	bf00      	nop
 80089f4:	20000110 	.word	0x20000110

080089f8 <_malloc_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	1ccd      	adds	r5, r1, #3
 80089fc:	f025 0503 	bic.w	r5, r5, #3
 8008a00:	3508      	adds	r5, #8
 8008a02:	2d0c      	cmp	r5, #12
 8008a04:	bf38      	it	cc
 8008a06:	250c      	movcc	r5, #12
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	db01      	blt.n	8008a12 <_malloc_r+0x1a>
 8008a0e:	42a9      	cmp	r1, r5
 8008a10:	d903      	bls.n	8008a1a <_malloc_r+0x22>
 8008a12:	230c      	movs	r3, #12
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	2000      	movs	r0, #0
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	f000 f87d 	bl	8008b18 <__malloc_lock>
 8008a1e:	4a21      	ldr	r2, [pc, #132]	; (8008aa4 <_malloc_r+0xac>)
 8008a20:	6814      	ldr	r4, [r2, #0]
 8008a22:	4621      	mov	r1, r4
 8008a24:	b991      	cbnz	r1, 8008a4c <_malloc_r+0x54>
 8008a26:	4c20      	ldr	r4, [pc, #128]	; (8008aa8 <_malloc_r+0xb0>)
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	b91b      	cbnz	r3, 8008a34 <_malloc_r+0x3c>
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f863 	bl	8008af8 <_sbrk_r>
 8008a32:	6020      	str	r0, [r4, #0]
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f85e 	bl	8008af8 <_sbrk_r>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d124      	bne.n	8008a8a <_malloc_r+0x92>
 8008a40:	230c      	movs	r3, #12
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f868 	bl	8008b1a <__malloc_unlock>
 8008a4a:	e7e4      	b.n	8008a16 <_malloc_r+0x1e>
 8008a4c:	680b      	ldr	r3, [r1, #0]
 8008a4e:	1b5b      	subs	r3, r3, r5
 8008a50:	d418      	bmi.n	8008a84 <_malloc_r+0x8c>
 8008a52:	2b0b      	cmp	r3, #11
 8008a54:	d90f      	bls.n	8008a76 <_malloc_r+0x7e>
 8008a56:	600b      	str	r3, [r1, #0]
 8008a58:	50cd      	str	r5, [r1, r3]
 8008a5a:	18cc      	adds	r4, r1, r3
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f85c 	bl	8008b1a <__malloc_unlock>
 8008a62:	f104 000b 	add.w	r0, r4, #11
 8008a66:	1d23      	adds	r3, r4, #4
 8008a68:	f020 0007 	bic.w	r0, r0, #7
 8008a6c:	1ac3      	subs	r3, r0, r3
 8008a6e:	d0d3      	beq.n	8008a18 <_malloc_r+0x20>
 8008a70:	425a      	negs	r2, r3
 8008a72:	50e2      	str	r2, [r4, r3]
 8008a74:	e7d0      	b.n	8008a18 <_malloc_r+0x20>
 8008a76:	428c      	cmp	r4, r1
 8008a78:	684b      	ldr	r3, [r1, #4]
 8008a7a:	bf16      	itet	ne
 8008a7c:	6063      	strne	r3, [r4, #4]
 8008a7e:	6013      	streq	r3, [r2, #0]
 8008a80:	460c      	movne	r4, r1
 8008a82:	e7eb      	b.n	8008a5c <_malloc_r+0x64>
 8008a84:	460c      	mov	r4, r1
 8008a86:	6849      	ldr	r1, [r1, #4]
 8008a88:	e7cc      	b.n	8008a24 <_malloc_r+0x2c>
 8008a8a:	1cc4      	adds	r4, r0, #3
 8008a8c:	f024 0403 	bic.w	r4, r4, #3
 8008a90:	42a0      	cmp	r0, r4
 8008a92:	d005      	beq.n	8008aa0 <_malloc_r+0xa8>
 8008a94:	1a21      	subs	r1, r4, r0
 8008a96:	4630      	mov	r0, r6
 8008a98:	f000 f82e 	bl	8008af8 <_sbrk_r>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d0cf      	beq.n	8008a40 <_malloc_r+0x48>
 8008aa0:	6025      	str	r5, [r4, #0]
 8008aa2:	e7db      	b.n	8008a5c <_malloc_r+0x64>
 8008aa4:	20000110 	.word	0x20000110
 8008aa8:	20000114 	.word	0x20000114

08008aac <_realloc_r>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	4607      	mov	r7, r0
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	460e      	mov	r6, r1
 8008ab4:	b921      	cbnz	r1, 8008ac0 <_realloc_r+0x14>
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008abc:	f7ff bf9c 	b.w	80089f8 <_malloc_r>
 8008ac0:	b922      	cbnz	r2, 8008acc <_realloc_r+0x20>
 8008ac2:	f7ff ff4b 	bl	800895c <_free_r>
 8008ac6:	4625      	mov	r5, r4
 8008ac8:	4628      	mov	r0, r5
 8008aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008acc:	f000 f826 	bl	8008b1c <_malloc_usable_size_r>
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d20f      	bcs.n	8008af4 <_realloc_r+0x48>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f7ff ff8e 	bl	80089f8 <_malloc_r>
 8008adc:	4605      	mov	r5, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d0f2      	beq.n	8008ac8 <_realloc_r+0x1c>
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	f7ff fc11 	bl	800830c <memcpy>
 8008aea:	4631      	mov	r1, r6
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff ff35 	bl	800895c <_free_r>
 8008af2:	e7e9      	b.n	8008ac8 <_realloc_r+0x1c>
 8008af4:	4635      	mov	r5, r6
 8008af6:	e7e7      	b.n	8008ac8 <_realloc_r+0x1c>

08008af8 <_sbrk_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4c06      	ldr	r4, [pc, #24]	; (8008b14 <_sbrk_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4605      	mov	r5, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	f7fb f834 	bl	8003b70 <_sbrk>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_sbrk_r+0x1a>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_sbrk_r+0x1a>
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	2000c168 	.word	0x2000c168

08008b18 <__malloc_lock>:
 8008b18:	4770      	bx	lr

08008b1a <__malloc_unlock>:
 8008b1a:	4770      	bx	lr

08008b1c <_malloc_usable_size_r>:
 8008b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b20:	1f18      	subs	r0, r3, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfbc      	itt	lt
 8008b26:	580b      	ldrlt	r3, [r1, r0]
 8008b28:	18c0      	addlt	r0, r0, r3
 8008b2a:	4770      	bx	lr

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
