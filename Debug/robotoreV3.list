
robotoreV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000865c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008984  08008984  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800898c  0800898c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0dc  20000070  08008a04  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c14c  08008a04  0002c14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae26  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fcc  00000000  00000000  0003aec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  0003de98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003f218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227c5  00000000  00000000  00040440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c6b  00000000  00000000  00062c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8f1f  00000000  00000000  00073870  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  0013c80c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087d4 	.word	0x080087d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080087d4 	.word	0x080087d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	d1ed      	bne.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a8 	b.w	8001030 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_f2lz>:
 8000cf8:	ee07 0a90 	vmov	s15, r0
 8000cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d04:	d401      	bmi.n	8000d0a <__aeabi_f2lz+0x12>
 8000d06:	f000 b809 	b.w	8000d1c <__aeabi_f2ulz>
 8000d0a:	b508      	push	{r3, lr}
 8000d0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	f000 f804 	bl	8000d1c <__aeabi_f2ulz>
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	bd08      	pop	{r3, pc}

08000d1c <__aeabi_f2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	f7ff fc0b 	bl	8000538 <__aeabi_f2d>
 8000d22:	2200      	movs	r2, #0
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <__aeabi_f2ulz+0x40>)
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
 8000d2a:	f7ff fc5d 	bl	80005e8 <__aeabi_dmul>
 8000d2e:	f000 f981 	bl	8001034 <__aeabi_d2uiz>
 8000d32:	4604      	mov	r4, r0
 8000d34:	f7ff fbde 	bl	80004f4 <__aeabi_ui2d>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <__aeabi_f2ulz+0x44>)
 8000d3c:	f7ff fc54 	bl	80005e8 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4630      	mov	r0, r6
 8000d46:	4639      	mov	r1, r7
 8000d48:	f7ff fa96 	bl	8000278 <__aeabi_dsub>
 8000d4c:	f000 f972 	bl	8001034 <__aeabi_d2uiz>
 8000d50:	2200      	movs	r2, #0
 8000d52:	4623      	mov	r3, r4
 8000d54:	4310      	orrs	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4688      	mov	r8, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14b      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4615      	mov	r5, r2
 8000d76:	d967      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0720 	rsb	r7, r2, #32
 8000d82:	fa01 f302 	lsl.w	r3, r1, r2
 8000d86:	fa20 f707 	lsr.w	r7, r0, r7
 8000d8a:	4095      	lsls	r5, r2
 8000d8c:	ea47 0803 	orr.w	r8, r7, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d9c:	fa1f fc85 	uxth.w	ip, r5
 8000da0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000da4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da8:	fb07 f10c 	mul.w	r1, r7, ip
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18eb      	adds	r3, r5, r3
 8000db2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000db6:	f080 811b 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8118 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dc0:	3f02      	subs	r7, #2
 8000dc2:	442b      	add	r3, r5
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	192c      	adds	r4, r5, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8107 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	f240 8104 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dec:	3802      	subs	r0, #2
 8000dee:	442c      	add	r4, r5
 8000df0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000df4:	eba4 040c 	sub.w	r4, r4, ip
 8000df8:	2700      	movs	r7, #0
 8000dfa:	b11e      	cbz	r6, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c6 4300 	strd	r4, r3, [r6]
 8000e04:	4639      	mov	r1, r7
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0xbe>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80eb 	beq.w	8000fea <__udivmoddi4+0x286>
 8000e14:	2700      	movs	r7, #0
 8000e16:	e9c6 0100 	strd	r0, r1, [r6]
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	fab3 f783 	clz	r7, r3
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d147      	bne.n	8000eba <__udivmoddi4+0x156>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xd0>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 80fa 	bhi.w	8001028 <__udivmoddi4+0x2c4>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d0e0      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000e42:	e9c6 4800 	strd	r4, r8, [r6]
 8000e46:	e7dd      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000e48:	b902      	cbnz	r2, 8000e4c <__udivmoddi4+0xe8>
 8000e4a:	deff      	udf	#255	; 0xff
 8000e4c:	fab2 f282 	clz	r2, r2
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f040 808f 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e56:	1b49      	subs	r1, r1, r5
 8000e58:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5c:	fa1f f885 	uxth.w	r8, r5
 8000e60:	2701      	movs	r7, #1
 8000e62:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e70:	fb08 f10c 	mul.w	r1, r8, ip
 8000e74:	4299      	cmp	r1, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e78:	18eb      	adds	r3, r5, r3
 8000e7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	f200 80cd 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e86:	4684      	mov	ip, r0
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	b2a3      	uxth	r3, r4
 8000e8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e90:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e98:	fb08 f800 	mul.w	r8, r8, r0
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x14c>
 8000ea0:	192c      	adds	r4, r5, r4
 8000ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x14a>
 8000ea8:	45a0      	cmp	r8, r4
 8000eaa:	f200 80b6 	bhi.w	800101a <__udivmoddi4+0x2b6>
 8000eae:	4618      	mov	r0, r3
 8000eb0:	eba4 0408 	sub.w	r4, r4, r8
 8000eb4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb8:	e79f      	b.n	8000dfa <__udivmoddi4+0x96>
 8000eba:	f1c7 0c20 	rsb	ip, r7, #32
 8000ebe:	40bb      	lsls	r3, r7
 8000ec0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ec4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ec8:	fa01 f407 	lsl.w	r4, r1, r7
 8000ecc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ed0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ed4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ed8:	4325      	orrs	r5, r4
 8000eda:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ede:	0c2c      	lsrs	r4, r5, #16
 8000ee0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ee4:	fa1f fa8e 	uxth.w	sl, lr
 8000ee8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000eec:	fb09 f40a 	mul.w	r4, r9, sl
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ef6:	fa00 f107 	lsl.w	r1, r0, r7
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1e 0303 	adds.w	r3, lr, r3
 8000f00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f04:	f080 8087 	bcs.w	8001016 <__udivmoddi4+0x2b2>
 8000f08:	429c      	cmp	r4, r3
 8000f0a:	f240 8084 	bls.w	8001016 <__udivmoddi4+0x2b2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	4473      	add	r3, lr
 8000f14:	1b1b      	subs	r3, r3, r4
 8000f16:	b2ad      	uxth	r5, r5
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f24:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f28:	45a2      	cmp	sl, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1e 0404 	adds.w	r4, lr, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	d26b      	bcs.n	800100e <__udivmoddi4+0x2aa>
 8000f36:	45a2      	cmp	sl, r4
 8000f38:	d969      	bls.n	800100e <__udivmoddi4+0x2aa>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	4474      	add	r4, lr
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	fba0 8902 	umull	r8, r9, r0, r2
 8000f46:	eba4 040a 	sub.w	r4, r4, sl
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c2      	mov	sl, r8
 8000f4e:	464b      	mov	r3, r9
 8000f50:	d354      	bcc.n	8000ffc <__udivmoddi4+0x298>
 8000f52:	d051      	beq.n	8000ff8 <__udivmoddi4+0x294>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d069      	beq.n	800102c <__udivmoddi4+0x2c8>
 8000f58:	ebb1 050a 	subs.w	r5, r1, sl
 8000f5c:	eb64 0403 	sbc.w	r4, r4, r3
 8000f60:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f64:	40fd      	lsrs	r5, r7
 8000f66:	40fc      	lsrs	r4, r7
 8000f68:	ea4c 0505 	orr.w	r5, ip, r5
 8000f6c:	e9c6 5400 	strd	r5, r4, [r6]
 8000f70:	2700      	movs	r7, #0
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000f74:	f1c2 0320 	rsb	r3, r2, #32
 8000f78:	fa20 f703 	lsr.w	r7, r0, r3
 8000f7c:	4095      	lsls	r5, r2
 8000f7e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f82:	fa21 f303 	lsr.w	r3, r1, r3
 8000f86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f8a:	4338      	orrs	r0, r7
 8000f8c:	0c01      	lsrs	r1, r0, #16
 8000f8e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f92:	fa1f f885 	uxth.w	r8, r5
 8000f96:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb07 f308 	mul.w	r3, r7, r8
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x256>
 8000faa:	1869      	adds	r1, r5, r1
 8000fac:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fb0:	d22f      	bcs.n	8001012 <__udivmoddi4+0x2ae>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d92d      	bls.n	8001012 <__udivmoddi4+0x2ae>
 8000fb6:	3f02      	subs	r7, #2
 8000fb8:	4429      	add	r1, r5
 8000fba:	1acb      	subs	r3, r1, r3
 8000fbc:	b281      	uxth	r1, r0
 8000fbe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fc2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fca:	fb00 f308 	mul.w	r3, r0, r8
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d907      	bls.n	8000fe2 <__udivmoddi4+0x27e>
 8000fd2:	1869      	adds	r1, r5, r1
 8000fd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fd8:	d217      	bcs.n	800100a <__udivmoddi4+0x2a6>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d915      	bls.n	800100a <__udivmoddi4+0x2a6>
 8000fde:	3802      	subs	r0, #2
 8000fe0:	4429      	add	r1, r5
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fe8:	e73b      	b.n	8000e62 <__udivmoddi4+0xfe>
 8000fea:	4637      	mov	r7, r6
 8000fec:	4630      	mov	r0, r6
 8000fee:	e709      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000ff0:	4607      	mov	r7, r0
 8000ff2:	e6e7      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6fb      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff8:	4541      	cmp	r1, r8
 8000ffa:	d2ab      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8000ffc:	ebb8 0a02 	subs.w	sl, r8, r2
 8001000:	eb69 020e 	sbc.w	r2, r9, lr
 8001004:	3801      	subs	r0, #1
 8001006:	4613      	mov	r3, r2
 8001008:	e7a4      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100a:	4660      	mov	r0, ip
 800100c:	e7e9      	b.n	8000fe2 <__udivmoddi4+0x27e>
 800100e:	4618      	mov	r0, r3
 8001010:	e795      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001012:	4667      	mov	r7, ip
 8001014:	e7d1      	b.n	8000fba <__udivmoddi4+0x256>
 8001016:	4681      	mov	r9, r0
 8001018:	e77c      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101a:	3802      	subs	r0, #2
 800101c:	442c      	add	r4, r5
 800101e:	e747      	b.n	8000eb0 <__udivmoddi4+0x14c>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	442b      	add	r3, r5
 8001026:	e72f      	b.n	8000e88 <__udivmoddi4+0x124>
 8001028:	4638      	mov	r0, r7
 800102a:	e708      	b.n	8000e3e <__udivmoddi4+0xda>
 800102c:	4637      	mov	r7, r6
 800102e:	e6e9      	b.n	8000e04 <__udivmoddi4+0xa0>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_d2uiz>:
 8001034:	004a      	lsls	r2, r1, #1
 8001036:	d211      	bcs.n	800105c <__aeabi_d2uiz+0x28>
 8001038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800103c:	d211      	bcs.n	8001062 <__aeabi_d2uiz+0x2e>
 800103e:	d50d      	bpl.n	800105c <__aeabi_d2uiz+0x28>
 8001040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001048:	d40e      	bmi.n	8001068 <__aeabi_d2uiz+0x34>
 800104a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800104e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001056:	fa23 f002 	lsr.w	r0, r3, r2
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001066:	d102      	bne.n	800106e <__aeabi_d2uiz+0x3a>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr

08001074 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 800107e:	2300      	movs	r3, #0
 8001080:	733b      	strb	r3, [r7, #12]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	217c      	movs	r1, #124	; 0x7c
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <lcd_cmd+0x2c>)
 8001094:	f004 fa2c 	bl	80054f0 <HAL_I2C_Master_Transmit>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001b8 	.word	0x200001b8

080010a4 <lcd_data>:

void lcd_data(uint8_t data) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	733b      	strb	r3, [r7, #12]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2302      	movs	r3, #2
 80010c0:	217c      	movs	r1, #124	; 0x7c
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <lcd_data+0x2c>)
 80010c4:	f004 fa14 	bl	80054f0 <HAL_I2C_Master_Transmit>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200001b8 	.word	0x200001b8

080010d4 <lcd_init>:

void lcd_init(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 80010d8:	2028      	movs	r0, #40	; 0x28
 80010da:	f002 fe6f 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x38);
 80010de:	2038      	movs	r0, #56	; 0x38
 80010e0:	f7ff ffc8 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f002 fe69 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x39);
 80010ea:	2039      	movs	r0, #57	; 0x39
 80010ec:	f7ff ffc2 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f002 fe63 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x14);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f7ff ffbc 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f002 fe5d 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x70);
 8001102:	2070      	movs	r0, #112	; 0x70
 8001104:	f7ff ffb6 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f002 fe57 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x56);
 800110e:	2056      	movs	r0, #86	; 0x56
 8001110:	f7ff ffb0 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f002 fe51 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x6C);
 800111a:	206c      	movs	r0, #108	; 0x6c
 800111c:	f7ff ffaa 	bl	8001074 <lcd_cmd>
	HAL_Delay(200);
 8001120:	20c8      	movs	r0, #200	; 0xc8
 8001122:	f002 fe4b 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x38);
 8001126:	2038      	movs	r0, #56	; 0x38
 8001128:	f7ff ffa4 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f002 fe45 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x0C);
 8001132:	200c      	movs	r0, #12
 8001134:	f7ff ff9e 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f002 fe3f 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x01);
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff ff98 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f002 fe39 	bl	8003dbc <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <lcd_clear>:

void lcd_clear(){
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ff8e 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f002 fe2f 	bl	8003dbc <HAL_Delay>
	lcd_cmd(0x02);
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff ff88 	bl	8001074 <lcd_cmd>
	HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f002 fe29 	bl	8003dbc <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <lcd_locate>:

void lcd_locate(int x, int y) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff72 	bl	8001074 <lcd_cmd>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_print>:

void lcd_print(const char *str) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80011a0:	e007      	b.n	80011b2 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff7c 	bl	80010a4 <lcd_data>
			str++;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f3      	bne.n	80011a2 <lcd_print+0xa>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 80011c2:	b40f      	push	{r0, r1, r2, r3}
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 80011ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ce:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 ff16 	bl	8008008 <vsiprintf>
 80011dc:	4603      	mov	r3, r0
 80011de:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 80011e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dd03      	ble.n	80011f0 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffd4 	bl	8001198 <lcd_print>
	}

	return ret;
 80011f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fe:	b004      	add	sp, #16
 8001200:	4770      	bx	lr
	...

08001204 <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 800120e:	1dfa      	adds	r2, r7, #7
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <INA260_read+0x48>)
 800121a:	f004 f969 	bl	80054f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 800121e:	f107 020c 	add.w	r2, r7, #12
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2302      	movs	r3, #2
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <INA260_read+0x48>)
 800122c:	f004 fa5e 	bl	80056ec <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001230:	7b3b      	ldrb	r3, [r7, #12]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b21b      	sxth	r3, r3
 800123e:	81fb      	strh	r3, [r7, #14]
	return val;
 8001240:	89fb      	ldrh	r3, [r7, #14]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000164 	.word	0x20000164

08001250 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	gpio_set();
 8001254:	f000 fea4 	bl	8001fa0 <gpio_set>
	lcd_init();
 8001258:	f7ff ff3c 	bl	80010d4 <lcd_init>
		lcd_locate(0,1);
		lcd_print("Failed");
	}
	*/
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800125c:	213c      	movs	r1, #60	; 0x3c
 800125e:	4816      	ldr	r0, [pc, #88]	; (80012b8 <init+0x68>)
 8001260:	f005 fd80 	bl	8006d64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001264:	213c      	movs	r1, #60	; 0x3c
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <init+0x6c>)
 8001268:	f005 fd7c 	bl	8006d64 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <init+0x70>)
 8001270:	f005 fca8 	bl	8006bc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <init+0x70>)
 8001278:	f005 fca4 	bl	8006bc4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <init+0x70>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <init+0x70>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <init+0x74>)
 8001290:	f005 fc98 	bl	8006bc4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <init+0x74>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);//[:]
 800129c:	480a      	ldr	r0, [pc, #40]	; (80012c8 <init+0x78>)
 800129e:	f005 fc42 	bl	8006b26 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <init+0x7c>)
 80012a4:	f005 fc3f 	bl	8006b26 <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 80012a8:	220e      	movs	r2, #14
 80012aa:	4909      	ldr	r1, [pc, #36]	; (80012d0 <init+0x80>)
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <init+0x84>)
 80012ae:	f002 fdeb 	bl	8003e88 <HAL_ADC_Start_DMA>

	//log_adress = start_adress_sector7;
	//plan_velo_adress = start_adress_sector10;

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200003e8 	.word	0x200003e8
 80012bc:	20000124 	.word	0x20000124
 80012c0:	20000468 	.word	0x20000468
 80012c4:	20000428 	.word	0x20000428
 80012c8:	200003a8 	.word	0x200003a8
 80012cc:	200004a8 	.word	0x200004a8
 80012d0:	2000032c 	.word	0x2000032c
 80012d4:	200002a4 	.word	0x200002a4

080012d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

	//uint64_t enc_cnt_10ms;


	if(htim->Instance == htim6.Instance){	//1ms
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b54      	ldr	r3, [pc, #336]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 80a0 	bne.w	800142e <HAL_TIM_PeriodElapsedCallback+0x156>

		cnt_sw++;
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80012f8:	701a      	strb	r2, [r3, #0]
		if(cnt_sw >= 250) cnt_sw = 30;
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2bf9      	cmp	r3, #249	; 0xf9
 8001300:	d902      	bls.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x30>
 8001302:	4b4e      	ldr	r3, [pc, #312]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001304:	221e      	movs	r2, #30
 8001306:	701a      	strb	r2, [r3, #0]


		getEncoder();
 8001308:	f001 f99a 	bl	8002640 <getEncoder>
		posPID();
 800130c:	f000 fec2 	bl	8002094 <posPID>
		velPID(target_vel);
 8001310:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f000 ff89 	bl	8002230 <velPID>
		//read_gyro_data();
		//read_accel_data();
		ADval_get();
 800131e:	f001 f801 	bl	8002324 <ADval_get>
		ADval_sum();
 8001322:	f001 f931 	bl	8002588 <ADval_sum>
		CrossCheck(CROSSCHECK);
 8001326:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800132a:	f001 f859 	bl	80023e0 <CrossCheck>
		Maker_Check();
 800132e:	f001 f8bb 	bl	80024a8 <Maker_Check>


		timer++;
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800133a:	6013      	str	r3, [r2, #0]
		}
		else{
			Sensor_st = 0;
		}*/

		if(main_pattern){
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03d      	beq.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xe8>

			motor_pwmL = order_velL + order_posL;
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001356:	edc3 7a00 	vstr	s15, [r3]
			motor_pwmR = order_velR + order_posR;
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800135c:	ed93 7a00 	vldr	s14, [r3]
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800136c:	edc3 7a00 	vstr	s15, [r3]


			Motorset((int16_t)(order_velL + order_posL), (int16_t)(order_velR + order_posR), 0);
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001372:	ed93 7a00 	vldr	s14, [r3]
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b218      	sxth	r0, r3
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800138c:	ed93 7a00 	vldr	s14, [r3]
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139e:	ee17 3a90 	vmov	r3, s15
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	f000 fe14 	bl	8001fd4 <Motorset>
			/*if(MR_flag == 1  ){
				MR_flag = 0 ;


			}else*/
			if(GL_flag == 2 ){
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d105      	bne.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0xe8>
				main_pattern = 11;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013b6:	220b      	movs	r2, #11
 80013b8:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]





		 if(main_pattern == 11){
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b0b      	cmp	r3, #11
 80013c6:	d11a      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x126>
			Motorset((int16_t)(order_posL), (int16_t)(order_posR), 0);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	b218      	sxth	r0, r3
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	f000 fdf2 	bl	8001fd4 <Motorset>
			if(timer >= 50){
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b31      	cmp	r3, #49	; 0x31
 80013f6:	dd02      	ble.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x126>
				main_pattern = 12;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(main_pattern == 12){
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d113      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x156>
			Motorset((int16_t)(order_posL), (int16_t)(order_posR), 0);
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001410:	ee17 3a90 	vmov	r3, s15
 8001414:	b218      	sxth	r0, r3
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001420:	ee17 3a90 	vmov	r3, s15
 8001424:	b21b      	sxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f000 fdd3 	bl	8001fd4 <Motorset>
		}

	}


}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003a8 	.word	0x200003a8
 800143c:	2000010b 	.word	0x2000010b
 8001440:	20000500 	.word	0x20000500
 8001444:	200000e8 	.word	0x200000e8
 8001448:	200000ec 	.word	0x200000ec
 800144c:	20000094 	.word	0x20000094
 8001450:	20000090 	.word	0x20000090
 8001454:	2000009c 	.word	0x2000009c
 8001458:	20000098 	.word	0x20000098
 800145c:	2000008c 	.word	0x2000008c
 8001460:	200000a0 	.word	0x200000a0
 8001464:	20000100 	.word	0x20000100

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f002 fc34 	bl	8003cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f822 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fcac 	bl	8001dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 fc8a 	bl	8001d90 <MX_DMA_Init>
  MX_ADC1_Init();
 800147c:	f000 f886 	bl	800158c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001480:	f000 f98c 	bl	800179c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001484:	f000 f9b8 	bl	80017f8 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001488:	f000 f9e4 	bl	8001854 <MX_SPI3_Init>
  MX_TIM1_Init();
 800148c:	f000 fa18 	bl	80018c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001490:	f000 fa6e 	bl	8001970 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001494:	f000 fac4 	bl	8001a20 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001498:	f000 fba8 	bl	8001bec <MX_TIM8_Init>
  MX_TIM12_Init();
 800149c:	f000 fbfe 	bl	8001c9c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80014a0:	f000 fc4c 	bl	8001d3c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80014a4:	f000 fb36 	bl	8001b14 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014a8:	f000 fb6a 	bl	8001b80 <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  init();
 80014ac:	f7ff fed0 	bl	8001250 <init>


  while (1)
  {
	  setup();
 80014b0:	f001 f9c0 	bl	8002834 <setup>
 80014b4:	e7fc      	b.n	80014b0 <main+0x48>
	...

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b094      	sub	sp, #80	; 0x50
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2230      	movs	r2, #48	; 0x30
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f006 fd7f 	bl	8007fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xcc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <SystemClock_Config+0xcc>)
 80014e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <SystemClock_Config+0xd0>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001514:	2301      	movs	r3, #1
 8001516:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001518:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001528:	2306      	movs	r3, #6
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800152c:	23a8      	movs	r3, #168	; 0xa8
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	4618      	mov	r0, r3
 800153e:	f004 fe27 	bl	8006190 <HAL_RCC_OscConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001548:	f000 fd22 	bl	8001f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154c:	230f      	movs	r3, #15
 800154e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001550:	2302      	movs	r3, #2
 8001552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001558:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800155c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2105      	movs	r1, #5
 800156a:	4618      	mov	r0, r3
 800156c:	f005 f880 	bl	8006670 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001576:	f000 fd0b 	bl	8001f90 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3750      	adds	r7, #80	; 0x50
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800159e:	4b7c      	ldr	r3, [pc, #496]	; (8001790 <MX_ADC1_Init+0x204>)
 80015a0:	4a7c      	ldr	r2, [pc, #496]	; (8001794 <MX_ADC1_Init+0x208>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a4:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <MX_ADC1_Init+0x204>)
 80015a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ac:	4b78      	ldr	r3, [pc, #480]	; (8001790 <MX_ADC1_Init+0x204>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <MX_ADC1_Init+0x204>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <MX_ADC1_Init+0x204>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015be:	4b74      	ldr	r3, [pc, #464]	; (8001790 <MX_ADC1_Init+0x204>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <MX_ADC1_Init+0x204>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <MX_ADC1_Init+0x204>)
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <MX_ADC1_Init+0x20c>)
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <MX_ADC1_Init+0x204>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 80015d8:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <MX_ADC1_Init+0x204>)
 80015da:	220e      	movs	r2, #14
 80015dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015de:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <MX_ADC1_Init+0x204>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e6:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <MX_ADC1_Init+0x204>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ec:	4868      	ldr	r0, [pc, #416]	; (8001790 <MX_ADC1_Init+0x204>)
 80015ee:	f002 fc07 	bl	8003e00 <HAL_ADC_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015f8:	f000 fcca 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001604:	2302      	movs	r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	4619      	mov	r1, r3
 800160c:	4860      	ldr	r0, [pc, #384]	; (8001790 <MX_ADC1_Init+0x204>)
 800160e:	f002 fd4b 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001618:	f000 fcba 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800161c:	2301      	movs	r3, #1
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4859      	ldr	r0, [pc, #356]	; (8001790 <MX_ADC1_Init+0x204>)
 800162a:	f002 fd3d 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001634:	f000 fcac 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001638:	2302      	movs	r3, #2
 800163a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800163c:	2303      	movs	r3, #3
 800163e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4852      	ldr	r0, [pc, #328]	; (8001790 <MX_ADC1_Init+0x204>)
 8001646:	f002 fd2f 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001650:	f000 fc9e 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001654:	2303      	movs	r3, #3
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001658:	2304      	movs	r3, #4
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	484b      	ldr	r0, [pc, #300]	; (8001790 <MX_ADC1_Init+0x204>)
 8001662:	f002 fd21 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800166c:	f000 fc90 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001670:	2304      	movs	r3, #4
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001674:	2305      	movs	r3, #5
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4844      	ldr	r0, [pc, #272]	; (8001790 <MX_ADC1_Init+0x204>)
 800167e:	f002 fd13 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001688:	f000 fc82 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800168c:	2305      	movs	r3, #5
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001690:	2306      	movs	r3, #6
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	483d      	ldr	r0, [pc, #244]	; (8001790 <MX_ADC1_Init+0x204>)
 800169a:	f002 fd05 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016a4:	f000 fc74 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016a8:	2306      	movs	r3, #6
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016ac:	2307      	movs	r3, #7
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4836      	ldr	r0, [pc, #216]	; (8001790 <MX_ADC1_Init+0x204>)
 80016b6:	f002 fcf7 	bl	80040a8 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016c0:	f000 fc66 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016c4:	2307      	movs	r3, #7
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	482f      	ldr	r0, [pc, #188]	; (8001790 <MX_ADC1_Init+0x204>)
 80016d2:	f002 fce9 	bl	80040a8 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80016dc:	f000 fc58 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016e0:	2308      	movs	r3, #8
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80016e4:	2309      	movs	r3, #9
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4828      	ldr	r0, [pc, #160]	; (8001790 <MX_ADC1_Init+0x204>)
 80016ee:	f002 fcdb 	bl	80040a8 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80016f8:	f000 fc4a 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016fc:	2309      	movs	r3, #9
 80016fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001700:	230a      	movs	r3, #10
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4821      	ldr	r0, [pc, #132]	; (8001790 <MX_ADC1_Init+0x204>)
 800170a:	f002 fccd 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001714:	f000 fc3c 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001718:	230e      	movs	r3, #14
 800171a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800171c:	230b      	movs	r3, #11
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <MX_ADC1_Init+0x204>)
 8001726:	f002 fcbf 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001730:	f000 fc2e 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001734:	230f      	movs	r3, #15
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001738:	230c      	movs	r3, #12
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <MX_ADC1_Init+0x204>)
 8001742:	f002 fcb1 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800174c:	f000 fc20 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001750:	230c      	movs	r3, #12
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001754:	230d      	movs	r3, #13
 8001756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_ADC1_Init+0x204>)
 800175e:	f002 fca3 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001768:	f000 fc12 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800176c:	230d      	movs	r3, #13
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001770:	230e      	movs	r3, #14
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_ADC1_Init+0x204>)
 800177a:	f002 fc95 	bl	80040a8 <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001784:	f000 fc04 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200002a4 	.word	0x200002a4
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_I2C1_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <MX_I2C1_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C1_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_I2C1_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_I2C1_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_I2C1_Init+0x50>)
 80017da:	f003 fd51 	bl	8005280 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 fbd4 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000164 	.word	0x20000164
 80017f0:	40005400 	.word	0x40005400
 80017f4:	00061a80 	.word	0x00061a80

080017f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C2_Init+0x50>)
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <MX_I2C2_Init+0x54>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_I2C2_Init+0x50>)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_I2C2_Init+0x58>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_I2C2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_I2C2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_I2C2_Init+0x50>)
 8001816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_I2C2_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_I2C2_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_I2C2_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_I2C2_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_I2C2_Init+0x50>)
 8001836:	f003 fd23 	bl	8005280 <HAL_I2C_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001840:	f000 fba6 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200001b8 	.word	0x200001b8
 800184c:	40005800 	.word	0x40005800
 8001850:	000186a0 	.word	0x000186a0

08001854 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_SPI3_Init+0x64>)
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <MX_SPI3_Init+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_SPI3_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001874:	2202      	movs	r2, #2
 8001876:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_SPI3_Init+0x64>)
 800187a:	2201      	movs	r2, #1
 800187c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001884:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001888:	2220      	movs	r2, #32
 800188a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_SPI3_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_SPI3_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_SPI3_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_SPI3_Init+0x64>)
 80018a0:	220a      	movs	r2, #10
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_SPI3_Init+0x64>)
 80018a6:	f005 f8af 	bl	8006a08 <HAL_SPI_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018b0:	f000 fb6e 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	2000024c 	.word	0x2000024c
 80018bc:	40003c00 	.word	0x40003c00

080018c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f006 fb7b 	bl	8007fca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_TIM1_Init+0xac>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM1_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM1_Init+0xa8>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001908:	2303      	movs	r3, #3
 800190a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001920:	2301      	movs	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM1_Init+0xa8>)
 8001934:	f005 f984 	bl	8006c40 <HAL_TIM_Encoder_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800193e:	f000 fb27 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM1_Init+0xa8>)
 8001950:	f005 feac 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800195a:	f000 fb19 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3730      	adds	r7, #48	; 0x30
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200003e8 	.word	0x200003e8
 800196c:	40010000 	.word	0x40010000

08001970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <MX_TIM2_Init+0xac>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_TIM2_Init+0xac>)
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019a8:	f241 0267 	movw	r2, #4199	; 0x1067
 80019ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019bc:	f005 f8d7 	bl	8006b6e <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019c6:	f000 fae3 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	4619      	mov	r1, r3
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MX_TIM2_Init+0xac>)
 80019da:	f005 fe67 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019e4:	f000 fad4 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	; 0x60
 80019ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM2_Init+0xac>)
 8001a00:	f005 faf0 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a0a:	f000 fac1 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM2_Init+0xac>)
 8001a10:	f001 fee0 	bl	80037d4 <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000428 	.word	0x20000428

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a44:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <MX_TIM3_Init+0xf0>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a56:	f241 0267 	movw	r2, #4199	; 0x1067
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a68:	4828      	ldr	r0, [pc, #160]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a6a:	f005 f880 	bl	8006b6e <HAL_TIM_PWM_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a74:	f000 fa8c 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	4619      	mov	r1, r3
 8001a86:	4821      	ldr	r0, [pc, #132]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001a88:	f005 fe10 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a92:	f000 fa7d 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a96:	2360      	movs	r3, #96	; 0x60
 8001a98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4817      	ldr	r0, [pc, #92]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001aae:	f005 fa99 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ab8:	f000 fa6a 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4812      	ldr	r0, [pc, #72]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001ac4:	f005 fa8e 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ace:	f000 fa5f 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001ada:	f005 fa83 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001ae4:	f000 fa54 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	220c      	movs	r2, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001af0:	f005 fa78 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001afa:	f000 fa49 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM3_Init+0xec>)
 8001b00:	f001 fe68 	bl	80037d4 <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000020c 	.word	0x2000020c
 8001b10:	40000400 	.word	0x40000400

08001b14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b24:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b2a:	2213      	movs	r2, #19
 8001b2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b36:	f241 0267 	movw	r2, #4199	; 0x1067
 8001b3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b44:	f004 ffc4 	bl	8006ad0 <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b4e:	f000 fa1f 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <MX_TIM6_Init+0x64>)
 8001b60:	f005 fda4 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b6a:	f000 fa11 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200003a8 	.word	0x200003a8
 8001b7c:	40001000 	.word	0x40001000

08001b80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_TIM7_Init+0x68>)
 8001b92:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001b96:	22a7      	movs	r2, #167	; 0xa7
 8001b98:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001ba2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ba6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001bb0:	f004 ff8e 	bl	8006ad0 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001bba:	f000 f9e9 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_TIM7_Init+0x64>)
 8001bcc:	f005 fd6e 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001bd6:	f000 f9db 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200004a8 	.word	0x200004a8
 8001be8:	40001400 	.word	0x40001400

08001bec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 f9e5 	bl	8007fca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <MX_TIM8_Init+0xac>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c34:	2303      	movs	r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c60:	f004 ffee 	bl	8006c40 <HAL_TIM_Encoder_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001c6a:	f000 f991 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_TIM8_Init+0xa8>)
 8001c7c:	f005 fd16 	bl	80076ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001c86:	f000 f983 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000124 	.word	0x20000124
 8001c98:	40010400 	.word	0x40010400

08001c9c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <MX_TIM12_Init+0x9c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cc8:	f240 3247 	movw	r2, #839	; 0x347
 8001ccc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001cda:	4816      	ldr	r0, [pc, #88]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001cdc:	f004 ff47 	bl	8006b6e <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001ce6:	f000 f953 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	; 0x60
 8001cec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001d02:	f005 f96f 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001d0c:	f000 f940 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2204      	movs	r2, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001d18:	f005 f964 	bl	8006fe4 <HAL_TIM_PWM_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001d22:	f000 f935 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d26:	4803      	ldr	r0, [pc, #12]	; (8001d34 <MX_TIM12_Init+0x98>)
 8001d28:	f001 fd54 	bl	80037d4 <HAL_TIM_MspPostInit>

}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000468 	.word	0x20000468
 8001d38:	40001800 	.word	0x40001800

08001d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <MX_USART1_UART_Init+0x50>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f005 fd2a 	bl	80077cc <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7e:	f000 f907 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200002ec 	.word	0x200002ec
 8001d8c:	40011000 	.word	0x40011000

08001d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_DMA_Init+0x3c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <MX_DMA_Init+0x3c>)
 8001da0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_DMA_Init+0x3c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	2038      	movs	r0, #56	; 0x38
 8001db8:	f002 fcf1 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dbc:	2038      	movs	r0, #56	; 0x38
 8001dbe:	f002 fd0a 	bl	80047d6 <HAL_NVIC_EnableIRQ>

}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a54      	ldr	r2, [pc, #336]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a4d      	ldr	r2, [pc, #308]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <MX_GPIO_Init+0x1a8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f242 0104 	movw	r1, #8196	; 0x2004
 8001e78:	4840      	ldr	r0, [pc, #256]	; (8001f7c <MX_GPIO_Init+0x1ac>)
 8001e7a:	f003 f9cf 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001e84:	483e      	ldr	r0, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x1b0>)
 8001e86:	f003 f9c9 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	483d      	ldr	r0, [pc, #244]	; (8001f84 <MX_GPIO_Init+0x1b4>)
 8001e90:	f003 f9c4 	bl	800521c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001e94:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001e98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <MX_GPIO_Init+0x1b8>)
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4838      	ldr	r0, [pc, #224]	; (8001f8c <MX_GPIO_Init+0x1bc>)
 8001eaa:	f003 f81d 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 8001eae:	f242 0304 	movw	r3, #8196	; 0x2004
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482d      	ldr	r0, [pc, #180]	; (8001f7c <MX_GPIO_Init+0x1ac>)
 8001ec8:	f003 f80e 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <MX_GPIO_Init+0x1b8>)
 8001ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4826      	ldr	r0, [pc, #152]	; (8001f7c <MX_GPIO_Init+0x1ac>)
 8001ee2:	f003 f801 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4820      	ldr	r0, [pc, #128]	; (8001f80 <MX_GPIO_Init+0x1b0>)
 8001f00:	f002 fff2 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4818      	ldr	r0, [pc, #96]	; (8001f80 <MX_GPIO_Init+0x1b0>)
 8001f1e:	f002 ffe3 	bl	8004ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f22:	2304      	movs	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_GPIO_Init+0x1b4>)
 8001f3a:	f002 ffd5 	bl	8004ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2006      	movs	r0, #6
 8001f44:	f002 fc2b 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f48:	2006      	movs	r0, #6
 8001f4a:	f002 fc44 	bl	80047d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2007      	movs	r0, #7
 8001f54:	f002 fc23 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f58:	2007      	movs	r0, #7
 8001f5a:	f002 fc3c 	bl	80047d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2028      	movs	r0, #40	; 0x28
 8001f64:	f002 fc1b 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f002 fc34 	bl	80047d6 <HAL_NVIC_EnableIRQ>

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	10110000 	.word	0x10110000
 8001f8c:	40020800 	.word	0x40020800

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <gpio_set>:
float target_vel;
int i_vel_clear_flag;
int i_pos_clear_flag;
float mon_def_pos = 0;

void gpio_set(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	CS_SET;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4808      	ldr	r0, [pc, #32]	; (8001fcc <gpio_set+0x2c>)
 8001faa:	f003 f937 	bl	800521c <HAL_GPIO_WritePin>
	MR_SET;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <gpio_set+0x30>)
 8001fb6:	f003 f931 	bl	800521c <HAL_GPIO_WritePin>
	ML_SET;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <gpio_set+0x30>)
 8001fc2:	f003 f92b 	bl	800521c <HAL_GPIO_WritePin>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <Motorset>:

void Motorset(int16_t motorL, int16_t motorR, uint8_t stop) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	80bb      	strh	r3, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	70fb      	strb	r3, [r7, #3]

	int16_t pwmL_out,pwmR_out;

	if(motorR >= 0) {
 8001fe6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db08      	blt.n	8002000 <Motorset+0x2c>
		pwmR_out = motorR;
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	81bb      	strh	r3, [r7, #12]
		MR_RESET;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <Motorset+0xb8>)
 8001ffa:	f003 f90f 	bl	800521c <HAL_GPIO_WritePin>
 8001ffe:	e009      	b.n	8002014 <Motorset+0x40>
	}
	else {
		pwmR_out = motorR * (-1);
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	425b      	negs	r3, r3
 8002004:	b29b      	uxth	r3, r3
 8002006:	81bb      	strh	r3, [r7, #12]
		MR_SET;
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800200e:	481f      	ldr	r0, [pc, #124]	; (800208c <Motorset+0xb8>)
 8002010:	f003 f904 	bl	800521c <HAL_GPIO_WritePin>
	}

	if(motorL >= 0) {
 8002014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db08      	blt.n	800202e <Motorset+0x5a>
		pwmL_out = motorL;
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	81fb      	strh	r3, [r7, #14]
		ML_RESET;
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002026:	4819      	ldr	r0, [pc, #100]	; (800208c <Motorset+0xb8>)
 8002028:	f003 f8f8 	bl	800521c <HAL_GPIO_WritePin>
 800202c:	e009      	b.n	8002042 <Motorset+0x6e>
	}
	else {
		pwmL_out = motorL*(-1) ;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	425b      	negs	r3, r3
 8002032:	b29b      	uxth	r3, r3
 8002034:	81fb      	strh	r3, [r7, #14]
		ML_SET;
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800203c:	4813      	ldr	r0, [pc, #76]	; (800208c <Motorset+0xb8>)
 800203e:	f003 f8ed 	bl	800521c <HAL_GPIO_WritePin>
	}

	if(pwmR_out > COUNTER_PERIOD_TIM12) pwmR_out = 839;
 8002042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002046:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800204a:	db02      	blt.n	8002052 <Motorset+0x7e>
 800204c:	f240 3347 	movw	r3, #839	; 0x347
 8002050:	81bb      	strh	r3, [r7, #12]
	if(pwmL_out > COUNTER_PERIOD_TIM12) pwmL_out = 839;
 8002052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002056:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800205a:	db02      	blt.n	8002062 <Motorset+0x8e>
 800205c:	f240 3347 	movw	r3, #839	; 0x347
 8002060:	81fb      	strh	r3, [r7, #14]

	if(stop == 1) {
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d103      	bne.n	8002070 <Motorset+0x9c>
		pwmR_out = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	81bb      	strh	r3, [r7, #12]
		pwmL_out = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, pwmR_out);
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <Motorset+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002078:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwmL_out);
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <Motorset+0xbc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40020000 	.word	0x40020000
 8002090:	20000468 	.word	0x20000468

08002094 <posPID>:



void posPID(void) {
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0

	float p_pos, d_pos;
	static float i_pos;
	//float kp_pos = 0.025f, ki_pos = 0.004f/*0.004f*/, kd_pos = 0.002f/*0.008f*/;
	float kp_pos = 0.1f, ki_pos = 0.005f/*0.004f*/, kd_pos = 0.006f/*0.008f*/;
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <posPID+0x158>)
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <posPID+0x15c>)
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <posPID+0x160>)
 80020a4:	60fb      	str	r3, [r7, #12]
	static float def_pos[] = {0.0f, 0.0f};

	if(i_pos_clear_flag == 1){
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <posPID+0x164>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <posPID+0x28>
		i_pos = 0;
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <posPID+0x168>)
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
		i_pos_clear_flag = 0;
 80020b6:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <posPID+0x164>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
	}

	//def_pos[0] = ( ((float)line_senLLL * 1.6f) + ((float)line_senLL * 1.25f) + (float)line_senL) - ((float)line_senR + ((float)line_senRR * 1.25f) + ((float)line_senRRR * 1.6f)); //1.25 1.6
	def_pos[0] = ( ((float)line_senLLL) + ((float)line_senLL ) + (float)line_senL) - ((float)line_senR + ((float)line_senRR ) + ((float)line_senRRR))*1.2; //1.25 1.6
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <posPID+0x16c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <posPID+0x170>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <posPID+0x174>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	ee17 0a90 	vmov	r0, s15
 80020ec:	f7fe fa24 	bl	8000538 <__aeabi_f2d>
 80020f0:	4604      	mov	r4, r0
 80020f2:	460d      	mov	r5, r1
 80020f4:	4b45      	ldr	r3, [pc, #276]	; (800220c <posPID+0x178>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <posPID+0x17c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <posPID+0x180>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	ee17 0a90 	vmov	r0, s15
 8002124:	f7fe fa08 	bl	8000538 <__aeabi_f2d>
 8002128:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <posPID+0x184>)
 800212e:	f7fe fa5b 	bl	80005e8 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f89d 	bl	8000278 <__aeabi_dsub>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	f7fe fc61 	bl	8000a0c <__aeabi_d2f>
 800214a:	4602      	mov	r2, r0
 800214c:	4b33      	ldr	r3, [pc, #204]	; (800221c <posPID+0x188>)
 800214e:	601a      	str	r2, [r3, #0]


	mon_def_pos = def_pos[0];
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <posPID+0x188>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a32      	ldr	r2, [pc, #200]	; (8002220 <posPID+0x18c>)
 8002156:	6013      	str	r3, [r2, #0]


	p_pos = kp_pos * def_pos[0]; //P制御
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <posPID+0x188>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a02 	vstr	s15, [r7, #8]
	i_pos += ki_pos * def_pos[0] * DELTA_T; //I制御
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <posPID+0x188>)
 800216c:	ed93 7a00 	vldr	s14, [r3]
 8002170:	edd7 7a04 	vldr	s15, [r7, #16]
 8002174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002178:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002224 <posPID+0x190>
 800217c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <posPID+0x168>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <posPID+0x168>)
 800218c:	edc3 7a00 	vstr	s15, [r3]
	d_pos = kd_pos * (def_pos[0] - def_pos[1]) / DELTA_T; //D制御
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <posPID+0x188>)
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <posPID+0x188>)
 8002198:	edd3 7a01 	vldr	s15, [r3, #4]
 800219c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002224 <posPID+0x190>
 80021ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b0:	edc7 7a01 	vstr	s15, [r7, #4]

//	order_posR = -p_pos + i_pos + d_pos;
//	order_posL = (p_pos + i_pos + d_pos);
	order_posR = -(p_pos +  d_pos);
 80021b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	eef1 7a67 	vneg.f32	s15, s15
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <posPID+0x194>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]
	order_posL = (p_pos + 	d_pos);
 80021ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80021ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <posPID+0x198>)
 80021d8:	edc3 7a00 	vstr	s15, [r3]

	def_pos[1] = def_pos[0];
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <posPID+0x188>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <posPID+0x188>)
 80021e2:	6053      	str	r3, [r2, #4]

}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bdb0      	pop	{r4, r5, r7, pc}
 80021ec:	3dcccccd 	.word	0x3dcccccd
 80021f0:	3ba3d70a 	.word	0x3ba3d70a
 80021f4:	3bc49ba6 	.word	0x3bc49ba6
 80021f8:	200004f4 	.word	0x200004f4
 80021fc:	200000a8 	.word	0x200000a8
 8002200:	200000c0 	.word	0x200000c0
 8002204:	200000c2 	.word	0x200000c2
 8002208:	200000c4 	.word	0x200000c4
 800220c:	200000c6 	.word	0x200000c6
 8002210:	200000c8 	.word	0x200000c8
 8002214:	200000ca 	.word	0x200000ca
 8002218:	3ff33333 	.word	0x3ff33333
 800221c:	200000ac 	.word	0x200000ac
 8002220:	200000a4 	.word	0x200000a4
 8002224:	3a83126f 	.word	0x3a83126f
 8002228:	2000008c 	.word	0x2000008c
 800222c:	20000090 	.word	0x20000090

08002230 <velPID>:

void velPID(float target) {
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_vel, kp_vel = 4.8f/*2.8f*/, ki_vel = 50.0f;	//2.8 50
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <velPID+0xc8>)
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <velPID+0xcc>)
 8002240:	613b      	str	r3, [r7, #16]
	//float vel_center, filter_vel_center, acceleration_imu;
	static float i_vel, def_vel, vel_center;

	if(i_vel_clear_flag == 1){
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <velPID+0xd0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <velPID+0x28>
		i_vel = 0;
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <velPID+0xd4>)
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
		i_vel_clear_flag = 0;
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <velPID+0xd0>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
	}

	vel_center = (velR + velL) / 2.0f;
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <velPID+0xd8>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <velPID+0xdc>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002268:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800226c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <velPID+0xe0>)
 8002272:	edc3 7a00 	vstr	s15, [r3]
	//acceleration_imu = (float)xa / 16384.0f;
	//filter_vel_center = ComplementaryFilter(acceleration_imu, vel_center, 0.65f, last_vel_center);
	//last_vel_center = filter_vel_center;

	//def_vel = 500.0f - vel_center ;
	def_vel = target - vel_center ;
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <velPID+0xe0>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <velPID+0xe4>)
 8002286:	edc3 7a00 	vstr	s15, [r3]

	p_vel = kp_vel * def_vel;
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <velPID+0xe4>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ed97 7a05 	vldr	s14, [r7, #20]
 8002294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002298:	edc7 7a03 	vstr	s15, [r7, #12]
	i_vel += ki_vel * def_vel * DELTA_T;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <velPID+0xe4>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002318 <velPID+0xe8>
 80022ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <velPID+0xd4>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <velPID+0xd4>)
 80022be:	edc3 7a00 	vstr	s15, [r3]

	order_velR = p_vel + i_vel;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <velPID+0xd4>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <velPID+0xec>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
	order_velL = p_vel + i_vel;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <velPID+0xd4>)
 80022d8:	ed93 7a00 	vldr	s14, [r3]
 80022dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <velPID+0xf0>)
 80022e6:	edc3 7a00 	vstr	s15, [r3]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	4099999a 	.word	0x4099999a
 80022fc:	42480000 	.word	0x42480000
 8002300:	200004f0 	.word	0x200004f0
 8002304:	200000b4 	.word	0x200000b4
 8002308:	200004ec 	.word	0x200004ec
 800230c:	200004fc 	.word	0x200004fc
 8002310:	200000b8 	.word	0x200000b8
 8002314:	200000bc 	.word	0x200000bc
 8002318:	3a83126f 	.word	0x3a83126f
 800231c:	20000098 	.word	0x20000098
 8002320:	20000094 	.word	0x20000094

08002324 <ADval_get>:
//	}
//	LED(3);

}*/

void ADval_get(void) {
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <ADval_get+0x80>)
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <ADval_get+0x84>)
 800232e:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <ADval_get+0x80>)
 8002332:	885a      	ldrh	r2, [r3, #2]
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <ADval_get+0x88>)
 8002336:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <ADval_get+0x80>)
 800233a:	889a      	ldrh	r2, [r3, #4]
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <ADval_get+0x8c>)
 800233e:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <ADval_get+0x80>)
 8002342:	88da      	ldrh	r2, [r3, #6]
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <ADval_get+0x90>)
 8002346:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <ADval_get+0x80>)
 800234a:	891a      	ldrh	r2, [r3, #8]
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <ADval_get+0x94>)
 800234e:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <ADval_get+0x80>)
 8002352:	895a      	ldrh	r2, [r3, #10]
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <ADval_get+0x98>)
 8002356:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <ADval_get+0x80>)
 800235a:	899a      	ldrh	r2, [r3, #12]
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <ADval_get+0x9c>)
 800235e:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <ADval_get+0x80>)
 8002362:	89da      	ldrh	r2, [r3, #14]
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <ADval_get+0xa0>)
 8002366:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[8];
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <ADval_get+0x80>)
 800236a:	8a1a      	ldrh	r2, [r3, #16]
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <ADval_get+0xa4>)
 800236e:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[9];
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <ADval_get+0x80>)
 8002372:	8a5a      	ldrh	r2, [r3, #18]
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <ADval_get+0xa8>)
 8002376:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[10];
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <ADval_get+0x80>)
 800237a:	8a9a      	ldrh	r2, [r3, #20]
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <ADval_get+0xac>)
 800237e:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[11];
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <ADval_get+0x80>)
 8002382:	8ada      	ldrh	r2, [r3, #22]
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <ADval_get+0xb0>)
 8002386:	801a      	strh	r2, [r3, #0]
	line_sen12 = ADC1_Buff[12];
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <ADval_get+0x80>)
 800238a:	8b1a      	ldrh	r2, [r3, #24]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <ADval_get+0xb4>)
 800238e:	801a      	strh	r2, [r3, #0]
	line_sen13 = ADC1_Buff[13];
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <ADval_get+0x80>)
 8002392:	8b5a      	ldrh	r2, [r3, #26]
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <ADval_get+0xb8>)
 8002396:	801a      	strh	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000032c 	.word	0x2000032c
 80023a8:	2000c134 	.word	0x2000c134
 80023ac:	20000582 	.word	0x20000582
 80023b0:	20000578 	.word	0x20000578
 80023b4:	20000566 	.word	0x20000566
 80023b8:	20000512 	.word	0x20000512
 80023bc:	2000c130 	.word	0x2000c130
 80023c0:	2000057a 	.word	0x2000057a
 80023c4:	2000056c 	.word	0x2000056c
 80023c8:	20000584 	.word	0x20000584
 80023cc:	2000c136 	.word	0x2000c136
 80023d0:	20000580 	.word	0x20000580
 80023d4:	20000510 	.word	0x20000510
 80023d8:	2000c138 	.word	0x2000c138
 80023dc:	20000586 	.word	0x20000586

080023e0 <CrossCheck>:




void CrossCheck(uint16_t crossthreshold){
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]

	Crossval = line_senLL + line_senL + line_senR + line_senRR;
 80023ea:	4b27      	ldr	r3, [pc, #156]	; (8002488 <CrossCheck+0xa8>)
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <CrossCheck+0xac>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <CrossCheck+0xb0>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <CrossCheck+0xb4>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <CrossCheck+0xb8>)
 8002408:	801a      	strh	r2, [r3, #0]


	if(crossline_flag == 0 && line_senLL + line_senL + line_senR + line_senRR < crossthreshold ) {
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <CrossCheck+0xbc>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <CrossCheck+0x64>
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <CrossCheck+0xa8>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <CrossCheck+0xac>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	4413      	add	r3, r2
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <CrossCheck+0xb0>)
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <CrossCheck+0xb4>)
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	441a      	add	r2, r3
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	429a      	cmp	r2, r3
 800242e:	da09      	bge.n	8002444 <CrossCheck+0x64>
		crossline_flag = 1;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <CrossCheck+0xbc>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
		enc_cnt = 0;
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <CrossCheck+0xc0>)
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	f04f 0400 	mov.w	r4, #0
 8002440:	e9c2 3400 	strd	r3, r4, [r2]
	}

	if(crossline_flag == 1 && mileage((float)enc_cnt) >= 90){
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <CrossCheck+0xbc>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d118      	bne.n	800247e <CrossCheck+0x9e>
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <CrossCheck+0xc0>)
 800244e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	f7fe fbf9 	bl	8000c4c <__aeabi_l2f>
 800245a:	4603      	mov	r3, r0
 800245c:	ee00 3a10 	vmov	s0, r3
 8002460:	f000 f9d4 	bl	800280c <mileage>
 8002464:	eeb0 7a40 	vmov.f32	s14, s0
 8002468:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80024a4 <CrossCheck+0xc4>
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	da00      	bge.n	8002478 <CrossCheck+0x98>
		crossline_flag = 0;
	}
}
 8002476:	e002      	b.n	800247e <CrossCheck+0x9e>
		crossline_flag = 0;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <CrossCheck+0xbc>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	200000c2 	.word	0x200000c2
 800248c:	200000c4 	.word	0x200000c4
 8002490:	200000c6 	.word	0x200000c6
 8002494:	200000c8 	.word	0x200000c8
 8002498:	200000cc 	.word	0x200000cc
 800249c:	200000f8 	.word	0x200000f8
 80024a0:	20000520 	.word	0x20000520
 80024a4:	42b40000 	.word	0x42b40000

080024a8 <Maker_Check>:

void Maker_Check(void) {
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0


	if(line_sen12 >= 500 && line_sen13 >= 500){	//black
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <Maker_Check+0xc8>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024b4:	d308      	bcc.n	80024c8 <Maker_Check+0x20>
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <Maker_Check+0xcc>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024be:	d303      	bcc.n	80024c8 <Maker_Check+0x20>
		Sensor_st = 0;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <Maker_Check+0xd0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e01e      	b.n	8002506 <Maker_Check+0x5e>
	}
	else if(line_sen12 <= 500 && line_sen13 <= 500){	//white
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <Maker_Check+0xc8>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024d0:	d808      	bhi.n	80024e4 <Maker_Check+0x3c>
 80024d2:	4b28      	ldr	r3, [pc, #160]	; (8002574 <Maker_Check+0xcc>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024da:	d803      	bhi.n	80024e4 <Maker_Check+0x3c>
		Sensor_st = 3;
 80024dc:	4b26      	ldr	r3, [pc, #152]	; (8002578 <Maker_Check+0xd0>)
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e010      	b.n	8002506 <Maker_Check+0x5e>
	}
	else if(line_sen12 <= 500){	//left
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <Maker_Check+0xc8>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ec:	d803      	bhi.n	80024f6 <Maker_Check+0x4e>
			Sensor_st = 1;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <Maker_Check+0xd0>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e007      	b.n	8002506 <Maker_Check+0x5e>
		}

	else if(line_sen13 <= 500){	//right
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <Maker_Check+0xcc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024fe:	d802      	bhi.n	8002506 <Maker_Check+0x5e>
			Sensor_st = 2;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <Maker_Check+0xd0>)
 8002502:	2202      	movs	r2, #2
 8002504:	701a      	strb	r2, [r3, #0]
		}



	if(Sensor_st == 2){
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <Maker_Check+0xd0>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d103      	bne.n	8002516 <Maker_Check+0x6e>
		MR_cnt = 1;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <Maker_Check+0xd4>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e006      	b.n	8002524 <Maker_Check+0x7c>
	}
	else if(Sensor_st == 3){
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <Maker_Check+0xd0>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d102      	bne.n	8002524 <Maker_Check+0x7c>
		MR_cnt = 0;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <Maker_Check+0xd4>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
		enc_cnt = 0;
		maker_pattern = 2;
	}*/


	if(MR_cnt == 1 && crossline_flag == 1){
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <Maker_Check+0xd4>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <Maker_Check+0x94>
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <Maker_Check+0xd8>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d103      	bne.n	800253c <Maker_Check+0x94>
			//maker_pattern = 0;
			MR_cnt= 0;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <Maker_Check+0xd4>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
		maker_pattern = 0;

	}*/


}
 800253a:	e013      	b.n	8002564 <Maker_Check+0xbc>
	else if(MR_cnt == 1 && Sensor_st == 0 && crossline_flag == 0){
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <Maker_Check+0xd4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10f      	bne.n	8002564 <Maker_Check+0xbc>
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <Maker_Check+0xd0>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <Maker_Check+0xbc>
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <Maker_Check+0xd8>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <Maker_Check+0xbc>
		MR_cnt = 0;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <Maker_Check+0xd4>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
		GL_flag++;;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <Maker_Check+0xdc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <Maker_Check+0xdc>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	2000c138 	.word	0x2000c138
 8002574:	20000586 	.word	0x20000586
 8002578:	20000105 	.word	0x20000105
 800257c:	200000f9 	.word	0x200000f9
 8002580:	200000f8 	.word	0x200000f8
 8002584:	20000100 	.word	0x20000100

08002588 <ADval_sum>:
	}*/

	return ret;
}

void ADval_sum(void) {
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
	line_senLLL	= line_sen11 + line_sen10;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <ADval_sum+0x70>)
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <ADval_sum+0x74>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	4413      	add	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <ADval_sum+0x78>)
 800259a:	801a      	strh	r2, [r3, #0]
	line_senLL	= line_sen9 + line_sen8;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <ADval_sum+0x7c>)
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <ADval_sum+0x80>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <ADval_sum+0x84>)
 80025aa:	801a      	strh	r2, [r3, #0]
	line_senL	= line_sen7 + line_sen6;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <ADval_sum+0x88>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <ADval_sum+0x8c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <ADval_sum+0x90>)
 80025ba:	801a      	strh	r2, [r3, #0]
	line_senR	= line_sen5 + line_sen4;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <ADval_sum+0x94>)
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	4b17      	ldr	r3, [pc, #92]	; (8002620 <ADval_sum+0x98>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <ADval_sum+0x9c>)
 80025ca:	801a      	strh	r2, [r3, #0]
	line_senRR	= line_sen3 + line_sen2;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <ADval_sum+0xa0>)
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <ADval_sum+0xa4>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <ADval_sum+0xa8>)
 80025da:	801a      	strh	r2, [r3, #0]
	line_senRRR	= line_sen1 + line_sen0;
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <ADval_sum+0xac>)
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <ADval_sum+0xb0>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <ADval_sum+0xb4>)
 80025ea:	801a      	strh	r2, [r3, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000c136 	.word	0x2000c136
 80025fc:	20000584 	.word	0x20000584
 8002600:	200000c0 	.word	0x200000c0
 8002604:	20000510 	.word	0x20000510
 8002608:	20000580 	.word	0x20000580
 800260c:	200000c2 	.word	0x200000c2
 8002610:	2000056c 	.word	0x2000056c
 8002614:	2000057a 	.word	0x2000057a
 8002618:	200000c4 	.word	0x200000c4
 800261c:	2000c130 	.word	0x2000c130
 8002620:	20000512 	.word	0x20000512
 8002624:	200000c6 	.word	0x200000c6
 8002628:	20000566 	.word	0x20000566
 800262c:	20000578 	.word	0x20000578
 8002630:	200000c8 	.word	0x200000c8
 8002634:	20000582 	.word	0x20000582
 8002638:	2000c134 	.word	0x2000c134
 800263c:	200000ca 	.word	0x200000ca

08002640 <getEncoder>:



void getEncoder(void) {
 8002640:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0

	int16_t enc_tim1_ms;
	int16_t enc_tim8_ms;

	enc_tim1_ms = TIM1 -> CNT;
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <getEncoder+0x190>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	80fb      	strh	r3, [r7, #6]
	enc_tim8_ms = TIM8 -> CNT;
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <getEncoder+0x194>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	80bb      	strh	r3, [r7, #4]

	TIM1 -> CNT = 0;
 8002654:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <getEncoder+0x190>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 800265a:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <getEncoder+0x194>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total -= enc_tim1_ms;
 8002660:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <getEncoder+0x198>)
 8002662:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002666:	f9b7 b006 	ldrsh.w	fp, [r7, #6]
 800266a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	ebb3 030b 	subs.w	r3, r3, fp
 8002676:	eb64 040c 	sbc.w	r4, r4, ip
 800267a:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <getEncoder+0x198>)
 800267c:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 8002680:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002684:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002688:	4b54      	ldr	r3, [pc, #336]	; (80027dc <getEncoder+0x19c>)
 800268a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800268e:	eb1b 0301 	adds.w	r3, fp, r1
 8002692:	eb4c 0402 	adc.w	r4, ip, r2
 8002696:	4a51      	ldr	r2, [pc, #324]	; (80027dc <getEncoder+0x19c>)
 8002698:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 800269c:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <getEncoder+0x198>)
 800269e:	e9d3 1200 	ldrd	r1, r2, [r3]
 80026a2:	4b4e      	ldr	r3, [pc, #312]	; (80027dc <getEncoder+0x19c>)
 80026a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026a8:	eb13 0b01 	adds.w	fp, r3, r1
 80026ac:	eb44 0c02 	adc.w	ip, r4, r2
 80026b0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80026b4:	4611      	mov	r1, r2
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	eb1b 0301 	adds.w	r3, fp, r1
 80026be:	eb4c 0402 	adc.w	r4, ip, r2
 80026c2:	1064      	asrs	r4, r4, #1
 80026c4:	ea4f 0333 	mov.w	r3, r3, rrx
 80026c8:	4a45      	ldr	r2, [pc, #276]	; (80027e0 <getEncoder+0x1a0>)
 80026ca:	e9c2 3400 	strd	r3, r4, [r2]

	enc_cnt += ((-enc_tim1_ms + enc_tim8_ms) / 2.0f);
 80026ce:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <getEncoder+0x1a4>)
 80026d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026d4:	4618      	mov	r0, r3
 80026d6:	4621      	mov	r1, r4
 80026d8:	f7fe fab8 	bl	8000c4c <__aeabi_l2f>
 80026dc:	ee06 0a10 	vmov	s12, r0
 80026e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80026e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fa:	ee76 7a27 	vadd.f32	s15, s12, s15
 80026fe:	ee17 0a90 	vmov	r0, s15
 8002702:	f7fe faf9 	bl	8000cf8 <__aeabi_f2lz>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	4a36      	ldr	r2, [pc, #216]	; (80027e4 <getEncoder+0x1a4>)
 800270c:	e9c2 3400 	strd	r3, r4, [r2]
	enc_cnt2 += ((-enc_tim1_ms + enc_tim8_ms) / 2.0f);
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <getEncoder+0x1a8>)
 8002712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002716:	4618      	mov	r0, r3
 8002718:	4621      	mov	r1, r4
 800271a:	f7fe fa97 	bl	8000c4c <__aeabi_l2f>
 800271e:	ee06 0a10 	vmov	s12, r0
 8002722:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002734:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002740:	ee17 0a90 	vmov	r0, s15
 8002744:	f7fe fad8 	bl	8000cf8 <__aeabi_f2lz>
 8002748:	4603      	mov	r3, r0
 800274a:	460c      	mov	r4, r1
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <getEncoder+0x1a8>)
 800274e:	e9c2 3400 	strd	r3, r4, [r2]

	enc_tim1_cnt_10ms += enc_tim1_ms;
 8002752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <getEncoder+0x1ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <getEncoder+0x1ac>)
 800275e:	6013      	str	r3, [r2, #0]
	enc_tim8_cnt_10ms += enc_tim8_ms;
 8002760:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <getEncoder+0x1b0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4413      	add	r3, r2
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <getEncoder+0x1b0>)
 800276c:	6013      	str	r3, [r2, #0]

	velR = -(float)enc_tim1_ms * ENC_PULSE_MM * 1000.0f;
 800276e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	eef1 7a67 	vneg.f32	s15, s15
 800277e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80027f4 <getEncoder+0x1b4>
 8002782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002786:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80027f8 <getEncoder+0x1b8>
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <getEncoder+0x1bc>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
	velL = (float)enc_tim8_ms * ENC_PULSE_MM * 1000.0f;
 8002794:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027f4 <getEncoder+0x1b4>
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80027f8 <getEncoder+0x1b8>
 80027ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <getEncoder+0x1c0>)
 80027b2:	edc3 7a00 	vstr	s15, [r3]
	monR = velR;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <getEncoder+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <getEncoder+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]
	monL = velL;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <getEncoder+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <getEncoder+0x1c8>)
 80027c4:	6013      	str	r3, [r2, #0]

}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40010400 	.word	0x40010400
 80027d8:	200000d0 	.word	0x200000d0
 80027dc:	200000d8 	.word	0x200000d8
 80027e0:	200000e0 	.word	0x200000e0
 80027e4:	20000520 	.word	0x20000520
 80027e8:	20000528 	.word	0x20000528
 80027ec:	2000c140 	.word	0x2000c140
 80027f0:	2000057c 	.word	0x2000057c
 80027f4:	3c4abcc7 	.word	0x3c4abcc7
 80027f8:	447a0000 	.word	0x447a0000
 80027fc:	200004ec 	.word	0x200004ec
 8002800:	200004fc 	.word	0x200004fc
 8002804:	20000508 	.word	0x20000508
 8002808:	200004e8 	.word	0x200004e8

0800280c <mileage>:

float mileage(float mm) {
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	ed87 0a01 	vstr	s0, [r7, #4]
	return mm * ENC_PULSE_MM;
 8002816:	edd7 7a01 	vldr	s15, [r7, #4]
 800281a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002830 <mileage+0x24>
 800281e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002822:	eeb0 0a67 	vmov.f32	s0, s15
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	3c4abcc7 	.word	0x3c4abcc7

08002834 <setup>:
#include "sensor.h"
//#include "sensor.c"

uint32_t log_check_adress;

void setup(void){
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	//led_pattern(setup_mode);

	switch(setup_mode) {
 800283a:	4bb4      	ldr	r3, [pc, #720]	; (8002b0c <setup+0x2d8>)
 800283c:	f993 3000 	ldrsb.w	r3, [r3]
 8002840:	2b07      	cmp	r3, #7
 8002842:	f200 84b9 	bhi.w	80031b8 <setup+0x984>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <setup+0x18>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002c93 	.word	0x08002c93
 8002854:	08002cfb 	.word	0x08002cfb
 8002858:	08002dad 	.word	0x08002dad
 800285c:	08002ef1 	.word	0x08002ef1
 8002860:	08002fa3 	.word	0x08002fa3
 8002864:	08003055 	.word	0x08003055
 8002868:	08003107 	.word	0x08003107
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 800286c:	4ba8      	ldr	r3, [pc, #672]	; (8002b10 <setup+0x2dc>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <setup+0x4c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1049); //MAX4199
 8002874:	4ba7      	ldr	r3, [pc, #668]	; (8002b14 <setup+0x2e0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f240 4219 	movw	r2, #1049	; 0x419
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
 800287e:	e003      	b.n	8002888 <setup+0x54>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002880:	4ba4      	ldr	r3, [pc, #656]	; (8002b14 <setup+0x2e0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8002888:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <setup+0x2e4>)
 800288a:	f993 3000 	ldrsb.w	r3, [r3]
 800288e:	2b0e      	cmp	r3, #14
 8002890:	f200 81fd 	bhi.w	8002c8e <setup+0x45a>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <setup+0x68>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028d9 	.word	0x080028d9
 80028a0:	08002903 	.word	0x08002903
 80028a4:	0800292d 	.word	0x0800292d
 80028a8:	08002957 	.word	0x08002957
 80028ac:	08002981 	.word	0x08002981
 80028b0:	080029ab 	.word	0x080029ab
 80028b4:	080029d5 	.word	0x080029d5
 80028b8:	080029ff 	.word	0x080029ff
 80028bc:	08002a2d 	.word	0x08002a2d
 80028c0:	08002a5b 	.word	0x08002a5b
 80028c4:	08002a89 	.word	0x08002a89
 80028c8:	08002acb 	.word	0x08002acb
 80028cc:	08002bc9 	.word	0x08002bc9
 80028d0:	08002c13 	.word	0x08002c13
 80028d4:	08002c57 	.word	0x08002c57
			case 0:
				lcd_locate(0,0);
 80028d8:	2100      	movs	r1, #0
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe fc47 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 80028e0:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <setup+0x2e8>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	488e      	ldr	r0, [pc, #568]	; (8002b20 <setup+0x2ec>)
 80028e8:	f7fe fc6b 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 80028ec:	2101      	movs	r1, #1
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fc3d 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 80028f4:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <setup+0x2f0>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	488b      	ldr	r0, [pc, #556]	; (8002b28 <setup+0x2f4>)
 80028fc:	f7fe fc61 	bl	80011c2 <lcd_printf>
				break;
 8002900:	e1c6      	b.n	8002c90 <setup+0x45c>
			case 1:
				lcd_locate(0,0);
 8002902:	2100      	movs	r1, #0
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe fc32 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 800290a:	4b88      	ldr	r3, [pc, #544]	; (8002b2c <setup+0x2f8>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4887      	ldr	r0, [pc, #540]	; (8002b30 <setup+0x2fc>)
 8002912:	f7fe fc56 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002916:	2101      	movs	r1, #1
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe fc28 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 800291e:	4b85      	ldr	r3, [pc, #532]	; (8002b34 <setup+0x300>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4884      	ldr	r0, [pc, #528]	; (8002b38 <setup+0x304>)
 8002926:	f7fe fc4c 	bl	80011c2 <lcd_printf>
				break;
 800292a:	e1b1      	b.n	8002c90 <setup+0x45c>
			case 2:
				lcd_locate(0,0);
 800292c:	2100      	movs	r1, #0
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe fc1d 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 8002934:	4b81      	ldr	r3, [pc, #516]	; (8002b3c <setup+0x308>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	4881      	ldr	r0, [pc, #516]	; (8002b40 <setup+0x30c>)
 800293c:	f7fe fc41 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002940:	2101      	movs	r1, #1
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fc13 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 8002948:	4b7e      	ldr	r3, [pc, #504]	; (8002b44 <setup+0x310>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	487e      	ldr	r0, [pc, #504]	; (8002b48 <setup+0x314>)
 8002950:	f7fe fc37 	bl	80011c2 <lcd_printf>
				break;
 8002954:	e19c      	b.n	8002c90 <setup+0x45c>
			case 3:
				lcd_locate(0,0);
 8002956:	2100      	movs	r1, #0
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe fc08 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 800295e:	4b7b      	ldr	r3, [pc, #492]	; (8002b4c <setup+0x318>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	487a      	ldr	r0, [pc, #488]	; (8002b50 <setup+0x31c>)
 8002966:	f7fe fc2c 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 800296a:	2101      	movs	r1, #1
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe fbfe 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 8002972:	4b78      	ldr	r3, [pc, #480]	; (8002b54 <setup+0x320>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4877      	ldr	r0, [pc, #476]	; (8002b58 <setup+0x324>)
 800297a:	f7fe fc22 	bl	80011c2 <lcd_printf>
				break;
 800297e:	e187      	b.n	8002c90 <setup+0x45c>
			case 4:
				lcd_locate(0,0);
 8002980:	2100      	movs	r1, #0
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe fbf3 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 8002988:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <setup+0x328>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	4874      	ldr	r0, [pc, #464]	; (8002b60 <setup+0x32c>)
 8002990:	f7fe fc17 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002994:	2101      	movs	r1, #1
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe fbe9 	bl	800116e <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 800299c:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <setup+0x330>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4871      	ldr	r0, [pc, #452]	; (8002b68 <setup+0x334>)
 80029a4:	f7fe fc0d 	bl	80011c2 <lcd_printf>
				break;
 80029a8:	e172      	b.n	8002c90 <setup+0x45c>
			case 5:
				lcd_locate(0,0);
 80029aa:	2100      	movs	r1, #0
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe fbde 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 80029b2:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <setup+0x338>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	486d      	ldr	r0, [pc, #436]	; (8002b70 <setup+0x33c>)
 80029ba:	f7fe fc02 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 80029be:	2101      	movs	r1, #1
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fbd4 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 80029c6:	4b6b      	ldr	r3, [pc, #428]	; (8002b74 <setup+0x340>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	486a      	ldr	r0, [pc, #424]	; (8002b78 <setup+0x344>)
 80029ce:	f7fe fbf8 	bl	80011c2 <lcd_printf>
				break;
 80029d2:	e15d      	b.n	8002c90 <setup+0x45c>
			case 6:
				lcd_locate(0,0);
 80029d4:	2100      	movs	r1, #0
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fe fbc9 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD10",line_sen12);
 80029dc:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <setup+0x348>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	4863      	ldr	r0, [pc, #396]	; (8002b70 <setup+0x33c>)
 80029e4:	f7fe fbed 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 80029e8:	2101      	movs	r1, #1
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe fbbf 	bl	800116e <lcd_locate>
				lcd_printf("%4dAD11",line_sen13);
 80029f0:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <setup+0x34c>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	4860      	ldr	r0, [pc, #384]	; (8002b78 <setup+0x344>)
 80029f8:	f7fe fbe3 	bl	80011c2 <lcd_printf>
				break;
 80029fc:	e148      	b.n	8002c90 <setup+0x45c>
			case 7:
				lcd_locate(0,0);
 80029fe:	2100      	movs	r1, #0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe fbb4 	bl	800116e <lcd_locate>
				lcd_printf("XG%6x",xg);
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <setup+0x350>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	485e      	ldr	r0, [pc, #376]	; (8002b88 <setup+0x354>)
 8002a10:	f7fe fbd7 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a14:	2101      	movs	r1, #1
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fba9 	bl	800116e <lcd_locate>
				lcd_printf("YG%6x",yg);
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <setup+0x358>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	485a      	ldr	r0, [pc, #360]	; (8002b90 <setup+0x35c>)
 8002a26:	f7fe fbcc 	bl	80011c2 <lcd_printf>
				break;
 8002a2a:	e131      	b.n	8002c90 <setup+0x45c>
			case 8:
				lcd_locate(0,0);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fb9d 	bl	800116e <lcd_locate>
				lcd_printf("ZG%6x",zg);
 8002a34:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <setup+0x360>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4856      	ldr	r0, [pc, #344]	; (8002b98 <setup+0x364>)
 8002a3e:	f7fe fbc0 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a42:	2101      	movs	r1, #1
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fb92 	bl	800116e <lcd_locate>
				lcd_printf("XA%6x",xa);
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <setup+0x368>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	4853      	ldr	r0, [pc, #332]	; (8002ba0 <setup+0x36c>)
 8002a54:	f7fe fbb5 	bl	80011c2 <lcd_printf>
				break;
 8002a58:	e11a      	b.n	8002c90 <setup+0x45c>
			case 9:
				lcd_locate(0,0);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fb86 	bl	800116e <lcd_locate>
				lcd_printf("YA%6x",ya);
 8002a62:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <setup+0x370>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	484f      	ldr	r0, [pc, #316]	; (8002ba8 <setup+0x374>)
 8002a6c:	f7fe fba9 	bl	80011c2 <lcd_printf>
				lcd_locate(0,1);
 8002a70:	2101      	movs	r1, #1
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe fb7b 	bl	800116e <lcd_locate>
				lcd_printf("ZA%6x",za);
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <setup+0x378>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	484b      	ldr	r0, [pc, #300]	; (8002bb0 <setup+0x37c>)
 8002a82:	f7fe fb9e 	bl	80011c2 <lcd_printf>
				break;
 8002a86:	e103      	b.n	8002c90 <setup+0x45c>
			case 10:
				lcd_locate(0,0);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe fb6f 	bl	800116e <lcd_locate>
				lcd_print("Encoder1");
 8002a90:	4848      	ldr	r0, [pc, #288]	; (8002bb4 <setup+0x380>)
 8002a92:	f7fe fb81 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fe fb68 	bl	800116e <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim1_total));
 8002a9e:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <setup+0x384>)
 8002aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f7fe f8d0 	bl	8000c4c <__aeabi_l2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	ee00 3a10 	vmov	s0, r3
 8002ab2:	f7ff feab 	bl	800280c <mileage>
 8002ab6:	eef0 7a40 	vmov.f32	s15, s0
 8002aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002abe:	ee17 1a90 	vmov	r1, s15
 8002ac2:	483e      	ldr	r0, [pc, #248]	; (8002bbc <setup+0x388>)
 8002ac4:	f7fe fb7d 	bl	80011c2 <lcd_printf>
				break;
 8002ac8:	e0e2      	b.n	8002c90 <setup+0x45c>
			case 11:
				lcd_locate(0,0);
 8002aca:	2100      	movs	r1, #0
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe fb4e 	bl	800116e <lcd_locate>
				lcd_print("Encoder2");
 8002ad2:	483b      	ldr	r0, [pc, #236]	; (8002bc0 <setup+0x38c>)
 8002ad4:	f7fe fb60 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fb47 	bl	800116e <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim8_total));
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <setup+0x390>)
 8002ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4621      	mov	r1, r4
 8002aea:	f7fe f8af 	bl	8000c4c <__aeabi_l2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	ee00 3a10 	vmov	s0, r3
 8002af4:	f7ff fe8a 	bl	800280c <mileage>
 8002af8:	eef0 7a40 	vmov.f32	s15, s0
 8002afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b00:	ee17 1a90 	vmov	r1, s15
 8002b04:	482d      	ldr	r0, [pc, #180]	; (8002bbc <setup+0x388>)
 8002b06:	f7fe fb5c 	bl	80011c2 <lcd_printf>
				break;
 8002b0a:	e0c1      	b.n	8002c90 <setup+0x45c>
 8002b0c:	20000106 	.word	0x20000106
 8002b10:	2000010a 	.word	0x2000010a
 8002b14:	20000428 	.word	0x20000428
 8002b18:	20000108 	.word	0x20000108
 8002b1c:	2000c134 	.word	0x2000c134
 8002b20:	080087ec 	.word	0x080087ec
 8002b24:	20000582 	.word	0x20000582
 8002b28:	080087f4 	.word	0x080087f4
 8002b2c:	20000578 	.word	0x20000578
 8002b30:	080087fc 	.word	0x080087fc
 8002b34:	20000566 	.word	0x20000566
 8002b38:	08008804 	.word	0x08008804
 8002b3c:	20000512 	.word	0x20000512
 8002b40:	0800880c 	.word	0x0800880c
 8002b44:	2000c130 	.word	0x2000c130
 8002b48:	08008814 	.word	0x08008814
 8002b4c:	2000057a 	.word	0x2000057a
 8002b50:	0800881c 	.word	0x0800881c
 8002b54:	2000056c 	.word	0x2000056c
 8002b58:	08008824 	.word	0x08008824
 8002b5c:	20000580 	.word	0x20000580
 8002b60:	0800882c 	.word	0x0800882c
 8002b64:	20000510 	.word	0x20000510
 8002b68:	08008834 	.word	0x08008834
 8002b6c:	20000584 	.word	0x20000584
 8002b70:	0800883c 	.word	0x0800883c
 8002b74:	2000c136 	.word	0x2000c136
 8002b78:	08008844 	.word	0x08008844
 8002b7c:	2000c138 	.word	0x2000c138
 8002b80:	20000586 	.word	0x20000586
 8002b84:	20000120 	.word	0x20000120
 8002b88:	0800884c 	.word	0x0800884c
 8002b8c:	2000011e 	.word	0x2000011e
 8002b90:	08008854 	.word	0x08008854
 8002b94:	20000118 	.word	0x20000118
 8002b98:	0800885c 	.word	0x0800885c
 8002b9c:	2000011c 	.word	0x2000011c
 8002ba0:	08008864 	.word	0x08008864
 8002ba4:	20000122 	.word	0x20000122
 8002ba8:	0800886c 	.word	0x0800886c
 8002bac:	2000011a 	.word	0x2000011a
 8002bb0:	08008874 	.word	0x08008874
 8002bb4:	0800887c 	.word	0x0800887c
 8002bb8:	200000d0 	.word	0x200000d0
 8002bbc:	08008888 	.word	0x08008888
 8002bc0:	0800888c 	.word	0x0800888c
 8002bc4:	200000d8 	.word	0x200000d8
			case 12:
				lcd_locate(0,0);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fe facf 	bl	800116e <lcd_locate>
				lcd_print("Voltage_");
 8002bd0:	48a3      	ldr	r0, [pc, #652]	; (8002e60 <setup+0x62c>)
 8002bd2:	f7fe fae1 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe fac8 	bl	800116e <lcd_locate>
				volt_reg = INA260_read(0x02);
 8002bde:	2002      	movs	r0, #2
 8002be0:	f7fe fb10 	bl	8001204 <INA260_read>
 8002be4:	4603      	mov	r3, r0
 8002be6:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002e64 <setup+0x630>
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfa:	ee17 0a90 	vmov	r0, s15
 8002bfe:	f7fd fc9b 	bl	8000538 <__aeabi_f2d>
 8002c02:	4603      	mov	r3, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	461a      	mov	r2, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	4897      	ldr	r0, [pc, #604]	; (8002e68 <setup+0x634>)
 8002c0c:	f7fe fad9 	bl	80011c2 <lcd_printf>
				break;
 8002c10:	e03e      	b.n	8002c90 <setup+0x45c>
			case 13:
				lcd_locate(0,0);
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe faaa 	bl	800116e <lcd_locate>
				lcd_print("error_th");
 8002c1a:	4894      	ldr	r0, [pc, #592]	; (8002e6c <setup+0x638>)
 8002c1c:	f7fe fabc 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002c20:	2101      	movs	r1, #1
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fe faa3 	bl	800116e <lcd_locate>
				lcd_printf("%8d",line_senLLL + line_senLL + line_senL + line_senR + line_senRR + line_senRRR);
 8002c28:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <setup+0x63c>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <setup+0x640>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <setup+0x644>)
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <setup+0x648>)
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a8f      	ldr	r2, [pc, #572]	; (8002e80 <setup+0x64c>)
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	4a8f      	ldr	r2, [pc, #572]	; (8002e84 <setup+0x650>)
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	488e      	ldr	r0, [pc, #568]	; (8002e88 <setup+0x654>)
 8002c50:	f7fe fab7 	bl	80011c2 <lcd_printf>
				break;
 8002c54:	e01c      	b.n	8002c90 <setup+0x45c>
			case 14:
				lcd_locate(0,0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fa88 	bl	800116e <lcd_locate>
				lcd_print("cross_th");
 8002c5e:	488b      	ldr	r0, [pc, #556]	; (8002e8c <setup+0x658>)
 8002c60:	f7fe fa9a 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8002c64:	2101      	movs	r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fa81 	bl	800116e <lcd_locate>
				lcd_printf("%8d", line_senLL + line_senL + line_senR + line_senRR);
 8002c6c:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <setup+0x640>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <setup+0x644>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a80      	ldr	r2, [pc, #512]	; (8002e7c <setup+0x648>)
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4a80      	ldr	r2, [pc, #512]	; (8002e80 <setup+0x64c>)
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4880      	ldr	r0, [pc, #512]	; (8002e88 <setup+0x654>)
 8002c88:	f7fe fa9b 	bl	80011c2 <lcd_printf>
				break;
 8002c8c:	e000      	b.n	8002c90 <setup+0x45c>
			default:
				break;
 8002c8e:	bf00      	nop
			}

			break;
 8002c90:	e2d1      	b.n	8003236 <setup+0xa02>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
			}
			break;*/
		case 1://case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <setup+0x65c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 8002c9c:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <setup+0x65c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <setup+0x65c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 8002cb0:	4b77      	ldr	r3, [pc, #476]	; (8002e90 <setup+0x65c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fa56 	bl	800116e <lcd_locate>
			lcd_print("test_MD_");
 8002cc2:	4874      	ldr	r0, [pc, #464]	; (8002e94 <setup+0x660>)
 8002cc4:	f7fe fa68 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002cc8:	2101      	movs	r1, #1
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fe fa4f 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH_");
 8002cd0:	4871      	ldr	r0, [pc, #452]	; (8002e98 <setup+0x664>)
 8002cd2:	f7fe fa61 	bl	8001198 <lcd_print>

			if( sw_center_state == 1 ) {
 8002cd6:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <setup+0x668>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <setup+0x4ba>
				Motorset(400, 400, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ce4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ce8:	f7ff f974 	bl	8001fd4 <Motorset>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
				*/
			}
			break;
 8002cec:	e2a3      	b.n	8003236 <setup+0xa02>
				Motorset(0, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7ff f96e 	bl	8001fd4 <Motorset>
			break;
 8002cf8:	e29d      	b.n	8003236 <setup+0xa02>
			lcd_print("_case-4_");
			lcd_locate(0,1);
			lcd_print("________");
			break;*/
		case 2://case 5:
			lcd_locate(0,0);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fe fa36 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8002d02:	4867      	ldr	r0, [pc, #412]	; (8002ea0 <setup+0x66c>)
 8002d04:	f7fe fa48 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fa2f 	bl	800116e <lcd_locate>
			lcd_print("START 15 ");
 8002d10:	4864      	ldr	r0, [pc, #400]	; (8002ea4 <setup+0x670>)
 8002d12:	f7fe fa41 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <setup+0x668>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	f040 824e 	bne.w	80031bc <setup+0x988>
				HAL_Delay(1000);
 8002d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d24:	f001 f84a 	bl	8003dbc <HAL_Delay>
				order_posR = 0.0f;
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <setup+0x674>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
				order_posL = 0.0f;
 8002d30:	4b5e      	ldr	r3, [pc, #376]	; (8002eac <setup+0x678>)
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
				order_velR = 0.0f;
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <setup+0x67c>)
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
				order_velL = 0.0f;
 8002d40:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <setup+0x680>)
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002d48:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <setup+0x684>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <setup+0x688>)
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	f04f 0400 	mov.w	r4, #0
 8002d58:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <setup+0x668>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 8002d62:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <setup+0x68c>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002d68:	f7fe f9f1 	bl	800114e <lcd_clear>
				HAL_Delay(1000);
 8002d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d70:	f001 f824 	bl	8003dbc <HAL_Delay>
				main_pattern = 8;
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <setup+0x690>)
 8002d76:	2208      	movs	r2, #8
 8002d78:	701a      	strb	r2, [r3, #0]
				MR_flag = 0;
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <setup+0x694>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
				MR_flag = 0;
 8002d80:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <setup+0x694>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
				crossline_flag_L = 0;
 8002d86:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <setup+0x698>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
				crossline_flag_M = 0;
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <setup+0x69c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
				i_vel_clear_flag = 1;
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <setup+0x6a0>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
				i_pos_clear_flag = 1;
 8002d98:	4b4f      	ldr	r3, [pc, #316]	; (8002ed8 <setup+0x6a4>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
				crossline_flag = 0 ;
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <setup+0x6a8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
				target_vel = 1500.0f;
 8002da4:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <setup+0x6ac>)
 8002da6:	4a4f      	ldr	r2, [pc, #316]	; (8002ee4 <setup+0x6b0>)
 8002da8:	601a      	str	r2, [r3, #0]

			}
			break;
 8002daa:	e207      	b.n	80031bc <setup+0x988>
		case 3://case 6:
			lcd_locate(0,0);
 8002dac:	2100      	movs	r1, #0
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fe f9dd 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8002db4:	483a      	ldr	r0, [pc, #232]	; (8002ea0 <setup+0x66c>)
 8002db6:	f7fe f9ef 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe f9d6 	bl	800116e <lcd_locate>
			lcd_print("START 17 ");
 8002dc2:	4849      	ldr	r0, [pc, #292]	; (8002ee8 <setup+0x6b4>)
 8002dc4:	f7fe f9e8 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <setup+0x668>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	f040 8229 	bne.w	8003224 <setup+0x9f0>
				HAL_Delay(1000);
 8002dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd6:	f000 fff1 	bl	8003dbc <HAL_Delay>
				order_posR = 0.0f;
 8002dda:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <setup+0x674>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
				order_posL = 0.0f;
 8002de2:	4b32      	ldr	r3, [pc, #200]	; (8002eac <setup+0x678>)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
				order_velR = 0.0f;
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <setup+0x67c>)
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
				order_velL = 0.0f;
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <setup+0x680>)
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <setup+0x684>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002e00:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <setup+0x688>)
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <setup+0x668>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <setup+0x68c>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002e1a:	f7fe f998 	bl	800114e <lcd_clear>
				HAL_Delay(1000);
 8002e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e22:	f000 ffcb 	bl	8003dbc <HAL_Delay>
				main_pattern = 8;
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <setup+0x690>)
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
				MR_flag = 0;
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <setup+0x694>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
				MR_flag = 0;
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <setup+0x694>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
				crossline_flag_L = 0;
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <setup+0x698>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
				crossline_flag_M = 0;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <setup+0x69c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
				crossline_flag = 0;
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <setup+0x6a8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
				i_vel_clear_flag = 1;
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <setup+0x6a0>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
				i_pos_clear_flag = 1;
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <setup+0x6a4>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
				target_vel = 1700.0f;
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <setup+0x6ac>)
 8002e58:	4a24      	ldr	r2, [pc, #144]	; (8002eec <setup+0x6b8>)
 8002e5a:	601a      	str	r2, [r3, #0]

					}
			break;
 8002e5c:	e1e2      	b.n	8003224 <setup+0x9f0>
 8002e5e:	bf00      	nop
 8002e60:	08008898 	.word	0x08008898
 8002e64:	3aa3d70a 	.word	0x3aa3d70a
 8002e68:	080088a4 	.word	0x080088a4
 8002e6c:	080088b0 	.word	0x080088b0
 8002e70:	200000c0 	.word	0x200000c0
 8002e74:	200000c2 	.word	0x200000c2
 8002e78:	200000c4 	.word	0x200000c4
 8002e7c:	200000c6 	.word	0x200000c6
 8002e80:	200000c8 	.word	0x200000c8
 8002e84:	200000ca 	.word	0x200000ca
 8002e88:	08008888 	.word	0x08008888
 8002e8c:	080088bc 	.word	0x080088bc
 8002e90:	2000020c 	.word	0x2000020c
 8002e94:	080088c8 	.word	0x080088c8
 8002e98:	080088d4 	.word	0x080088d4
 8002e9c:	2000010a 	.word	0x2000010a
 8002ea0:	080088e0 	.word	0x080088e0
 8002ea4:	080088e8 	.word	0x080088e8
 8002ea8:	2000008c 	.word	0x2000008c
 8002eac:	20000090 	.word	0x20000090
 8002eb0:	20000098 	.word	0x20000098
 8002eb4:	20000094 	.word	0x20000094
 8002eb8:	200000e8 	.word	0x200000e8
 8002ebc:	20000520 	.word	0x20000520
 8002ec0:	20000104 	.word	0x20000104
 8002ec4:	200000ec 	.word	0x200000ec
 8002ec8:	200000fc 	.word	0x200000fc
 8002ecc:	200000f0 	.word	0x200000f0
 8002ed0:	200000f4 	.word	0x200000f4
 8002ed4:	200004f0 	.word	0x200004f0
 8002ed8:	200004f4 	.word	0x200004f4
 8002edc:	200000f8 	.word	0x200000f8
 8002ee0:	20000500 	.word	0x20000500
 8002ee4:	44bb8000 	.word	0x44bb8000
 8002ee8:	080088f4 	.word	0x080088f4
 8002eec:	44d48000 	.word	0x44d48000
		case 4://case 7:
			lcd_locate(0,0);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe f93b 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8002ef8:	48b1      	ldr	r0, [pc, #708]	; (80031c0 <setup+0x98c>)
 8002efa:	f7fe f94d 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002efe:	2101      	movs	r1, #1
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe f934 	bl	800116e <lcd_locate>
			lcd_print("START 18 ");
 8002f06:	48af      	ldr	r0, [pc, #700]	; (80031c4 <setup+0x990>)
 8002f08:	f7fe f946 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8002f0c:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <setup+0x994>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 8189 	bne.w	8003228 <setup+0x9f4>
				HAL_Delay(1000);
 8002f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f1a:	f000 ff4f 	bl	8003dbc <HAL_Delay>
				order_posR = 0.0f;
 8002f1e:	4bab      	ldr	r3, [pc, #684]	; (80031cc <setup+0x998>)
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
				order_posL = 0.0f;
 8002f26:	4baa      	ldr	r3, [pc, #680]	; (80031d0 <setup+0x99c>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
				order_velR = 0.0f;
 8002f2e:	4ba9      	ldr	r3, [pc, #676]	; (80031d4 <setup+0x9a0>)
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
				order_velL = 0.0f;
 8002f36:	4ba8      	ldr	r3, [pc, #672]	; (80031d8 <setup+0x9a4>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002f3e:	4ba7      	ldr	r3, [pc, #668]	; (80031dc <setup+0x9a8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002f44:	4aa6      	ldr	r2, [pc, #664]	; (80031e0 <setup+0x9ac>)
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	f04f 0400 	mov.w	r4, #0
 8002f4e:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8002f52:	4b9d      	ldr	r3, [pc, #628]	; (80031c8 <setup+0x994>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 8002f58:	4ba2      	ldr	r3, [pc, #648]	; (80031e4 <setup+0x9b0>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002f5e:	f7fe f8f6 	bl	800114e <lcd_clear>
				HAL_Delay(1000);
 8002f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f66:	f000 ff29 	bl	8003dbc <HAL_Delay>
				main_pattern = 8;
 8002f6a:	4b9f      	ldr	r3, [pc, #636]	; (80031e8 <setup+0x9b4>)
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	701a      	strb	r2, [r3, #0]
				MR_flag = 0;
 8002f70:	4b9e      	ldr	r3, [pc, #632]	; (80031ec <setup+0x9b8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
				MR_flag = 0;
 8002f76:	4b9d      	ldr	r3, [pc, #628]	; (80031ec <setup+0x9b8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
				crossline_flag_L = 0;
 8002f7c:	4b9c      	ldr	r3, [pc, #624]	; (80031f0 <setup+0x9bc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
				crossline_flag_M = 0;
 8002f82:	4b9c      	ldr	r3, [pc, #624]	; (80031f4 <setup+0x9c0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
				crossline_flag = 0;
 8002f88:	4b9b      	ldr	r3, [pc, #620]	; (80031f8 <setup+0x9c4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
				i_vel_clear_flag = 1;
 8002f8e:	4b9b      	ldr	r3, [pc, #620]	; (80031fc <setup+0x9c8>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
				i_pos_clear_flag = 1;
 8002f94:	4b9a      	ldr	r3, [pc, #616]	; (8003200 <setup+0x9cc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
				target_vel = 1800.0f;
 8002f9a:	4b9a      	ldr	r3, [pc, #616]	; (8003204 <setup+0x9d0>)
 8002f9c:	4a9a      	ldr	r2, [pc, #616]	; (8003208 <setup+0x9d4>)
 8002f9e:	601a      	str	r2, [r3, #0]
			}
	break;
 8002fa0:	e142      	b.n	8003228 <setup+0x9f4>

		case 5://case 8:
			lcd_locate(0,0);
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe f8e2 	bl	800116e <lcd_locate>
			lcd_print("SW_PUSH");
 8002faa:	4885      	ldr	r0, [pc, #532]	; (80031c0 <setup+0x98c>)
 8002fac:	f7fe f8f4 	bl	8001198 <lcd_print>
			lcd_locate(0,1);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fe f8db 	bl	800116e <lcd_locate>
			lcd_print("START 20 ");
 8002fb8:	4894      	ldr	r0, [pc, #592]	; (800320c <setup+0x9d8>)
 8002fba:	f7fe f8ed 	bl	8001198 <lcd_print>
			if(sw_center_state == 1) {
 8002fbe:	4b82      	ldr	r3, [pc, #520]	; (80031c8 <setup+0x994>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 8132 	bne.w	800322c <setup+0x9f8>
				HAL_Delay(1000);
 8002fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fcc:	f000 fef6 	bl	8003dbc <HAL_Delay>
				order_posR = 0.0f;
 8002fd0:	4b7e      	ldr	r3, [pc, #504]	; (80031cc <setup+0x998>)
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
				order_posL = 0.0f;
 8002fd8:	4b7d      	ldr	r3, [pc, #500]	; (80031d0 <setup+0x99c>)
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
				order_velR = 0.0f;
 8002fe0:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <setup+0x9a0>)
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
				order_velL = 0.0f;
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <setup+0x9a4>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <setup+0x9a8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 8002ff6:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <setup+0x9ac>)
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	f04f 0400 	mov.w	r4, #0
 8003000:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 8003004:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <setup+0x994>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <setup+0x9b0>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8003010:	f7fe f89d 	bl	800114e <lcd_clear>
				HAL_Delay(1000);
 8003014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003018:	f000 fed0 	bl	8003dbc <HAL_Delay>
				main_pattern = 8;
 800301c:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <setup+0x9b4>)
 800301e:	2208      	movs	r2, #8
 8003020:	701a      	strb	r2, [r3, #0]
				MR_flag = 0;
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <setup+0x9b8>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
				MR_flag = 0;
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <setup+0x9b8>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
				crossline_flag_L = 0;
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <setup+0x9bc>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
				crossline_flag_M = 0;
 8003034:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <setup+0x9c0>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
				crossline_flag = 0;
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <setup+0x9c4>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
				i_vel_clear_flag = 1;
 8003040:	4b6e      	ldr	r3, [pc, #440]	; (80031fc <setup+0x9c8>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
				i_pos_clear_flag = 1;
 8003046:	4b6e      	ldr	r3, [pc, #440]	; (8003200 <setup+0x9cc>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
				target_vel = 2000.0f;
 800304c:	4b6d      	ldr	r3, [pc, #436]	; (8003204 <setup+0x9d0>)
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <setup+0x9dc>)
 8003050:	601a      	str	r2, [r3, #0]
					}
			break;
 8003052:	e0eb      	b.n	800322c <setup+0x9f8>

		case 6://case 9:
				lcd_locate(0,0);
 8003054:	2100      	movs	r1, #0
 8003056:	2000      	movs	r0, #0
 8003058:	f7fe f889 	bl	800116e <lcd_locate>
				lcd_print("SW_PUSH");
 800305c:	4858      	ldr	r0, [pc, #352]	; (80031c0 <setup+0x98c>)
 800305e:	f7fe f89b 	bl	8001198 <lcd_print>
				lcd_locate(0,1);
 8003062:	2101      	movs	r1, #1
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe f882 	bl	800116e <lcd_locate>
				lcd_print("START 22 ");
 800306a:	486a      	ldr	r0, [pc, #424]	; (8003214 <setup+0x9e0>)
 800306c:	f7fe f894 	bl	8001198 <lcd_print>
				if(sw_center_state == 1) {
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <setup+0x994>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	f040 80db 	bne.w	8003230 <setup+0x9fc>
					HAL_Delay(1000);
 800307a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307e:	f000 fe9d 	bl	8003dbc <HAL_Delay>
					order_posR = 0.0f;
 8003082:	4b52      	ldr	r3, [pc, #328]	; (80031cc <setup+0x998>)
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
					order_posL = 0.0f;
 800308a:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <setup+0x99c>)
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
					order_velR = 0.0f;
 8003092:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <setup+0x9a0>)
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
					order_velL = 0.0f;
 800309a:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <setup+0x9a4>)
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
					timer = 0;
 80030a2:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <setup+0x9a8>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
					enc_cnt = 0;
 80030a8:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <setup+0x9ac>)
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	e9c2 3400 	strd	r3, r4, [r2]
					sw_center_state = 0;
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <setup+0x994>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
					velocity_pattern = 1;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <setup+0x9b0>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80030c2:	f7fe f844 	bl	800114e <lcd_clear>
					HAL_Delay(1000);
 80030c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ca:	f000 fe77 	bl	8003dbc <HAL_Delay>
					main_pattern = 8;
 80030ce:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <setup+0x9b4>)
 80030d0:	2208      	movs	r2, #8
 80030d2:	701a      	strb	r2, [r3, #0]
					MR_flag = 0;
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <setup+0x9b8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
					MR_flag = 0;
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <setup+0x9b8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
					crossline_flag_L = 0;
 80030e0:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <setup+0x9bc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
					crossline_flag_M = 0;
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <setup+0x9c0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
					crossline_flag = 0;
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <setup+0x9c4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
					i_vel_clear_flag = 1;
 80030f2:	4b42      	ldr	r3, [pc, #264]	; (80031fc <setup+0x9c8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
					i_pos_clear_flag = 1;
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <setup+0x9cc>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
					target_vel = 2200.0f;
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <setup+0x9d0>)
 8003100:	4a45      	ldr	r2, [pc, #276]	; (8003218 <setup+0x9e4>)
 8003102:	601a      	str	r2, [r3, #0]
						}
				break;
 8003104:	e094      	b.n	8003230 <setup+0x9fc>
		case 7://case 9:
					lcd_locate(0,0);
 8003106:	2100      	movs	r1, #0
 8003108:	2000      	movs	r0, #0
 800310a:	f7fe f830 	bl	800116e <lcd_locate>
					lcd_print("SW_PUSH");
 800310e:	482c      	ldr	r0, [pc, #176]	; (80031c0 <setup+0x98c>)
 8003110:	f7fe f842 	bl	8001198 <lcd_print>
					lcd_locate(0,1);
 8003114:	2101      	movs	r1, #1
 8003116:	2000      	movs	r0, #0
 8003118:	f7fe f829 	bl	800116e <lcd_locate>
					lcd_print("START 25 ");
 800311c:	483f      	ldr	r0, [pc, #252]	; (800321c <setup+0x9e8>)
 800311e:	f7fe f83b 	bl	8001198 <lcd_print>
					if(sw_center_state == 1) {
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <setup+0x994>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 8084 	bne.w	8003234 <setup+0xa00>
						HAL_Delay(1000);
 800312c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003130:	f000 fe44 	bl	8003dbc <HAL_Delay>
						order_posR = 0.0f;
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <setup+0x998>)
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
						order_posL = 0.0f;
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <setup+0x99c>)
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
						order_velR = 0.0f;
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <setup+0x9a0>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
						order_velL = 0.0f;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <setup+0x9a4>)
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
						timer = 0;
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <setup+0x9a8>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
						enc_cnt = 0;
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <setup+0x9ac>)
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	e9c2 3400 	strd	r3, r4, [r2]
						sw_center_state = 0;
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <setup+0x994>)
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
						velocity_pattern = 1;
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <setup+0x9b0>)
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
						lcd_clear();
 8003174:	f7fd ffeb 	bl	800114e <lcd_clear>
						HAL_Delay(1000);
 8003178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800317c:	f000 fe1e 	bl	8003dbc <HAL_Delay>
						main_pattern = 8;
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <setup+0x9b4>)
 8003182:	2208      	movs	r2, #8
 8003184:	701a      	strb	r2, [r3, #0]
						MR_flag = 0;
 8003186:	4b19      	ldr	r3, [pc, #100]	; (80031ec <setup+0x9b8>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
						MR_flag = 0;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <setup+0x9b8>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
						crossline_flag_L = 0;
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <setup+0x9bc>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
						crossline_flag_M = 0;
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <setup+0x9c0>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
						crossline_flag = 0;
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <setup+0x9c4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
						i_vel_clear_flag = 1;
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <setup+0x9c8>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
						i_pos_clear_flag = 1;
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <setup+0x9cc>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
						target_vel = 2500.0f;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <setup+0x9d0>)
 80031b2:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <setup+0x9ec>)
 80031b4:	601a      	str	r2, [r3, #0]
							}
					break;
 80031b6:	e03d      	b.n	8003234 <setup+0xa00>
		default:
			break;
 80031b8:	bf00      	nop
 80031ba:	e03c      	b.n	8003236 <setup+0xa02>
			break;
 80031bc:	bf00      	nop
 80031be:	e03a      	b.n	8003236 <setup+0xa02>
 80031c0:	080088e0 	.word	0x080088e0
 80031c4:	08008900 	.word	0x08008900
 80031c8:	2000010a 	.word	0x2000010a
 80031cc:	2000008c 	.word	0x2000008c
 80031d0:	20000090 	.word	0x20000090
 80031d4:	20000098 	.word	0x20000098
 80031d8:	20000094 	.word	0x20000094
 80031dc:	200000e8 	.word	0x200000e8
 80031e0:	20000520 	.word	0x20000520
 80031e4:	20000104 	.word	0x20000104
 80031e8:	200000ec 	.word	0x200000ec
 80031ec:	200000fc 	.word	0x200000fc
 80031f0:	200000f0 	.word	0x200000f0
 80031f4:	200000f4 	.word	0x200000f4
 80031f8:	200000f8 	.word	0x200000f8
 80031fc:	200004f0 	.word	0x200004f0
 8003200:	200004f4 	.word	0x200004f4
 8003204:	20000500 	.word	0x20000500
 8003208:	44e10000 	.word	0x44e10000
 800320c:	0800890c 	.word	0x0800890c
 8003210:	44fa0000 	.word	0x44fa0000
 8003214:	08008918 	.word	0x08008918
 8003218:	45098000 	.word	0x45098000
 800321c:	08008924 	.word	0x08008924
 8003220:	451c4000 	.word	0x451c4000
			break;
 8003224:	bf00      	nop
 8003226:	e006      	b.n	8003236 <setup+0xa02>
	break;
 8003228:	bf00      	nop
 800322a:	e004      	b.n	8003236 <setup+0xa02>
			break;
 800322c:	bf00      	nop
 800322e:	e002      	b.n	8003236 <setup+0xa02>
				break;
 8003230:	bf00      	nop
 8003232:	e000      	b.n	8003236 <setup+0xa02>
					break;
 8003234:	bf00      	nop
	}
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop

08003240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_MspInit+0x84>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_MspInit+0x84>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6453      	str	r3, [r2, #68]	; 0x44
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_MspInit+0x84>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <HAL_MspInit+0x84>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_MspInit+0x84>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_MspInit+0x84>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2105      	movs	r1, #5
 8003282:	f06f 000b 	mvn.w	r0, #11
 8003286:	f001 fa8a 	bl	800479e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2105      	movs	r1, #5
 800328e:	f06f 000a 	mvn.w	r0, #10
 8003292:	f001 fa84 	bl	800479e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2105      	movs	r1, #5
 800329a:	f06f 0009 	mvn.w	r0, #9
 800329e:	f001 fa7e 	bl	800479e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2105      	movs	r1, #5
 80032a6:	f06f 0004 	mvn.w	r0, #4
 80032aa:	f001 fa78 	bl	800479e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2105      	movs	r1, #5
 80032b2:	f06f 0003 	mvn.w	r0, #3
 80032b6:	f001 fa72 	bl	800479e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_ADC_MspInit+0x144>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f040 808c 	bne.w	8003404 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_ADC_MspInit+0x148>)
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	4a46      	ldr	r2, [pc, #280]	; (8003410 <HAL_ADC_MspInit+0x148>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6453      	str	r3, [r2, #68]	; 0x44
 80032fc:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_ADC_MspInit+0x148>)
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <HAL_ADC_MspInit+0x148>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a3f      	ldr	r2, [pc, #252]	; (8003410 <HAL_ADC_MspInit+0x148>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_ADC_MspInit+0x148>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_ADC_MspInit+0x148>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a38      	ldr	r2, [pc, #224]	; (8003410 <HAL_ADC_MspInit+0x148>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_ADC_MspInit+0x148>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_ADC_MspInit+0x148>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4a31      	ldr	r2, [pc, #196]	; (8003410 <HAL_ADC_MspInit+0x148>)
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	6313      	str	r3, [r2, #48]	; 0x30
 8003350:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_ADC_MspInit+0x148>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800335c:	233c      	movs	r3, #60	; 0x3c
 800335e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003360:	2303      	movs	r3, #3
 8003362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	4829      	ldr	r0, [pc, #164]	; (8003414 <HAL_ADC_MspInit+0x14c>)
 8003370:	f001 fdba 	bl	8004ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003374:	23ff      	movs	r3, #255	; 0xff
 8003376:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003378:	2303      	movs	r3, #3
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 031c 	add.w	r3, r7, #28
 8003384:	4619      	mov	r1, r3
 8003386:	4824      	ldr	r0, [pc, #144]	; (8003418 <HAL_ADC_MspInit+0x150>)
 8003388:	f001 fdae 	bl	8004ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800338c:	2303      	movs	r3, #3
 800338e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003390:	2303      	movs	r3, #3
 8003392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	481f      	ldr	r0, [pc, #124]	; (800341c <HAL_ADC_MspInit+0x154>)
 80033a0:	f001 fda2 	bl	8004ee8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_ADC_MspInit+0x15c>)
 80033a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033ea:	f001 fa0f 	bl	800480c <HAL_DMA_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80033f4:	f7fe fdcc 	bl	8001f90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_ADC_MspInit+0x158>)
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_ADC_MspInit+0x158>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003404:	bf00      	nop
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40012000 	.word	0x40012000
 8003410:	40023800 	.word	0x40023800
 8003414:	40020800 	.word	0x40020800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	20000348 	.word	0x20000348
 8003424:	40026410 	.word	0x40026410

08003428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_I2C_MspInit+0xec>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12d      	bne.n	80034a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800346c:	2312      	movs	r3, #18
 800346e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003474:	2303      	movs	r3, #3
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003478:	2304      	movs	r3, #4
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	4826      	ldr	r0, [pc, #152]	; (800351c <HAL_I2C_MspInit+0xf4>)
 8003484:	f001 fd30 	bl	8004ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 8003492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034a4:	e031      	b.n	800350a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_I2C_MspInit+0xf8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d12c      	bne.n	800350a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d2:	2312      	movs	r3, #18
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80034de:	2304      	movs	r3, #4
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	480c      	ldr	r0, [pc, #48]	; (800351c <HAL_I2C_MspInit+0xf4>)
 80034ea:	f001 fcfd 	bl	8004ee8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 80034f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_I2C_MspInit+0xf0>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	bf00      	nop
 800350c:	3730      	adds	r7, #48	; 0x30
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40005400 	.word	0x40005400
 8003518:	40023800 	.word	0x40023800
 800351c:	40020400 	.word	0x40020400
 8003520:	40005800 	.word	0x40005800

08003524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_SPI_MspInit+0x84>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12c      	bne.n	80035a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_SPI_MspInit+0x88>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <HAL_SPI_MspInit+0x88>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_SPI_MspInit+0x88>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800357e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003590:	2306      	movs	r3, #6
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4619      	mov	r1, r3
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <HAL_SPI_MspInit+0x8c>)
 800359c:	f001 fca4 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40003c00 	.word	0x40003c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020800 	.word	0x40020800

080035b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	; 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_TIM_Encoder_MspInit+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12d      	bne.n	8003632 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	4a30      	ldr	r2, [pc, #192]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6453      	str	r3, [r2, #68]	; 0x44
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800360e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003620:	2301      	movs	r3, #1
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	481e      	ldr	r0, [pc, #120]	; (80036a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800362c:	f001 fc5c 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003630:	e030      	b.n	8003694 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d12b      	bne.n	8003694 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	6453      	str	r3, [r2, #68]	; 0x44
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003674:	23c0      	movs	r3, #192	; 0xc0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2300      	movs	r3, #0
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003684:	2303      	movs	r3, #3
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003688:	f107 031c 	add.w	r3, r7, #28
 800368c:	4619      	mov	r1, r3
 800368e:	4807      	ldr	r0, [pc, #28]	; (80036ac <HAL_TIM_Encoder_MspInit+0xf8>)
 8003690:	f001 fc2a 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003694:	bf00      	nop
 8003696:	3730      	adds	r7, #48	; 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40010000 	.word	0x40010000
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40020800 	.word	0x40020800

080036b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80036de:	e026      	b.n	800372e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_TIM_PWM_MspInit+0x90>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
}
 8003706:	e012      	b.n	800372e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <HAL_TIM_PWM_MspInit+0x94>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 800371c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_TIM_PWM_MspInit+0x8c>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40000400 	.word	0x40000400
 8003744:	40001800 	.word	0x40001800

08003748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_TIM_Base_MspInit+0x80>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d116      	bne.n	8003788 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2105      	movs	r1, #5
 800377a:	2036      	movs	r0, #54	; 0x36
 800377c:	f001 f80f 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003780:	2036      	movs	r0, #54	; 0x36
 8003782:	f001 f828 	bl	80047d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003786:	e01a      	b.n	80037be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_TIM_Base_MspInit+0x88>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d115      	bne.n	80037be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_TIM_Base_MspInit+0x84>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2105      	movs	r1, #5
 80037b2:	2037      	movs	r0, #55	; 0x37
 80037b4:	f000 fff3 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037b8:	2037      	movs	r0, #55	; 0x37
 80037ba:	f001 f80c 	bl	80047d6 <HAL_NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40001000 	.word	0x40001000
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40001400 	.word	0x40001400

080037d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d11f      	bne.n	8003836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	4b44      	ldr	r3, [pc, #272]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a43      	ldr	r2, [pc, #268]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b41      	ldr	r3, [pc, #260]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003824:	2301      	movs	r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	4619      	mov	r1, r3
 800382e:	4838      	ldr	r0, [pc, #224]	; (8003910 <HAL_TIM_MspPostInit+0x13c>)
 8003830:	f001 fb5a 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003834:	e066      	b.n	8003904 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a36      	ldr	r2, [pc, #216]	; (8003914 <HAL_TIM_MspPostInit+0x140>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d13d      	bne.n	80038bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6313      	str	r3, [r2, #48]	; 0x30
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6313      	str	r3, [r2, #48]	; 0x30
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003878:	f44f 7340 	mov.w	r3, #768	; 0x300
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800388a:	2302      	movs	r3, #2
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4619      	mov	r1, r3
 8003894:	4820      	ldr	r0, [pc, #128]	; (8003918 <HAL_TIM_MspPostInit+0x144>)
 8003896:	f001 fb27 	bl	8004ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800389a:	2330      	movs	r3, #48	; 0x30
 800389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038aa:	2302      	movs	r3, #2
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ae:	f107 031c 	add.w	r3, r7, #28
 80038b2:	4619      	mov	r1, r3
 80038b4:	4819      	ldr	r0, [pc, #100]	; (800391c <HAL_TIM_MspPostInit+0x148>)
 80038b6:	f001 fb17 	bl	8004ee8 <HAL_GPIO_Init>
}
 80038ba:	e023      	b.n	8003904 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_TIM_MspPostInit+0x14c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d11e      	bne.n	8003904 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_TIM_MspPostInit+0x138>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80038e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80038e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80038f4:	2309      	movs	r3, #9
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	4807      	ldr	r0, [pc, #28]	; (800391c <HAL_TIM_MspPostInit+0x148>)
 8003900:	f001 faf2 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003904:	bf00      	nop
 8003906:	3730      	adds	r7, #48	; 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	40020000 	.word	0x40020000
 8003914:	40000400 	.word	0x40000400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020400 	.word	0x40020400
 8003920:	40001800 	.word	0x40001800

08003924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_UART_MspInit+0x84>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d12b      	bne.n	800399e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_UART_MspInit+0x88>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_UART_MspInit+0x88>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_UART_MspInit+0x88>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_UART_MspInit+0x88>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_UART_MspInit+0x88>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_UART_MspInit+0x88>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800397e:	23c0      	movs	r3, #192	; 0xc0
 8003980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003986:	2301      	movs	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398a:	2303      	movs	r3, #3
 800398c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800398e:	2307      	movs	r3, #7
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	4619      	mov	r1, r3
 8003998:	4805      	ldr	r0, [pc, #20]	; (80039b0 <HAL_UART_MspInit+0x8c>)
 800399a:	f001 faa5 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800399e:	bf00      	nop
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020400 	.word	0x40020400

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <HardFault_Handler+0x4>

080039c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <MemManage_Handler+0x4>

080039ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <BusFault_Handler+0x4>

080039d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <UsageFault_Handler+0x4>

080039da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a08:	f000 f9b8 	bl	8003d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a14:	2001      	movs	r0, #1
 8003a16:	f001 fc1b 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a22:	2002      	movs	r0, #2
 8003a24:	f001 fc14 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a34:	f001 fc0c 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a3c:	f001 fc08 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003a40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a44:	f001 fc04 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a4c:	f001 fc00 	bl	8005250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM6_DAC_IRQHandler+0x10>)
 8003a5a:	f003 f9ba 	bl	8006dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200003a8 	.word	0x200003a8

08003a68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <TIM7_IRQHandler+0x10>)
 8003a6e:	f003 f9b0 	bl	8006dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200004a8 	.word	0x200004a8

08003a7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA2_Stream0_IRQHandler+0x10>)
 8003a82:	f000 ffc9 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000348 	.word	0x20000348

08003a90 <HAL_GPIO_EXTI_Callback>:
int8_t check_sens_val = 0;
uint8_t sw_up_state = 0;
uint8_t sw_center_state = 0;
uint8_t cnt_sw = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]

	if(cnt_sw >= 30) {
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x144>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b1d      	cmp	r3, #29
 8003aa0:	f240 8092 	bls.w	8003bc8 <HAL_GPIO_EXTI_Callback+0x138>
		if (GPIO_Pin == GPIO_PIN_0) { 	//left
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d110      	bne.n	8003acc <HAL_GPIO_EXTI_Callback+0x3c>
			sensor_mode++;
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003aac:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003aba:	701a      	strb	r2, [r3, #0]
			if(sensor_mode >= 1) sensor_mode = 0;
 8003abc:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003abe:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dd02      	ble.n	8003acc <HAL_GPIO_EXTI_Callback+0x3c>
 8003ac6:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
			//if(setup_mode == 1) sensor_mode = 0;
			//if(setup_mode == 0) sensor_mode = 1;

		}
		if (GPIO_Pin == GPIO_PIN_1) { 	//up
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d11e      	bne.n	8003b10 <HAL_GPIO_EXTI_Callback+0x80>
			if(sw_up_state > 1) sw_up_state = 1;
 8003ad2:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d902      	bls.n	8003ae0 <HAL_GPIO_EXTI_Callback+0x50>
 8003ada:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
			sw_up_state ^= 1;
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4b3c      	ldr	r3, [pc, #240]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003aec:	701a      	strb	r2, [r3, #0]
			check_sens_val--;
 8003aee:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003af0:	f993 3000 	ldrsb.w	r3, [r3]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	b25a      	sxtb	r2, r3
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003afe:	701a      	strb	r2, [r3, #0]
			if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 8003b00:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b02:	f993 3000 	ldrsb.w	r3, [r3]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da02      	bge.n	8003b10 <HAL_GPIO_EXTI_Callback+0x80>
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b0c:	220e      	movs	r2, #14
 8003b0e:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_12) {	//push
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b16:	d110      	bne.n	8003b3a <HAL_GPIO_EXTI_Callback+0xaa>
			setup_mode++;
 8003b18:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003b28:	701a      	strb	r2, [r3, #0]
			if(setup_mode >= 8) setup_mode = 0;
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003b2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003b30:	2b07      	cmp	r3, #7
 8003b32:	dd02      	ble.n	8003b3a <HAL_GPIO_EXTI_Callback+0xaa>
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_13) {	//down
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d110      	bne.n	8003b64 <HAL_GPIO_EXTI_Callback+0xd4>
			check_sens_val++;
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b44:	f993 3000 	ldrsb.w	r3, [r3]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	b25a      	sxtb	r2, r3
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b52:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b56:	f993 3000 	ldrsb.w	r3, [r3]
 8003b5a:	2b0e      	cmp	r3, #14
 8003b5c:	dd02      	ble.n	8003b64 <HAL_GPIO_EXTI_Callback+0xd4>
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_14) {	//center
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b6a:	d115      	bne.n	8003b98 <HAL_GPIO_EXTI_Callback+0x108>
			if(sw_center_state > 1) sw_center_state = 1;
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d902      	bls.n	8003b7a <HAL_GPIO_EXTI_Callback+0xea>
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
			sw_center_state ^= 1;
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003b86:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b8e:	2b0e      	cmp	r3, #14
 8003b90:	dd02      	ble.n	8003b98 <HAL_GPIO_EXTI_Callback+0x108>
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_15) {;	//right
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9e:	d110      	bne.n	8003bc2 <HAL_GPIO_EXTI_Callback+0x132>
			sensor_mode++;
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	b25a      	sxtb	r2, r3
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bb0:	701a      	strb	r2, [r3, #0]
			if(sensor_mode >= 1) sensor_mode = 0;
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	dd02      	ble.n	8003bc2 <HAL_GPIO_EXTI_Callback+0x132>
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
			//if(setup_mode == 1) sensor_mode = 0;
			//if(setup_mode == 0) sensor_mode = 1;

		}
		cnt_sw = 0;
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x144>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
	}
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	2000010b 	.word	0x2000010b
 8003bd8:	20000107 	.word	0x20000107
 8003bdc:	20000109 	.word	0x20000109
 8003be0:	20000108 	.word	0x20000108
 8003be4:	20000106 	.word	0x20000106
 8003be8:	2000010a 	.word	0x2000010a

08003bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <_sbrk+0x5c>)
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <_sbrk+0x60>)
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <_sbrk+0x64>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <_sbrk+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c1c:	f004 f9a0 	bl	8007f60 <__errno>
 8003c20:	4602      	mov	r2, r0
 8003c22:	230c      	movs	r3, #12
 8003c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	e009      	b.n	8003c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <_sbrk+0x64>)
 8003c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20020000 	.word	0x20020000
 8003c4c:	00000400 	.word	0x00000400
 8003c50:	2000010c 	.word	0x2000010c
 8003c54:	2000c150 	.word	0x2000c150

08003c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <SystemInit+0x28>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <SystemInit+0x28>)
 8003c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <SystemInit+0x28>)
 8003c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c72:	609a      	str	r2, [r3, #8]
#endif
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c8a:	e003      	b.n	8003c94 <LoopCopyDataInit>

08003c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c92:	3104      	adds	r1, #4

08003c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c94:	480b      	ldr	r0, [pc, #44]	; (8003cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c9c:	d3f6      	bcc.n	8003c8c <CopyDataInit>
  ldr  r2, =_sbss
 8003c9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ca0:	e002      	b.n	8003ca8 <LoopFillZerobss>

08003ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ca4:	f842 3b04 	str.w	r3, [r2], #4

08003ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cac:	d3f9      	bcc.n	8003ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cae:	f7ff ffd3 	bl	8003c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cb2:	f004 f95b 	bl	8007f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cb6:	f7fd fbd7 	bl	8001468 <main>
  bx  lr    
 8003cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003cc0:	08008994 	.word	0x08008994
  ldr  r0, =_sdata
 8003cc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cc8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003ccc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003cd0:	2000c14c 	.word	0x2000c14c

08003cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cd4:	e7fe      	b.n	8003cd4 <ADC_IRQHandler>
	...

08003cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_Init+0x40>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <HAL_Init+0x40>)
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_Init+0x40>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_Init+0x40>)
 8003cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_Init+0x40>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <HAL_Init+0x40>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f000 fd41 	bl	8004788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f000 f808 	bl	8003d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d0c:	f7ff fa98 	bl	8003240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_InitTick+0x54>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_InitTick+0x58>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd59 	bl	80047f2 <HAL_SYSTICK_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00e      	b.n	8003d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d80a      	bhi.n	8003d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d50:	2200      	movs	r2, #0
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f000 fd21 	bl	800479e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_InitTick+0x5c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000008 	.word	0x20000008
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	2000c144 	.word	0x2000c144

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000c144 	.word	0x2000c144

08003dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_Delay+0x40>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000008 	.word	0x20000008

08003e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e033      	b.n	8003e7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fa52 	bl	80032c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e46:	f023 0302 	bic.w	r3, r3, #2
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa4a 	bl	80042ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6e:	e001      	b.n	8003e74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_Start_DMA+0x1e>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0cc      	b.n	8004040 <HAL_ADC_Start_DMA+0x1b8>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d018      	beq.n	8003eee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <HAL_ADC_Start_DMA+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_ADC_Start_DMA+0x1c4>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9a      	lsrs	r2, r3, #18
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f9      	bne.n	8003ee2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 80a0 	bne.w	800403e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d106      	bne.n	8003f4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f023 0206 	bic.w	r2, r3, #6
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
 8003f4a:	e002      	b.n	8003f52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <HAL_ADC_Start_DMA+0x1c8>)
 8003f5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_ADC_Start_DMA+0x1cc>)
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <HAL_ADC_Start_DMA+0x1d0>)
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_ADC_Start_DMA+0x1d4>)
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	334c      	adds	r3, #76	; 0x4c
 8003faa:	4619      	mov	r1, r3
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f000 fcda 	bl	8004968 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d12a      	bne.n	8004016 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_ADC_Start_DMA+0x1d8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d015      	beq.n	8003ff6 <HAL_ADC_Start_DMA+0x16e>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <HAL_ADC_Start_DMA+0x1dc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d105      	bne.n	8003fe0 <HAL_ADC_Start_DMA+0x158>
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HAL_ADC_Start_DMA+0x1c8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_ADC_Start_DMA+0x1e0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d129      	bne.n	800403e <HAL_ADC_Start_DMA+0x1b6>
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_ADC_Start_DMA+0x1c8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	d823      	bhi.n	800403e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11c      	bne.n	800403e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	e013      	b.n	800403e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a11      	ldr	r2, [pc, #68]	; (8004060 <HAL_ADC_Start_DMA+0x1d8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10e      	bne.n	800403e <HAL_ADC_Start_DMA+0x1b6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800403c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000000 	.word	0x20000000
 800404c:	431bde83 	.word	0x431bde83
 8004050:	40012300 	.word	0x40012300
 8004054:	080044e5 	.word	0x080044e5
 8004058:	0800459f 	.word	0x0800459f
 800405c:	080045bb 	.word	0x080045bb
 8004060:	40012000 	.word	0x40012000
 8004064:	40012100 	.word	0x40012100
 8004068:	40012200 	.word	0x40012200

0800406c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e105      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x228>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d925      	bls.n	8004120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68d9      	ldr	r1, [r3, #12]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	3b1e      	subs	r3, #30
 80040ea:	2207      	movs	r2, #7
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43da      	mvns	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	400a      	ands	r2, r1
 80040f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68d9      	ldr	r1, [r3, #12]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	4618      	mov	r0, r3
 800410c:	4603      	mov	r3, r0
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4403      	add	r3, r0
 8004112:	3b1e      	subs	r3, #30
 8004114:	409a      	lsls	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e022      	b.n	8004166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	2207      	movs	r2, #7
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	4618      	mov	r0, r3
 8004156:	4603      	mov	r3, r0
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4403      	add	r3, r0
 800415c:	409a      	lsls	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b06      	cmp	r3, #6
 800416c:	d824      	bhi.n	80041b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	3b05      	subs	r3, #5
 8004180:	221f      	movs	r2, #31
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43da      	mvns	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	400a      	ands	r2, r1
 800418e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	4618      	mov	r0, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	3b05      	subs	r3, #5
 80041aa:	fa00 f203 	lsl.w	r2, r0, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	635a      	str	r2, [r3, #52]	; 0x34
 80041b6:	e04c      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	d824      	bhi.n	800420a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	3b23      	subs	r3, #35	; 0x23
 80041d2:	221f      	movs	r2, #31
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43da      	mvns	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	400a      	ands	r2, r1
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4618      	mov	r0, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	3b23      	subs	r3, #35	; 0x23
 80041fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
 8004208:	e023      	b.n	8004252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	3b41      	subs	r3, #65	; 0x41
 800421c:	221f      	movs	r2, #31
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	400a      	ands	r2, r1
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	4618      	mov	r0, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3b41      	subs	r3, #65	; 0x41
 8004246:	fa00 f203 	lsl.w	r2, r0, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_ADC_ConfigChannel+0x234>)
 8004254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <HAL_ADC_ConfigChannel+0x238>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d109      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x1cc>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b12      	cmp	r3, #18
 8004266:	d105      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_ADC_ConfigChannel+0x238>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d123      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b10      	cmp	r3, #16
 8004284:	d003      	beq.n	800428e <HAL_ADC_ConfigChannel+0x1e6>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b11      	cmp	r3, #17
 800428c:	d11b      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d111      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_ADC_ConfigChannel+0x23c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_ADC_ConfigChannel+0x240>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	0c9a      	lsrs	r2, r3, #18
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042b8:	e002      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f9      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40012300 	.word	0x40012300
 80042e0:	40012000 	.word	0x40012000
 80042e4:	20000000 	.word	0x20000000
 80042e8:	431bde83 	.word	0x431bde83

080042ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f4:	4b79      	ldr	r3, [pc, #484]	; (80044dc <ADC_Init+0x1f0>)
 80042f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	021a      	lsls	r2, r3, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	4a58      	ldr	r2, [pc, #352]	; (80044e0 <ADC_Init+0x1f4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6899      	ldr	r1, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	e00f      	b.n	80043ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0202 	bic.w	r2, r2, #2
 80043f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7e1b      	ldrb	r3, [r3, #24]
 8004404:	005a      	lsls	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	3b01      	subs	r3, #1
 8004444:	035a      	lsls	r2, r3, #13
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e007      	b.n	8004460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	3b01      	subs	r3, #1
 800447c:	051a      	lsls	r2, r3, #20
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044a2:	025a      	lsls	r2, r3, #9
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	029a      	lsls	r2, r3, #10
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40012300 	.word	0x40012300
 80044e0:	0f000001 	.word	0x0f000001

080044e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d13c      	bne.n	8004578 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d12b      	bne.n	8004570 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	d127      	bne.n	8004570 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004538:	2b00      	cmp	r3, #0
 800453a:	d119      	bne.n	8004570 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0220 	bic.w	r2, r2, #32
 800454a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fd7b 	bl	800406c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004576:	e00e      	b.n	8004596 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fd85 	bl	8004094 <HAL_ADC_ErrorCallback>
}
 800458a:	e004      	b.n	8004596 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fd67 	bl	8004080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff fd5a 	bl	8004094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <__NVIC_SetPriorityGrouping+0x44>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004604:	4013      	ands	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461a:	4a04      	ldr	r2, [pc, #16]	; (800462c <__NVIC_SetPriorityGrouping+0x44>)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	60d3      	str	r3, [r2, #12]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <__NVIC_GetPriorityGrouping+0x18>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	f003 0307 	and.w	r3, r3, #7
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	db0b      	blt.n	8004676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4907      	ldr	r1, [pc, #28]	; (8004684 <__NVIC_EnableIRQ+0x38>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2001      	movs	r0, #1
 800466e:	fa00 f202 	lsl.w	r2, r0, r2
 8004672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000e100 	.word	0xe000e100

08004688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db0a      	blt.n	80046b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	490c      	ldr	r1, [pc, #48]	; (80046d4 <__NVIC_SetPriority+0x4c>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	0112      	lsls	r2, r2, #4
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	440b      	add	r3, r1
 80046ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b0:	e00a      	b.n	80046c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4908      	ldr	r1, [pc, #32]	; (80046d8 <__NVIC_SetPriority+0x50>)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3b04      	subs	r3, #4
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	440b      	add	r3, r1
 80046c6:	761a      	strb	r2, [r3, #24]
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f1c3 0307 	rsb	r3, r3, #7
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf28      	it	cs
 80046fa:	2304      	movcs	r3, #4
 80046fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3304      	adds	r3, #4
 8004702:	2b06      	cmp	r3, #6
 8004704:	d902      	bls.n	800470c <NVIC_EncodePriority+0x30>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3b03      	subs	r3, #3
 800470a:	e000      	b.n	800470e <NVIC_EncodePriority+0x32>
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004724:	f04f 31ff 	mov.w	r1, #4294967295
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	43d9      	mvns	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	4313      	orrs	r3, r2
         );
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004754:	d301      	bcc.n	800475a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <SysTick_Config+0x40>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004762:	210f      	movs	r1, #15
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	f7ff ff8e 	bl	8004688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <SysTick_Config+0x40>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004772:	4b04      	ldr	r3, [pc, #16]	; (8004784 <SysTick_Config+0x40>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff29 	bl	80045e8 <__NVIC_SetPriorityGrouping>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047b0:	f7ff ff3e 	bl	8004630 <__NVIC_GetPriorityGrouping>
 80047b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	f7ff ff8e 	bl	80046dc <NVIC_EncodePriority>
 80047c0:	4602      	mov	r2, r0
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff5d 	bl	8004688 <__NVIC_SetPriority>
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff31 	bl	800464c <__NVIC_EnableIRQ>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ffa2 	bl	8004744 <SysTick_Config>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7ff fac4 	bl	8003da4 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e099      	b.n	800495c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004848:	e00f      	b.n	800486a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800484a:	f7ff faab 	bl	8003da4 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b05      	cmp	r3, #5
 8004856:	d908      	bls.n	800486a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2203      	movs	r2, #3
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e078      	b.n	800495c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e8      	bne.n	800484a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <HAL_DMA_Init+0x158>)
 8004884:	4013      	ands	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d107      	bne.n	80048d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4313      	orrs	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d117      	bne.n	800492e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa6f 	bl	8004df4 <DMA_CheckFifoParam>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800492a:	2301      	movs	r3, #1
 800492c:	e016      	b.n	800495c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa26 	bl	8004d88 <DMA_CalcBaseAndBitshift>
 800493c:	4603      	mov	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f010803f 	.word	0xf010803f

08004968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_DMA_Start_IT+0x26>
 800498a:	2302      	movs	r3, #2
 800498c:	e040      	b.n	8004a10 <HAL_DMA_Start_IT+0xa8>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d12f      	bne.n	8004a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f9b8 	bl	8004d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	223f      	movs	r2, #63	; 0x3f
 80049c2:	409a      	lsls	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0216 	orr.w	r2, r2, #22
 80049d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e005      	b.n	8004a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a24:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <HAL_DMA_IRQHandler+0x258>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a92      	ldr	r2, [pc, #584]	; (8004c74 <HAL_DMA_IRQHandler+0x25c>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	2208      	movs	r2, #8
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d013      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	2208      	movs	r2, #8
 8004a72:	409a      	lsls	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0202 	orr.w	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	2204      	movs	r2, #4
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2204      	movs	r2, #4
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	2210      	movs	r2, #16
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d043      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03c      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2210      	movs	r2, #16
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d024      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	e01f      	b.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e016      	b.n	8004b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0208 	bic.w	r2, r2, #8
 8004b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 808e 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	2220      	movs	r2, #32
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d136      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0216 	bic.w	r2, r2, #22
 8004bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0x1da>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0208 	bic.w	r2, r2, #8
 8004c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	223f      	movs	r2, #63	; 0x3f
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d07d      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
        }
        return;
 8004c2e:	e078      	b.n	8004d22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01c      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d030      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
 8004c5c:	e02b      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d027      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
 8004c6e:	e022      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x29e>
 8004c70:	20000000 	.word	0x20000000
 8004c74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0210 	bic.w	r2, r2, #16
 8004c94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d032      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2205      	movs	r2, #5
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d307      	bcc.n	8004cfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f2      	bne.n	8004ce2 <HAL_DMA_IRQHandler+0x2ca>
 8004cfc:	e000      	b.n	8004d00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cfe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	e000      	b.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d22:	bf00      	nop
    }
  }
}
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d108      	bne.n	8004d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d6a:	e007      	b.n	8004d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	60da      	str	r2, [r3, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	3b10      	subs	r3, #16
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <DMA_CalcBaseAndBitshift+0x64>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	091b      	lsrs	r3, r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004da2:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <DMA_CalcBaseAndBitshift+0x68>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d909      	bls.n	8004dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8004dc8:	e007      	b.n	8004dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	aaaaaaab 	.word	0xaaaaaaab
 8004df0:	08008948 	.word	0x08008948

08004df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11f      	bne.n	8004e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d855      	bhi.n	8004ec0 <DMA_CheckFifoParam+0xcc>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <DMA_CheckFifoParam+0x28>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004ec1 	.word	0x08004ec1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d045      	beq.n	8004ec4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3c:	e042      	b.n	8004ec4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e46:	d13f      	bne.n	8004ec8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e03c      	b.n	8004ec8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d121      	bne.n	8004e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d836      	bhi.n	8004ecc <DMA_CheckFifoParam+0xd8>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <DMA_CheckFifoParam+0x70>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e7b 	.word	0x08004e7b
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004e8d 	.word	0x08004e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e02f      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d024      	beq.n	8004ed0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8a:	e021      	b.n	8004ed0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e94:	d11e      	bne.n	8004ed4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e9a:	e01b      	b.n	8004ed4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d902      	bls.n	8004ea8 <DMA_CheckFifoParam+0xb4>
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d003      	beq.n	8004eae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ea6:	e018      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004eac:	e015      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebe:	e00b      	b.n	8004ed8 <DMA_CheckFifoParam+0xe4>
      break;
 8004ec0:	bf00      	nop
 8004ec2:	e00a      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ec4:	bf00      	nop
 8004ec6:	e008      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ec8:	bf00      	nop
 8004eca:	e006      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ecc:	bf00      	nop
 8004ece:	e004      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;   
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ed8:	bf00      	nop
    }
  } 
  
  return status; 
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	; 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e16b      	b.n	80051dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f04:	2201      	movs	r2, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4013      	ands	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	f040 815a 	bne.w	80051d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d00b      	beq.n	8004f42 <HAL_GPIO_Init+0x5a>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d007      	beq.n	8004f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f36:	2b11      	cmp	r3, #17
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b12      	cmp	r3, #18
 8004f40:	d130      	bne.n	8004fa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f78:	2201      	movs	r2, #1
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 0201 	and.w	r2, r3, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0xfc>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b12      	cmp	r3, #18
 8004fe2:	d123      	bne.n	800502c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	08da      	lsrs	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3208      	adds	r2, #8
 8004fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	220f      	movs	r2, #15
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	08da      	lsrs	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	69b9      	ldr	r1, [r7, #24]
 8005028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2203      	movs	r2, #3
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80b4 	beq.w	80051d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	4b5f      	ldr	r3, [pc, #380]	; (80051f0 <HAL_GPIO_Init+0x308>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	4a5e      	ldr	r2, [pc, #376]	; (80051f0 <HAL_GPIO_Init+0x308>)
 8005078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800507c:	6453      	str	r3, [r2, #68]	; 0x44
 800507e:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <HAL_GPIO_Init+0x308>)
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800508a:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <HAL_GPIO_Init+0x30c>)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	3302      	adds	r3, #2
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	220f      	movs	r2, #15
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a51      	ldr	r2, [pc, #324]	; (80051f8 <HAL_GPIO_Init+0x310>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <HAL_GPIO_Init+0x226>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a50      	ldr	r2, [pc, #320]	; (80051fc <HAL_GPIO_Init+0x314>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d025      	beq.n	800510a <HAL_GPIO_Init+0x222>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a4f      	ldr	r2, [pc, #316]	; (8005200 <HAL_GPIO_Init+0x318>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01f      	beq.n	8005106 <HAL_GPIO_Init+0x21e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <HAL_GPIO_Init+0x31c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d019      	beq.n	8005102 <HAL_GPIO_Init+0x21a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a4d      	ldr	r2, [pc, #308]	; (8005208 <HAL_GPIO_Init+0x320>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_GPIO_Init+0x216>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a4c      	ldr	r2, [pc, #304]	; (800520c <HAL_GPIO_Init+0x324>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00d      	beq.n	80050fa <HAL_GPIO_Init+0x212>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_GPIO_Init+0x328>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <HAL_GPIO_Init+0x20e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <HAL_GPIO_Init+0x32c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d101      	bne.n	80050f2 <HAL_GPIO_Init+0x20a>
 80050ee:	2307      	movs	r3, #7
 80050f0:	e00e      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050f2:	2308      	movs	r3, #8
 80050f4:	e00c      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050f6:	2306      	movs	r3, #6
 80050f8:	e00a      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050fa:	2305      	movs	r3, #5
 80050fc:	e008      	b.n	8005110 <HAL_GPIO_Init+0x228>
 80050fe:	2304      	movs	r3, #4
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x228>
 8005102:	2303      	movs	r3, #3
 8005104:	e004      	b.n	8005110 <HAL_GPIO_Init+0x228>
 8005106:	2302      	movs	r3, #2
 8005108:	e002      	b.n	8005110 <HAL_GPIO_Init+0x228>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_GPIO_Init+0x228>
 800510e:	2300      	movs	r3, #0
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	f002 0203 	and.w	r2, r2, #3
 8005116:	0092      	lsls	r2, r2, #2
 8005118:	4093      	lsls	r3, r2
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005120:	4934      	ldr	r1, [pc, #208]	; (80051f4 <HAL_GPIO_Init+0x30c>)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	3302      	adds	r3, #2
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800512e:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <HAL_GPIO_Init+0x330>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005152:	4a31      	ldr	r2, [pc, #196]	; (8005218 <HAL_GPIO_Init+0x330>)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005158:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <HAL_GPIO_Init+0x330>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800517c:	4a26      	ldr	r2, [pc, #152]	; (8005218 <HAL_GPIO_Init+0x330>)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005182:	4b25      	ldr	r3, [pc, #148]	; (8005218 <HAL_GPIO_Init+0x330>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <HAL_GPIO_Init+0x330>)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_GPIO_Init+0x330>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_GPIO_Init+0x330>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	f67f ae90 	bls.w	8004f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e4:	bf00      	nop
 80051e6:	3724      	adds	r7, #36	; 0x24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40020000 	.word	0x40020000
 80051fc:	40020400 	.word	0x40020400
 8005200:	40020800 	.word	0x40020800
 8005204:	40020c00 	.word	0x40020c00
 8005208:	40021000 	.word	0x40021000
 800520c:	40021400 	.word	0x40021400
 8005210:	40021800 	.word	0x40021800
 8005214:	40021c00 	.word	0x40021c00
 8005218:	40013c00 	.word	0x40013c00

0800521c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
 8005228:	4613      	mov	r3, r2
 800522a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800522c:	787b      	ldrb	r3, [r7, #1]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005238:	e003      	b.n	8005242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	041a      	lsls	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005266:	4a05      	ldr	r2, [pc, #20]	; (800527c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fc0e 	bl	8003a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40013c00 	.word	0x40013c00

08005280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e11f      	b.n	80054d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fe f8be 	bl	8003428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052e4:	f001 fb68 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4a7b      	ldr	r2, [pc, #492]	; (80054dc <HAL_I2C_Init+0x25c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d807      	bhi.n	8005304 <HAL_I2C_Init+0x84>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a7a      	ldr	r2, [pc, #488]	; (80054e0 <HAL_I2C_Init+0x260>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e006      	b.n	8005312 <HAL_I2C_Init+0x92>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a77      	ldr	r2, [pc, #476]	; (80054e4 <HAL_I2C_Init+0x264>)
 8005308:	4293      	cmp	r3, r2
 800530a:	bf94      	ite	ls
 800530c:	2301      	movls	r3, #1
 800530e:	2300      	movhi	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0db      	b.n	80054d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a72      	ldr	r2, [pc, #456]	; (80054e8 <HAL_I2C_Init+0x268>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	0c9b      	lsrs	r3, r3, #18
 8005324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a64      	ldr	r2, [pc, #400]	; (80054dc <HAL_I2C_Init+0x25c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d802      	bhi.n	8005354 <HAL_I2C_Init+0xd4>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3301      	adds	r3, #1
 8005352:	e009      	b.n	8005368 <HAL_I2C_Init+0xe8>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	4a63      	ldr	r2, [pc, #396]	; (80054ec <HAL_I2C_Init+0x26c>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	3301      	adds	r3, #1
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	430b      	orrs	r3, r1
 800536e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800537a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4956      	ldr	r1, [pc, #344]	; (80054dc <HAL_I2C_Init+0x25c>)
 8005384:	428b      	cmp	r3, r1
 8005386:	d80d      	bhi.n	80053a4 <HAL_I2C_Init+0x124>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1e59      	subs	r1, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	fbb1 f3f3 	udiv	r3, r1, r3
 8005396:	3301      	adds	r3, #1
 8005398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539c:	2b04      	cmp	r3, #4
 800539e:	bf38      	it	cc
 80053a0:	2304      	movcc	r3, #4
 80053a2:	e04f      	b.n	8005444 <HAL_I2C_Init+0x1c4>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d111      	bne.n	80053d0 <HAL_I2C_Init+0x150>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1e58      	subs	r0, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	440b      	add	r3, r1
 80053ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80053be:	3301      	adds	r3, #1
 80053c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	e012      	b.n	80053f6 <HAL_I2C_Init+0x176>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1e58      	subs	r0, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6859      	ldr	r1, [r3, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	0099      	lsls	r1, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_I2C_Init+0x17e>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e022      	b.n	8005444 <HAL_I2C_Init+0x1c4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <HAL_I2C_Init+0x1a4>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1e58      	subs	r0, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	440b      	add	r3, r1
 8005414:	fbb0 f3f3 	udiv	r3, r0, r3
 8005418:	3301      	adds	r3, #1
 800541a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	e00f      	b.n	8005444 <HAL_I2C_Init+0x1c4>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1e58      	subs	r0, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	0099      	lsls	r1, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	6809      	ldr	r1, [r1, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6911      	ldr	r1, [r2, #16]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68d2      	ldr	r2, [r2, #12]
 800547e:	4311      	orrs	r1, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	430b      	orrs	r3, r1
 8005486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	000186a0 	.word	0x000186a0
 80054e0:	001e847f 	.word	0x001e847f
 80054e4:	003d08ff 	.word	0x003d08ff
 80054e8:	431bde83 	.word	0x431bde83
 80054ec:	10624dd3 	.word	0x10624dd3

080054f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	461a      	mov	r2, r3
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
 8005500:	4613      	mov	r3, r2
 8005502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005504:	f7fe fc4e 	bl	8003da4 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	f040 80e0 	bne.w	80056d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2319      	movs	r3, #25
 800551e:	2201      	movs	r2, #1
 8005520:	4970      	ldr	r1, [pc, #448]	; (80056e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fc56 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	e0d3      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2C_Master_Transmit+0x50>
 800553c:	2302      	movs	r3, #2
 800553e:	e0cc      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d007      	beq.n	8005566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2221      	movs	r2, #33	; 0x21
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2210      	movs	r2, #16
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	893a      	ldrh	r2, [r7, #8]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a50      	ldr	r2, [pc, #320]	; (80056e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055a8:	8979      	ldrh	r1, [r7, #10]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fac2 	bl	8005b38 <I2C_MasterRequestWrite>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e08d      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055d4:	e066      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	6a39      	ldr	r1, [r7, #32]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fcd0 	bl	8005f80 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d107      	bne.n	80055fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06b      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_I2C_Master_Transmit+0x188>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	6a39      	ldr	r1, [r7, #32]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fcc0 	bl	8006002 <I2C_WaitOnBTFFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b04      	cmp	r3, #4
 800568e:	d107      	bne.n	80056a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e01a      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d194      	bne.n	80055d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	00100002 	.word	0x00100002
 80056e8:	ffff0000 	.word	0xffff0000

080056ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	461a      	mov	r2, r3
 80056f8:	460b      	mov	r3, r1
 80056fa:	817b      	strh	r3, [r7, #10]
 80056fc:	4613      	mov	r3, r2
 80056fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7fe fb50 	bl	8003da4 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 820b 	bne.w	8005b2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2319      	movs	r3, #25
 800571a:	2201      	movs	r2, #1
 800571c:	497c      	ldr	r1, [pc, #496]	; (8005910 <HAL_I2C_Master_Receive+0x224>)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fb58 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	e1fe      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_I2C_Master_Receive+0x50>
 8005738:	2302      	movs	r3, #2
 800573a:	e1f7      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d007      	beq.n	8005762 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2222      	movs	r2, #34	; 0x22
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2210      	movs	r2, #16
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	893a      	ldrh	r2, [r7, #8]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a5c      	ldr	r2, [pc, #368]	; (8005914 <HAL_I2C_Master_Receive+0x228>)
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a4:	8979      	ldrh	r1, [r7, #10]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fa46 	bl	8005c3c <I2C_MasterRequestRead>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e1b8      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	623b      	str	r3, [r7, #32]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e18c      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d11b      	bne.n	800582a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e16c      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582e:	2b02      	cmp	r3, #2
 8005830:	d11b      	bne.n	800586a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	e14c      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005890:	e138      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	2b03      	cmp	r3, #3
 8005898:	f200 80f1 	bhi.w	8005a7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d123      	bne.n	80058ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fbeb 	bl	8006084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e139      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ea:	e10b      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d14e      	bne.n	8005992 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	4906      	ldr	r1, [pc, #24]	; (8005918 <HAL_I2C_Master_Receive+0x22c>)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa68 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e10e      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
 800590e:	bf00      	nop
 8005910:	00100002 	.word	0x00100002
 8005914:	ffff0000 	.word	0xffff0000
 8005918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005990:	e0b8      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2200      	movs	r2, #0
 800599a:	4966      	ldr	r1, [pc, #408]	; (8005b34 <HAL_I2C_Master_Receive+0x448>)
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa19 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0bf      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2200      	movs	r2, #0
 80059f6:	494f      	ldr	r1, [pc, #316]	; (8005b34 <HAL_I2C_Master_Receive+0x448>)
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9eb 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e091      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a7c:	e042      	b.n	8005b04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fafe 	bl	8006084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e04c      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d118      	bne.n	8005b04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f47f aec2 	bne.w	8005892 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3728      	adds	r7, #40	; 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00010004 	.word	0x00010004

08005b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	460b      	mov	r3, r1
 8005b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d006      	beq.n	8005b62 <I2C_MasterRequestWrite+0x2a>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d003      	beq.n	8005b62 <I2C_MasterRequestWrite+0x2a>
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b60:	d108      	bne.n	8005b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e00b      	b.n	8005b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	2b12      	cmp	r3, #18
 8005b7a:	d107      	bne.n	8005b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f91b 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00c      	beq.n	8005bbe <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e035      	b.n	8005c2a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc6:	d108      	bne.n	8005bda <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bd6:	611a      	str	r2, [r3, #16]
 8005bd8:	e01b      	b.n	8005c12 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	11db      	asrs	r3, r3, #7
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0306 	and.w	r3, r3, #6
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f063 030f 	orn	r3, r3, #15
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	490f      	ldr	r1, [pc, #60]	; (8005c34 <I2C_MasterRequestWrite+0xfc>)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f942 	bl	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e010      	b.n	8005c2a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c08:	897b      	ldrh	r3, [r7, #10]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <I2C_MasterRequestWrite+0x100>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f932 	bl	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	00010008 	.word	0x00010008
 8005c38:	00010002 	.word	0x00010002

08005c3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d006      	beq.n	8005c76 <I2C_MasterRequestRead+0x3a>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d003      	beq.n	8005c76 <I2C_MasterRequestRead+0x3a>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c74:	d108      	bne.n	8005c88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e00b      	b.n	8005ca0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	2b11      	cmp	r3, #17
 8005c8e:	d107      	bne.n	8005ca0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f891 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e078      	b.n	8005dc4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cda:	d108      	bne.n	8005cee <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cdc:	897b      	ldrh	r3, [r7, #10]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]
 8005cec:	e05e      	b.n	8005dac <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cee:	897b      	ldrh	r3, [r7, #10]
 8005cf0:	11db      	asrs	r3, r3, #7
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0306 	and.w	r3, r3, #6
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f063 030f 	orn	r3, r3, #15
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4930      	ldr	r1, [pc, #192]	; (8005dcc <I2C_MasterRequestRead+0x190>)
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f8b8 	bl	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e053      	b.n	8005dc4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4929      	ldr	r1, [pc, #164]	; (8005dd0 <I2C_MasterRequestRead+0x194>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f8a8 	bl	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e043      	b.n	8005dc4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d60:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f830 	bl	8005dd4 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e017      	b.n	8005dc4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d94:	897b      	ldrh	r3, [r7, #10]
 8005d96:	11db      	asrs	r3, r3, #7
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 0306 	and.w	r3, r3, #6
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f063 030e 	orn	r3, r3, #14
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4907      	ldr	r1, [pc, #28]	; (8005dd0 <I2C_MasterRequestRead+0x194>)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f865 	bl	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	00010008 	.word	0x00010008
 8005dd0:	00010002 	.word	0x00010002

08005dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de4:	e025      	b.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d021      	beq.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fd ffd9 	bl	8003da4 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d116      	bne.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e023      	b.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10d      	bne.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	43da      	mvns	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	e00c      	b.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	43da      	mvns	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4013      	ands	r3, r2
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d0b6      	beq.n	8005de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e90:	e051      	b.n	8005f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d123      	bne.n	8005eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f043 0204 	orr.w	r2, r3, #4
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e046      	b.n	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d021      	beq.n	8005f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef2:	f7fd ff57 	bl	8003da4 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d116      	bne.n	8005f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e020      	b.n	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d10c      	bne.n	8005f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e00b      	b.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	43da      	mvns	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4013      	ands	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d18d      	bne.n	8005e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8c:	e02d      	b.n	8005fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f8ce 	bl	8006130 <I2C_IsAcknowledgeFailed>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e02d      	b.n	8005ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d021      	beq.n	8005fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fd fefd 	bl	8003da4 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d116      	bne.n	8005fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e007      	b.n	8005ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d1ca      	bne.n	8005f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800600e:	e02d      	b.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f88d 	bl	8006130 <I2C_IsAcknowledgeFailed>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e02d      	b.n	800607c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d021      	beq.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fd febc 	bl	8003da4 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d1ca      	bne.n	8006010 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006090:	e042      	b.n	8006118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b10      	cmp	r3, #16
 800609e:	d119      	bne.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0210 	mvn.w	r2, #16
 80060a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e029      	b.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d4:	f7fd fe66 	bl	8003da4 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d302      	bcc.n	80060ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d116      	bne.n	8006118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e007      	b.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d1b5      	bne.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006146:	d11b      	bne.n	8006180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	f043 0204 	orr.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e25b      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d075      	beq.n	800629a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ae:	4ba3      	ldr	r3, [pc, #652]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d00c      	beq.n	80061d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ba:	4ba0      	ldr	r3, [pc, #640]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d112      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c6:	4b9d      	ldr	r3, [pc, #628]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d2:	d10b      	bne.n	80061ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	4b99      	ldr	r3, [pc, #612]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05b      	beq.n	8006298 <HAL_RCC_OscConfig+0x108>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d157      	bne.n	8006298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e236      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d106      	bne.n	8006204 <HAL_RCC_OscConfig+0x74>
 80061f6:	4b91      	ldr	r3, [pc, #580]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a90      	ldr	r2, [pc, #576]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e01d      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b8b      	ldr	r3, [pc, #556]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a8a      	ldr	r2, [pc, #552]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b88      	ldr	r3, [pc, #544]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a87      	ldr	r2, [pc, #540]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e00b      	b.n	8006240 <HAL_RCC_OscConfig+0xb0>
 8006228:	4b84      	ldr	r3, [pc, #528]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a83      	ldr	r2, [pc, #524]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4b81      	ldr	r3, [pc, #516]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a80      	ldr	r2, [pc, #512]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd fdac 	bl	8003da4 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006250:	f7fd fda8 	bl	8003da4 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e1fb      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	4b76      	ldr	r3, [pc, #472]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0xc0>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fd fd98 	bl	8003da4 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006278:	f7fd fd94 	bl	8003da4 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1e7      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628a:	4b6c      	ldr	r3, [pc, #432]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0xe8>
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d063      	beq.n	800636e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062a6:	4b65      	ldr	r3, [pc, #404]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062b2:	4b62      	ldr	r3, [pc, #392]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d11c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062be:	4b5f      	ldr	r3, [pc, #380]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d116      	bne.n	80062f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	4b5c      	ldr	r3, [pc, #368]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCC_OscConfig+0x152>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1bb      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e2:	4b56      	ldr	r3, [pc, #344]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4952      	ldr	r1, [pc, #328]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f6:	e03a      	b.n	800636e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d020      	beq.n	8006342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006300:	4b4f      	ldr	r3, [pc, #316]	; (8006440 <HAL_RCC_OscConfig+0x2b0>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fd fd4d 	bl	8003da4 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800630e:	f7fd fd49 	bl	8003da4 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e19c      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006320:	4b46      	ldr	r3, [pc, #280]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	4b43      	ldr	r3, [pc, #268]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4940      	ldr	r1, [pc, #256]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	e015      	b.n	800636e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006342:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <HAL_RCC_OscConfig+0x2b0>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fd fd2c 	bl	8003da4 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006350:	f7fd fd28 	bl	8003da4 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e17b      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d030      	beq.n	80063dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006382:	4b30      	ldr	r3, [pc, #192]	; (8006444 <HAL_RCC_OscConfig+0x2b4>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fd fd0c 	bl	8003da4 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006390:	f7fd fd08 	bl	8003da4 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e15b      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a2:	4b26      	ldr	r3, [pc, #152]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0x200>
 80063ae:	e015      	b.n	80063dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b0:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x2b4>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b6:	f7fd fcf5 	bl	8003da4 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063be:	f7fd fcf1 	bl	8003da4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e144      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d0:	4b1a      	ldr	r3, [pc, #104]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80063d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a0 	beq.w	800652a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	4b0f      	ldr	r3, [pc, #60]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	4a0e      	ldr	r2, [pc, #56]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 8006404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006408:	6413      	str	r3, [r2, #64]	; 0x40
 800640a:	4b0c      	ldr	r3, [pc, #48]	; (800643c <HAL_RCC_OscConfig+0x2ac>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_RCC_OscConfig+0x2b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d121      	bne.n	800646a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006426:	4b08      	ldr	r3, [pc, #32]	; (8006448 <HAL_RCC_OscConfig+0x2b8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a07      	ldr	r2, [pc, #28]	; (8006448 <HAL_RCC_OscConfig+0x2b8>)
 800642c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006432:	f7fd fcb7 	bl	8003da4 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006438:	e011      	b.n	800645e <HAL_RCC_OscConfig+0x2ce>
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800
 8006440:	42470000 	.word	0x42470000
 8006444:	42470e80 	.word	0x42470e80
 8006448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644c:	f7fd fcaa 	bl	8003da4 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e0fd      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645e:	4b81      	ldr	r3, [pc, #516]	; (8006664 <HAL_RCC_OscConfig+0x4d4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d106      	bne.n	8006480 <HAL_RCC_OscConfig+0x2f0>
 8006472:	4b7d      	ldr	r3, [pc, #500]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	4a7c      	ldr	r2, [pc, #496]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6713      	str	r3, [r2, #112]	; 0x70
 800647e:	e01c      	b.n	80064ba <HAL_RCC_OscConfig+0x32a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b05      	cmp	r3, #5
 8006486:	d10c      	bne.n	80064a2 <HAL_RCC_OscConfig+0x312>
 8006488:	4b77      	ldr	r3, [pc, #476]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a76      	ldr	r2, [pc, #472]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	4b74      	ldr	r3, [pc, #464]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a73      	ldr	r2, [pc, #460]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
 80064a0:	e00b      	b.n	80064ba <HAL_RCC_OscConfig+0x32a>
 80064a2:	4b71      	ldr	r3, [pc, #452]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a70      	ldr	r2, [pc, #448]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	6713      	str	r3, [r2, #112]	; 0x70
 80064ae:	4b6e      	ldr	r3, [pc, #440]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	4a6d      	ldr	r2, [pc, #436]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80064b4:	f023 0304 	bic.w	r3, r3, #4
 80064b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d015      	beq.n	80064ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c2:	f7fd fc6f 	bl	8003da4 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fd fc6b 	bl	8003da4 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0bc      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ee      	beq.n	80064ca <HAL_RCC_OscConfig+0x33a>
 80064ec:	e014      	b.n	8006518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ee:	f7fd fc59 	bl	8003da4 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f4:	e00a      	b.n	800650c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f6:	f7fd fc55 	bl	8003da4 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f241 3288 	movw	r2, #5000	; 0x1388
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e0a6      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800650c:	4b56      	ldr	r3, [pc, #344]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ee      	bne.n	80064f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d105      	bne.n	800652a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800651e:	4b52      	ldr	r3, [pc, #328]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	4a51      	ldr	r2, [pc, #324]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8092 	beq.w	8006658 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006534:	4b4c      	ldr	r3, [pc, #304]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 030c 	and.w	r3, r3, #12
 800653c:	2b08      	cmp	r3, #8
 800653e:	d05c      	beq.n	80065fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d141      	bne.n	80065cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006548:	4b48      	ldr	r3, [pc, #288]	; (800666c <HAL_RCC_OscConfig+0x4dc>)
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654e:	f7fd fc29 	bl	8003da4 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006556:	f7fd fc25 	bl	8003da4 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e078      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006568:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f0      	bne.n	8006556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	019b      	lsls	r3, r3, #6
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	3b01      	subs	r3, #1
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	061b      	lsls	r3, r3, #24
 8006598:	4933      	ldr	r1, [pc, #204]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 800659a:	4313      	orrs	r3, r2
 800659c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCC_OscConfig+0x4dc>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fd fbfe 	bl	8003da4 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fd fbfa 	bl	8003da4 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e04d      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065be:	4b2a      	ldr	r3, [pc, #168]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0x41c>
 80065ca:	e045      	b.n	8006658 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b27      	ldr	r3, [pc, #156]	; (800666c <HAL_RCC_OscConfig+0x4dc>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fd fbe7 	bl	8003da4 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065da:	f7fd fbe3 	bl	8003da4 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e036      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ec:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x44a>
 80065f8:	e02e      	b.n	8006658 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e029      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <HAL_RCC_OscConfig+0x4d8>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	429a      	cmp	r2, r3
 8006618:	d11c      	bne.n	8006654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006624:	429a      	cmp	r2, r3
 8006626:	d115      	bne.n	8006654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800662e:	4013      	ands	r3, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006634:	4293      	cmp	r3, r2
 8006636:	d10d      	bne.n	8006654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d106      	bne.n	8006654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40007000 	.word	0x40007000
 8006668:	40023800 	.word	0x40023800
 800666c:	42470060 	.word	0x42470060

08006670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0cc      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006684:	4b68      	ldr	r3, [pc, #416]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90c      	bls.n	80066ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006692:	4b65      	ldr	r3, [pc, #404]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b63      	ldr	r3, [pc, #396]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0b8      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4a58      	ldr	r2, [pc, #352]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066dc:	4b53      	ldr	r3, [pc, #332]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4a52      	ldr	r2, [pc, #328]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e8:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	494d      	ldr	r1, [pc, #308]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d044      	beq.n	8006790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d119      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d003      	beq.n	800672e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672a:	2b03      	cmp	r3, #3
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672e:	4b3f      	ldr	r3, [pc, #252]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e06f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673e:	4b3b      	ldr	r3, [pc, #236]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e067      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674e:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4934      	ldr	r1, [pc, #208]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006760:	f7fd fb20 	bl	8003da4 <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	e00a      	b.n	800677e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006768:	f7fd fb1c 	bl	8003da4 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	; 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e04f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	4b2b      	ldr	r3, [pc, #172]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 020c 	and.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	429a      	cmp	r2, r3
 800678e:	d1eb      	bne.n	8006768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20c      	bcs.n	80067b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b22      	ldr	r3, [pc, #136]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b20      	ldr	r3, [pc, #128]	; (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e032      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c4:	4b19      	ldr	r3, [pc, #100]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4916      	ldr	r1, [pc, #88]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	490e      	ldr	r1, [pc, #56]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067f6:	f000 f821 	bl	800683c <HAL_RCC_GetSysClockFreq>
 80067fa:	4601      	mov	r1, r0
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006808:	5cd3      	ldrb	r3, [r2, r3]
 800680a:	fa21 f303 	lsr.w	r3, r1, r3
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd fa80 	bl	8003d1c <HAL_InitTick>

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40023c00 	.word	0x40023c00
 800682c:	40023800 	.word	0x40023800
 8006830:	08008930 	.word	0x08008930
 8006834:	20000000 	.word	0x20000000
 8006838:	20000004 	.word	0x20000004

0800683c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800683c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	2300      	movs	r3, #0
 800684c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006852:	4b50      	ldr	r3, [pc, #320]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 030c 	and.w	r3, r3, #12
 800685a:	2b04      	cmp	r3, #4
 800685c:	d007      	beq.n	800686e <HAL_RCC_GetSysClockFreq+0x32>
 800685e:	2b08      	cmp	r3, #8
 8006860:	d008      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0x38>
 8006862:	2b00      	cmp	r3, #0
 8006864:	f040 808d 	bne.w	8006982 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006868:	4b4b      	ldr	r3, [pc, #300]	; (8006998 <HAL_RCC_GetSysClockFreq+0x15c>)
 800686a:	60bb      	str	r3, [r7, #8]
       break;
 800686c:	e08c      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800686e:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_RCC_GetSysClockFreq+0x160>)
 8006870:	60bb      	str	r3, [r7, #8]
      break;
 8006872:	e089      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006874:	4b47      	ldr	r3, [pc, #284]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800687c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800687e:	4b45      	ldr	r3, [pc, #276]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d023      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800688a:	4b42      	ldr	r3, [pc, #264]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	099b      	lsrs	r3, r3, #6
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	ea03 0501 	and.w	r5, r3, r1
 80068a0:	ea04 0602 	and.w	r6, r4, r2
 80068a4:	4a3d      	ldr	r2, [pc, #244]	; (800699c <HAL_RCC_GetSysClockFreq+0x160>)
 80068a6:	fb02 f106 	mul.w	r1, r2, r6
 80068aa:	2200      	movs	r2, #0
 80068ac:	fb02 f205 	mul.w	r2, r2, r5
 80068b0:	440a      	add	r2, r1
 80068b2:	493a      	ldr	r1, [pc, #232]	; (800699c <HAL_RCC_GetSysClockFreq+0x160>)
 80068b4:	fba5 0101 	umull	r0, r1, r5, r1
 80068b8:	1853      	adds	r3, r2, r1
 80068ba:	4619      	mov	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f04f 0400 	mov.w	r4, #0
 80068c2:	461a      	mov	r2, r3
 80068c4:	4623      	mov	r3, r4
 80068c6:	f7fa f9ff 	bl	8000cc8 <__aeabi_uldivmod>
 80068ca:	4603      	mov	r3, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e049      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	f04f 0400 	mov.w	r4, #0
 80068dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	ea03 0501 	and.w	r5, r3, r1
 80068e8:	ea04 0602 	and.w	r6, r4, r2
 80068ec:	4629      	mov	r1, r5
 80068ee:	4632      	mov	r2, r6
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	f04f 0400 	mov.w	r4, #0
 80068f8:	0154      	lsls	r4, r2, #5
 80068fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068fe:	014b      	lsls	r3, r1, #5
 8006900:	4619      	mov	r1, r3
 8006902:	4622      	mov	r2, r4
 8006904:	1b49      	subs	r1, r1, r5
 8006906:	eb62 0206 	sbc.w	r2, r2, r6
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	f04f 0400 	mov.w	r4, #0
 8006912:	0194      	lsls	r4, r2, #6
 8006914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006918:	018b      	lsls	r3, r1, #6
 800691a:	1a5b      	subs	r3, r3, r1
 800691c:	eb64 0402 	sbc.w	r4, r4, r2
 8006920:	f04f 0100 	mov.w	r1, #0
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	00e2      	lsls	r2, r4, #3
 800692a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800692e:	00d9      	lsls	r1, r3, #3
 8006930:	460b      	mov	r3, r1
 8006932:	4614      	mov	r4, r2
 8006934:	195b      	adds	r3, r3, r5
 8006936:	eb44 0406 	adc.w	r4, r4, r6
 800693a:	f04f 0100 	mov.w	r1, #0
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	02a2      	lsls	r2, r4, #10
 8006944:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006948:	0299      	lsls	r1, r3, #10
 800694a:	460b      	mov	r3, r1
 800694c:	4614      	mov	r4, r2
 800694e:	4618      	mov	r0, r3
 8006950:	4621      	mov	r1, r4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f04f 0400 	mov.w	r4, #0
 8006958:	461a      	mov	r2, r3
 800695a:	4623      	mov	r3, r4
 800695c:	f7fa f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8006960:	4603      	mov	r3, r0
 8006962:	460c      	mov	r4, r1
 8006964:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_GetSysClockFreq+0x158>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	0c1b      	lsrs	r3, r3, #16
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	3301      	adds	r3, #1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	60bb      	str	r3, [r7, #8]
      break;
 8006980:	e002      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006984:	60bb      	str	r3, [r7, #8]
      break;
 8006986:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006988:	68bb      	ldr	r3, [r7, #8]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	00b71b00 	.word	0x00b71b00

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000000 	.word	0x20000000

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4601      	mov	r1, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4a03      	ldr	r2, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5cd3      	ldrb	r3, [r2, r3]
 80069d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	08008940 	.word	0x08008940

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4601      	mov	r1, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4a03      	ldr	r2, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5cd3      	ldrb	r3, [r2, r3]
 80069f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	08008940 	.word	0x08008940

08006a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e056      	b.n	8006ac8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fc fd75 	bl	8003524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	ea42 0103 	orr.w	r1, r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	0c1b      	lsrs	r3, r3, #16
 8006a98:	f003 0104 	and.w	r1, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e01d      	b.n	8006b1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fc fe26 	bl	8003748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f000 fb56 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b06      	cmp	r3, #6
 8006b4e:	d007      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e01d      	b.n	8006bbc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fc fd8b 	bl	80036b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f000 fb07 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fd42 	bl	8007660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIM_PWM_Start+0x74>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIM_PWM_Start+0x2c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <HAL_TIM_PWM_Start+0x78>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_PWM_Start+0x30>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x32>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	d007      	beq.n	8006c2c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e083      	b.n	8006d5c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fc fca3 	bl	80035b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f000 fa93 	bl	80071c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ce0:	f023 030c 	bic.w	r3, r3, #12
 8006ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	011a      	lsls	r2, r3, #4
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	031b      	lsls	r3, r3, #12
 8006d10:	4313      	orrs	r3, r2
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	4313      	orrs	r3, r2
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_TIM_Encoder_Start+0x16>
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d008      	beq.n	8006d8a <HAL_TIM_Encoder_Start+0x26>
 8006d78:	e00f      	b.n	8006d9a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fc6c 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006d88:	e016      	b.n	8006db8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2104      	movs	r1, #4
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fc64 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006d98:	e00e      	b.n	8006db8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fc5c 	bl	8007660 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2201      	movs	r2, #1
 8006dae:	2104      	movs	r1, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fc55 	bl	8007660 <TIM_CCxChannelCmd>
      break;
 8006db6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d122      	bne.n	8006e2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d11b      	bne.n	8006e2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f06f 0202 	mvn.w	r2, #2
 8006dfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f9b5 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006e1a:	e005      	b.n	8006e28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f9a7 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f9b8 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d122      	bne.n	8006e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d11b      	bne.n	8006e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f06f 0204 	mvn.w	r2, #4
 8006e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f98b 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006e6e:	e005      	b.n	8006e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f97d 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f98e 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d122      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d11b      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f06f 0208 	mvn.w	r2, #8
 8006ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f961 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e005      	b.n	8006ed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f953 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f964 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d122      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d11b      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f06f 0210 	mvn.w	r2, #16
 8006efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2208      	movs	r2, #8
 8006f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f937 	bl	8007184 <HAL_TIM_IC_CaptureCallback>
 8006f16:	e005      	b.n	8006f24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f929 	bl	8007170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f93a 	bl	8007198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10e      	bne.n	8006f56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d107      	bne.n	8006f56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0201 	mvn.w	r2, #1
 8006f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa f9c1 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d10e      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6e:	2b80      	cmp	r3, #128	; 0x80
 8006f70:	d107      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc1b 	bl	80077b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d10e      	bne.n	8006fae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d107      	bne.n	8006fae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8ff 	bl	80071ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d10e      	bne.n	8006fda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f06f 0220 	mvn.w	r2, #32
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fbe5 	bl	80077a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e0b4      	b.n	8007168 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b0c      	cmp	r3, #12
 8007012:	f200 809f 	bhi.w	8007154 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007051 	.word	0x08007051
 8007020:	08007155 	.word	0x08007155
 8007024:	08007155 	.word	0x08007155
 8007028:	08007155 	.word	0x08007155
 800702c:	08007091 	.word	0x08007091
 8007030:	08007155 	.word	0x08007155
 8007034:	08007155 	.word	0x08007155
 8007038:	08007155 	.word	0x08007155
 800703c:	080070d3 	.word	0x080070d3
 8007040:	08007155 	.word	0x08007155
 8007044:	08007155 	.word	0x08007155
 8007048:	08007155 	.word	0x08007155
 800704c:	08007113 	.word	0x08007113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f952 	bl	8007300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0208 	orr.w	r2, r2, #8
 800706a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0204 	bic.w	r2, r2, #4
 800707a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6999      	ldr	r1, [r3, #24]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	619a      	str	r2, [r3, #24]
      break;
 800708e:	e062      	b.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f9a2 	bl	80073e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6999      	ldr	r1, [r3, #24]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	021a      	lsls	r2, r3, #8
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	619a      	str	r2, [r3, #24]
      break;
 80070d0:	e041      	b.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f9f7 	bl	80074cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0208 	orr.w	r2, r2, #8
 80070ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0204 	bic.w	r2, r2, #4
 80070fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69d9      	ldr	r1, [r3, #28]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	61da      	str	r2, [r3, #28]
      break;
 8007110:	e021      	b.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fa4b 	bl	80075b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800712c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69d9      	ldr	r1, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	021a      	lsls	r2, r3, #8
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	61da      	str	r2, [r3, #28]
      break;
 8007152:	e000      	b.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007154:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a40      	ldr	r2, [pc, #256]	; (80072d4 <TIM_Base_SetConfig+0x114>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <TIM_Base_SetConfig+0x40>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d00f      	beq.n	8007200 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a3d      	ldr	r2, [pc, #244]	; (80072d8 <TIM_Base_SetConfig+0x118>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a3c      	ldr	r2, [pc, #240]	; (80072dc <TIM_Base_SetConfig+0x11c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3b      	ldr	r2, [pc, #236]	; (80072e0 <TIM_Base_SetConfig+0x120>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a3a      	ldr	r2, [pc, #232]	; (80072e4 <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d108      	bne.n	8007212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a2f      	ldr	r2, [pc, #188]	; (80072d4 <TIM_Base_SetConfig+0x114>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d02b      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007220:	d027      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2c      	ldr	r2, [pc, #176]	; (80072d8 <TIM_Base_SetConfig+0x118>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d023      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2b      	ldr	r2, [pc, #172]	; (80072dc <TIM_Base_SetConfig+0x11c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01f      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <TIM_Base_SetConfig+0x120>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01b      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <TIM_Base_SetConfig+0x124>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d017      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <TIM_Base_SetConfig+0x128>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <TIM_Base_SetConfig+0x12c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00f      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <TIM_Base_SetConfig+0x130>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a25      	ldr	r2, [pc, #148]	; (80072f4 <TIM_Base_SetConfig+0x134>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a24      	ldr	r2, [pc, #144]	; (80072f8 <TIM_Base_SetConfig+0x138>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a23      	ldr	r2, [pc, #140]	; (80072fc <TIM_Base_SetConfig+0x13c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d108      	bne.n	8007284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <TIM_Base_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_Base_SetConfig+0xf8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0c      	ldr	r2, [pc, #48]	; (80072e4 <TIM_Base_SetConfig+0x124>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d103      	bne.n	80072c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	615a      	str	r2, [r3, #20]
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800
 80072f4:	40001800 	.word	0x40001800
 80072f8:	40001c00 	.word	0x40001c00
 80072fc:	40002000 	.word	0x40002000

08007300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f023 0302 	bic.w	r3, r3, #2
 8007348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <TIM_OC1_SetConfig+0xd8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC1_SetConfig+0x64>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <TIM_OC1_SetConfig+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10c      	bne.n	800737e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0308 	bic.w	r3, r3, #8
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 0304 	bic.w	r3, r3, #4
 800737c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <TIM_OC1_SetConfig+0xd8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_OC1_SetConfig+0x8e>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a14      	ldr	r2, [pc, #80]	; (80073dc <TIM_OC1_SetConfig+0xdc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d111      	bne.n	80073b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40010400 	.word	0x40010400

080073e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f023 0210 	bic.w	r2, r3, #16
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f023 0320 	bic.w	r3, r3, #32
 800742a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <TIM_OC2_SetConfig+0xe4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC2_SetConfig+0x68>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <TIM_OC2_SetConfig+0xe8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d10d      	bne.n	8007464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a17      	ldr	r2, [pc, #92]	; (80074c4 <TIM_OC2_SetConfig+0xe4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_OC2_SetConfig+0x94>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a16      	ldr	r2, [pc, #88]	; (80074c8 <TIM_OC2_SetConfig+0xe8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d113      	bne.n	800749c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800747a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40010400 	.word	0x40010400

080074cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a21      	ldr	r2, [pc, #132]	; (80075ac <TIM_OC3_SetConfig+0xe0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC3_SetConfig+0x66>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a20      	ldr	r2, [pc, #128]	; (80075b0 <TIM_OC3_SetConfig+0xe4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10d      	bne.n	800754e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a16      	ldr	r2, [pc, #88]	; (80075ac <TIM_OC3_SetConfig+0xe0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d003      	beq.n	800755e <TIM_OC3_SetConfig+0x92>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <TIM_OC3_SetConfig+0xe4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d113      	bne.n	8007586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40010400 	.word	0x40010400

080075b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	031b      	lsls	r3, r3, #12
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <TIM_OC4_SetConfig+0xa4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_OC4_SetConfig+0x68>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a11      	ldr	r2, [pc, #68]	; (800765c <TIM_OC4_SetConfig+0xa8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d109      	bne.n	8007630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	019b      	lsls	r3, r3, #6
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	621a      	str	r2, [r3, #32]
}
 800764a:	bf00      	nop
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40010400 	.word	0x40010400

08007660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	43db      	mvns	r3, r3
 8007682:	401a      	ands	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e05a      	b.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a21      	ldr	r2, [pc, #132]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007710:	d01d      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1d      	ldr	r2, [pc, #116]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1a      	ldr	r2, [pc, #104]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a18      	ldr	r2, [pc, #96]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a17      	ldr	r2, [pc, #92]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d10c      	bne.n	8007768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4313      	orrs	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40010400 	.word	0x40010400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40001800 	.word	0x40001800

080077a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e03f      	b.n	800785e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fc f896 	bl	8003924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2224      	movs	r2, #36	; 0x24
 80077fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f829 	bl	8007868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078aa:	f023 030c 	bic.w	r3, r3, #12
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	430b      	orrs	r3, r1
 80078b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d6:	f040 818b 	bne.w	8007bf0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4ac1      	ldr	r2, [pc, #772]	; (8007be4 <UART_SetConfig+0x37c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d005      	beq.n	80078f0 <UART_SetConfig+0x88>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4abf      	ldr	r2, [pc, #764]	; (8007be8 <UART_SetConfig+0x380>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	f040 80bd 	bne.w	8007a6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078f0:	f7ff f876 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 80078f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	461d      	mov	r5, r3
 80078fa:	f04f 0600 	mov.w	r6, #0
 80078fe:	46a8      	mov	r8, r5
 8007900:	46b1      	mov	r9, r6
 8007902:	eb18 0308 	adds.w	r3, r8, r8
 8007906:	eb49 0409 	adc.w	r4, r9, r9
 800790a:	4698      	mov	r8, r3
 800790c:	46a1      	mov	r9, r4
 800790e:	eb18 0805 	adds.w	r8, r8, r5
 8007912:	eb49 0906 	adc.w	r9, r9, r6
 8007916:	f04f 0100 	mov.w	r1, #0
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007922:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007926:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800792a:	4688      	mov	r8, r1
 800792c:	4691      	mov	r9, r2
 800792e:	eb18 0005 	adds.w	r0, r8, r5
 8007932:	eb49 0106 	adc.w	r1, r9, r6
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	461d      	mov	r5, r3
 800793c:	f04f 0600 	mov.w	r6, #0
 8007940:	196b      	adds	r3, r5, r5
 8007942:	eb46 0406 	adc.w	r4, r6, r6
 8007946:	461a      	mov	r2, r3
 8007948:	4623      	mov	r3, r4
 800794a:	f7f9 f9bd 	bl	8000cc8 <__aeabi_uldivmod>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	461a      	mov	r2, r3
 8007954:	4ba5      	ldr	r3, [pc, #660]	; (8007bec <UART_SetConfig+0x384>)
 8007956:	fba3 2302 	umull	r2, r3, r3, r2
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	461d      	mov	r5, r3
 8007964:	f04f 0600 	mov.w	r6, #0
 8007968:	46a9      	mov	r9, r5
 800796a:	46b2      	mov	sl, r6
 800796c:	eb19 0309 	adds.w	r3, r9, r9
 8007970:	eb4a 040a 	adc.w	r4, sl, sl
 8007974:	4699      	mov	r9, r3
 8007976:	46a2      	mov	sl, r4
 8007978:	eb19 0905 	adds.w	r9, r9, r5
 800797c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800798c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007994:	4689      	mov	r9, r1
 8007996:	4692      	mov	sl, r2
 8007998:	eb19 0005 	adds.w	r0, r9, r5
 800799c:	eb4a 0106 	adc.w	r1, sl, r6
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	461d      	mov	r5, r3
 80079a6:	f04f 0600 	mov.w	r6, #0
 80079aa:	196b      	adds	r3, r5, r5
 80079ac:	eb46 0406 	adc.w	r4, r6, r6
 80079b0:	461a      	mov	r2, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	f7f9 f988 	bl	8000cc8 <__aeabi_uldivmod>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	461a      	mov	r2, r3
 80079be:	4b8b      	ldr	r3, [pc, #556]	; (8007bec <UART_SetConfig+0x384>)
 80079c0:	fba3 1302 	umull	r1, r3, r3, r2
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	2164      	movs	r1, #100	; 0x64
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	3332      	adds	r3, #50	; 0x32
 80079d2:	4a86      	ldr	r2, [pc, #536]	; (8007bec <UART_SetConfig+0x384>)
 80079d4:	fba2 2303 	umull	r2, r3, r2, r3
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079e0:	4498      	add	r8, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	461d      	mov	r5, r3
 80079e6:	f04f 0600 	mov.w	r6, #0
 80079ea:	46a9      	mov	r9, r5
 80079ec:	46b2      	mov	sl, r6
 80079ee:	eb19 0309 	adds.w	r3, r9, r9
 80079f2:	eb4a 040a 	adc.w	r4, sl, sl
 80079f6:	4699      	mov	r9, r3
 80079f8:	46a2      	mov	sl, r4
 80079fa:	eb19 0905 	adds.w	r9, r9, r5
 80079fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a02:	f04f 0100 	mov.w	r1, #0
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a16:	4689      	mov	r9, r1
 8007a18:	4692      	mov	sl, r2
 8007a1a:	eb19 0005 	adds.w	r0, r9, r5
 8007a1e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	461d      	mov	r5, r3
 8007a28:	f04f 0600 	mov.w	r6, #0
 8007a2c:	196b      	adds	r3, r5, r5
 8007a2e:	eb46 0406 	adc.w	r4, r6, r6
 8007a32:	461a      	mov	r2, r3
 8007a34:	4623      	mov	r3, r4
 8007a36:	f7f9 f947 	bl	8000cc8 <__aeabi_uldivmod>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4b6a      	ldr	r3, [pc, #424]	; (8007bec <UART_SetConfig+0x384>)
 8007a42:	fba3 1302 	umull	r1, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2164      	movs	r1, #100	; 0x64
 8007a4a:	fb01 f303 	mul.w	r3, r1, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	3332      	adds	r3, #50	; 0x32
 8007a54:	4a65      	ldr	r2, [pc, #404]	; (8007bec <UART_SetConfig+0x384>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 0207 	and.w	r2, r3, #7
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4442      	add	r2, r8
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	e26f      	b.n	8007f4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a6a:	f7fe ffa5 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8007a6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	461d      	mov	r5, r3
 8007a74:	f04f 0600 	mov.w	r6, #0
 8007a78:	46a8      	mov	r8, r5
 8007a7a:	46b1      	mov	r9, r6
 8007a7c:	eb18 0308 	adds.w	r3, r8, r8
 8007a80:	eb49 0409 	adc.w	r4, r9, r9
 8007a84:	4698      	mov	r8, r3
 8007a86:	46a1      	mov	r9, r4
 8007a88:	eb18 0805 	adds.w	r8, r8, r5
 8007a8c:	eb49 0906 	adc.w	r9, r9, r6
 8007a90:	f04f 0100 	mov.w	r1, #0
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007aa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007aa4:	4688      	mov	r8, r1
 8007aa6:	4691      	mov	r9, r2
 8007aa8:	eb18 0005 	adds.w	r0, r8, r5
 8007aac:	eb49 0106 	adc.w	r1, r9, r6
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	f04f 0600 	mov.w	r6, #0
 8007aba:	196b      	adds	r3, r5, r5
 8007abc:	eb46 0406 	adc.w	r4, r6, r6
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	f7f9 f900 	bl	8000cc8 <__aeabi_uldivmod>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b47      	ldr	r3, [pc, #284]	; (8007bec <UART_SetConfig+0x384>)
 8007ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad4:	095b      	lsrs	r3, r3, #5
 8007ad6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	461d      	mov	r5, r3
 8007ade:	f04f 0600 	mov.w	r6, #0
 8007ae2:	46a9      	mov	r9, r5
 8007ae4:	46b2      	mov	sl, r6
 8007ae6:	eb19 0309 	adds.w	r3, r9, r9
 8007aea:	eb4a 040a 	adc.w	r4, sl, sl
 8007aee:	4699      	mov	r9, r3
 8007af0:	46a2      	mov	sl, r4
 8007af2:	eb19 0905 	adds.w	r9, r9, r5
 8007af6:	eb4a 0a06 	adc.w	sl, sl, r6
 8007afa:	f04f 0100 	mov.w	r1, #0
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b0e:	4689      	mov	r9, r1
 8007b10:	4692      	mov	sl, r2
 8007b12:	eb19 0005 	adds.w	r0, r9, r5
 8007b16:	eb4a 0106 	adc.w	r1, sl, r6
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	461d      	mov	r5, r3
 8007b20:	f04f 0600 	mov.w	r6, #0
 8007b24:	196b      	adds	r3, r5, r5
 8007b26:	eb46 0406 	adc.w	r4, r6, r6
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	f7f9 f8cb 	bl	8000cc8 <__aeabi_uldivmod>
 8007b32:	4603      	mov	r3, r0
 8007b34:	460c      	mov	r4, r1
 8007b36:	461a      	mov	r2, r3
 8007b38:	4b2c      	ldr	r3, [pc, #176]	; (8007bec <UART_SetConfig+0x384>)
 8007b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3e:	095b      	lsrs	r3, r3, #5
 8007b40:	2164      	movs	r1, #100	; 0x64
 8007b42:	fb01 f303 	mul.w	r3, r1, r3
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	3332      	adds	r3, #50	; 0x32
 8007b4c:	4a27      	ldr	r2, [pc, #156]	; (8007bec <UART_SetConfig+0x384>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	095b      	lsrs	r3, r3, #5
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b5a:	4498      	add	r8, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	461d      	mov	r5, r3
 8007b60:	f04f 0600 	mov.w	r6, #0
 8007b64:	46a9      	mov	r9, r5
 8007b66:	46b2      	mov	sl, r6
 8007b68:	eb19 0309 	adds.w	r3, r9, r9
 8007b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b70:	4699      	mov	r9, r3
 8007b72:	46a2      	mov	sl, r4
 8007b74:	eb19 0905 	adds.w	r9, r9, r5
 8007b78:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b90:	4689      	mov	r9, r1
 8007b92:	4692      	mov	sl, r2
 8007b94:	eb19 0005 	adds.w	r0, r9, r5
 8007b98:	eb4a 0106 	adc.w	r1, sl, r6
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	f04f 0600 	mov.w	r6, #0
 8007ba6:	196b      	adds	r3, r5, r5
 8007ba8:	eb46 0406 	adc.w	r4, r6, r6
 8007bac:	461a      	mov	r2, r3
 8007bae:	4623      	mov	r3, r4
 8007bb0:	f7f9 f88a 	bl	8000cc8 <__aeabi_uldivmod>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <UART_SetConfig+0x384>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	; 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	3332      	adds	r3, #50	; 0x32
 8007bce:	4a07      	ldr	r2, [pc, #28]	; (8007bec <UART_SetConfig+0x384>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 0207 	and.w	r2, r3, #7
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4442      	add	r2, r8
 8007be0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007be2:	e1b2      	b.n	8007f4a <UART_SetConfig+0x6e2>
 8007be4:	40011000 	.word	0x40011000
 8007be8:	40011400 	.word	0x40011400
 8007bec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4ad7      	ldr	r2, [pc, #860]	; (8007f54 <UART_SetConfig+0x6ec>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d005      	beq.n	8007c06 <UART_SetConfig+0x39e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4ad6      	ldr	r2, [pc, #856]	; (8007f58 <UART_SetConfig+0x6f0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f040 80d1 	bne.w	8007da8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c06:	f7fe feeb 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 8007c0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	469a      	mov	sl, r3
 8007c10:	f04f 0b00 	mov.w	fp, #0
 8007c14:	46d0      	mov	r8, sl
 8007c16:	46d9      	mov	r9, fp
 8007c18:	eb18 0308 	adds.w	r3, r8, r8
 8007c1c:	eb49 0409 	adc.w	r4, r9, r9
 8007c20:	4698      	mov	r8, r3
 8007c22:	46a1      	mov	r9, r4
 8007c24:	eb18 080a 	adds.w	r8, r8, sl
 8007c28:	eb49 090b 	adc.w	r9, r9, fp
 8007c2c:	f04f 0100 	mov.w	r1, #0
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c40:	4688      	mov	r8, r1
 8007c42:	4691      	mov	r9, r2
 8007c44:	eb1a 0508 	adds.w	r5, sl, r8
 8007c48:	eb4b 0609 	adc.w	r6, fp, r9
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	f04f 0400 	mov.w	r4, #0
 8007c5e:	0094      	lsls	r4, r2, #2
 8007c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c64:	008b      	lsls	r3, r1, #2
 8007c66:	461a      	mov	r2, r3
 8007c68:	4623      	mov	r3, r4
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	f7f9 f82b 	bl	8000cc8 <__aeabi_uldivmod>
 8007c72:	4603      	mov	r3, r0
 8007c74:	460c      	mov	r4, r1
 8007c76:	461a      	mov	r2, r3
 8007c78:	4bb8      	ldr	r3, [pc, #736]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c7e:	095b      	lsrs	r3, r3, #5
 8007c80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	469b      	mov	fp, r3
 8007c88:	f04f 0c00 	mov.w	ip, #0
 8007c8c:	46d9      	mov	r9, fp
 8007c8e:	46e2      	mov	sl, ip
 8007c90:	eb19 0309 	adds.w	r3, r9, r9
 8007c94:	eb4a 040a 	adc.w	r4, sl, sl
 8007c98:	4699      	mov	r9, r3
 8007c9a:	46a2      	mov	sl, r4
 8007c9c:	eb19 090b 	adds.w	r9, r9, fp
 8007ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ca4:	f04f 0100 	mov.w	r1, #0
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cb8:	4689      	mov	r9, r1
 8007cba:	4692      	mov	sl, r2
 8007cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8007cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	f04f 0300 	mov.w	r3, #0
 8007cd2:	f04f 0400 	mov.w	r4, #0
 8007cd6:	0094      	lsls	r4, r2, #2
 8007cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cdc:	008b      	lsls	r3, r1, #2
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	f7f8 ffef 	bl	8000cc8 <__aeabi_uldivmod>
 8007cea:	4603      	mov	r3, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	2164      	movs	r1, #100	; 0x64
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	3332      	adds	r3, #50	; 0x32
 8007d04:	4a95      	ldr	r2, [pc, #596]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d10:	4498      	add	r8, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	469b      	mov	fp, r3
 8007d16:	f04f 0c00 	mov.w	ip, #0
 8007d1a:	46d9      	mov	r9, fp
 8007d1c:	46e2      	mov	sl, ip
 8007d1e:	eb19 0309 	adds.w	r3, r9, r9
 8007d22:	eb4a 040a 	adc.w	r4, sl, sl
 8007d26:	4699      	mov	r9, r3
 8007d28:	46a2      	mov	sl, r4
 8007d2a:	eb19 090b 	adds.w	r9, r9, fp
 8007d2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d32:	f04f 0100 	mov.w	r1, #0
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d46:	4689      	mov	r9, r1
 8007d48:	4692      	mov	sl, r2
 8007d4a:	eb1b 0509 	adds.w	r5, fp, r9
 8007d4e:	eb4c 060a 	adc.w	r6, ip, sl
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	4619      	mov	r1, r3
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	f04f 0400 	mov.w	r4, #0
 8007d64:	0094      	lsls	r4, r2, #2
 8007d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d6a:	008b      	lsls	r3, r1, #2
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4623      	mov	r3, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	4631      	mov	r1, r6
 8007d74:	f7f8 ffa8 	bl	8000cc8 <__aeabi_uldivmod>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4b77      	ldr	r3, [pc, #476]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007d80:	fba3 1302 	umull	r1, r3, r3, r2
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	2164      	movs	r1, #100	; 0x64
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	3332      	adds	r3, #50	; 0x32
 8007d92:	4a72      	ldr	r2, [pc, #456]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007d94:	fba2 2303 	umull	r2, r3, r2, r3
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f003 020f 	and.w	r2, r3, #15
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4442      	add	r2, r8
 8007da4:	609a      	str	r2, [r3, #8]
 8007da6:	e0d0      	b.n	8007f4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007da8:	f7fe fe06 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8007dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	469a      	mov	sl, r3
 8007db2:	f04f 0b00 	mov.w	fp, #0
 8007db6:	46d0      	mov	r8, sl
 8007db8:	46d9      	mov	r9, fp
 8007dba:	eb18 0308 	adds.w	r3, r8, r8
 8007dbe:	eb49 0409 	adc.w	r4, r9, r9
 8007dc2:	4698      	mov	r8, r3
 8007dc4:	46a1      	mov	r9, r4
 8007dc6:	eb18 080a 	adds.w	r8, r8, sl
 8007dca:	eb49 090b 	adc.w	r9, r9, fp
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007de2:	4688      	mov	r8, r1
 8007de4:	4691      	mov	r9, r2
 8007de6:	eb1a 0508 	adds.w	r5, sl, r8
 8007dea:	eb4b 0609 	adc.w	r6, fp, r9
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	f04f 0400 	mov.w	r4, #0
 8007e00:	0094      	lsls	r4, r2, #2
 8007e02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e06:	008b      	lsls	r3, r1, #2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	4631      	mov	r1, r6
 8007e10:	f7f8 ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8007e14:	4603      	mov	r3, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b50      	ldr	r3, [pc, #320]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	469b      	mov	fp, r3
 8007e2a:	f04f 0c00 	mov.w	ip, #0
 8007e2e:	46d9      	mov	r9, fp
 8007e30:	46e2      	mov	sl, ip
 8007e32:	eb19 0309 	adds.w	r3, r9, r9
 8007e36:	eb4a 040a 	adc.w	r4, sl, sl
 8007e3a:	4699      	mov	r9, r3
 8007e3c:	46a2      	mov	sl, r4
 8007e3e:	eb19 090b 	adds.w	r9, r9, fp
 8007e42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e5a:	4689      	mov	r9, r1
 8007e5c:	4692      	mov	sl, r2
 8007e5e:	eb1b 0509 	adds.w	r5, fp, r9
 8007e62:	eb4c 060a 	adc.w	r6, ip, sl
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	f04f 0400 	mov.w	r4, #0
 8007e78:	0094      	lsls	r4, r2, #2
 8007e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e7e:	008b      	lsls	r3, r1, #2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4623      	mov	r3, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	4631      	mov	r1, r6
 8007e88:	f7f8 ff1e 	bl	8000cc8 <__aeabi_uldivmod>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	461a      	mov	r2, r3
 8007e92:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007e94:	fba3 1302 	umull	r1, r3, r3, r2
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	2164      	movs	r1, #100	; 0x64
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	3332      	adds	r3, #50	; 0x32
 8007ea6:	4a2d      	ldr	r2, [pc, #180]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	095b      	lsrs	r3, r3, #5
 8007eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eb2:	4498      	add	r8, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	469b      	mov	fp, r3
 8007eb8:	f04f 0c00 	mov.w	ip, #0
 8007ebc:	46d9      	mov	r9, fp
 8007ebe:	46e2      	mov	sl, ip
 8007ec0:	eb19 0309 	adds.w	r3, r9, r9
 8007ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ec8:	4699      	mov	r9, r3
 8007eca:	46a2      	mov	sl, r4
 8007ecc:	eb19 090b 	adds.w	r9, r9, fp
 8007ed0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ee8:	4689      	mov	r9, r1
 8007eea:	4692      	mov	sl, r2
 8007eec:	eb1b 0509 	adds.w	r5, fp, r9
 8007ef0:	eb4c 060a 	adc.w	r6, ip, sl
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	f04f 0400 	mov.w	r4, #0
 8007f06:	0094      	lsls	r4, r2, #2
 8007f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f0c:	008b      	lsls	r3, r1, #2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4623      	mov	r3, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	4631      	mov	r1, r6
 8007f16:	f7f8 fed7 	bl	8000cc8 <__aeabi_uldivmod>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007f22:	fba3 1302 	umull	r1, r3, r3, r2
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	2164      	movs	r1, #100	; 0x64
 8007f2a:	fb01 f303 	mul.w	r3, r1, r3
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	3332      	adds	r3, #50	; 0x32
 8007f34:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <UART_SetConfig+0x6f4>)
 8007f36:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4442      	add	r2, r8
 8007f46:	609a      	str	r2, [r3, #8]
}
 8007f48:	e7ff      	b.n	8007f4a <UART_SetConfig+0x6e2>
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f54:	40011000 	.word	0x40011000
 8007f58:	40011400 	.word	0x40011400
 8007f5c:	51eb851f 	.word	0x51eb851f

08007f60 <__errno>:
 8007f60:	4b01      	ldr	r3, [pc, #4]	; (8007f68 <__errno+0x8>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	2000000c 	.word	0x2000000c

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4e0d      	ldr	r6, [pc, #52]	; (8007fa4 <__libc_init_array+0x38>)
 8007f70:	4c0d      	ldr	r4, [pc, #52]	; (8007fa8 <__libc_init_array+0x3c>)
 8007f72:	1ba4      	subs	r4, r4, r6
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	2500      	movs	r5, #0
 8007f78:	42a5      	cmp	r5, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	4e0b      	ldr	r6, [pc, #44]	; (8007fac <__libc_init_array+0x40>)
 8007f7e:	4c0c      	ldr	r4, [pc, #48]	; (8007fb0 <__libc_init_array+0x44>)
 8007f80:	f000 fc28 	bl	80087d4 <_init>
 8007f84:	1ba4      	subs	r4, r4, r6
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	2500      	movs	r5, #0
 8007f8a:	42a5      	cmp	r5, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f94:	4798      	blx	r3
 8007f96:	3501      	adds	r5, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f9e:	4798      	blx	r3
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	0800898c 	.word	0x0800898c
 8007fa8:	0800898c 	.word	0x0800898c
 8007fac:	0800898c 	.word	0x0800898c
 8007fb0:	08008990 	.word	0x08008990

08007fb4 <memcpy>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	1e43      	subs	r3, r0, #1
 8007fb8:	440a      	add	r2, r1
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	d100      	bne.n	8007fc0 <memcpy+0xc>
 8007fbe:	bd10      	pop	{r4, pc}
 8007fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc8:	e7f7      	b.n	8007fba <memcpy+0x6>

08007fca <memset>:
 8007fca:	4402      	add	r2, r0
 8007fcc:	4603      	mov	r3, r0
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d100      	bne.n	8007fd4 <memset+0xa>
 8007fd2:	4770      	bx	lr
 8007fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd8:	e7f9      	b.n	8007fce <memset+0x4>
	...

08007fdc <_vsiprintf_r>:
 8007fdc:	b500      	push	{lr}
 8007fde:	b09b      	sub	sp, #108	; 0x6c
 8007fe0:	9100      	str	r1, [sp, #0]
 8007fe2:	9104      	str	r1, [sp, #16]
 8007fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fe8:	9105      	str	r1, [sp, #20]
 8007fea:	9102      	str	r1, [sp, #8]
 8007fec:	4905      	ldr	r1, [pc, #20]	; (8008004 <_vsiprintf_r+0x28>)
 8007fee:	9103      	str	r1, [sp, #12]
 8007ff0:	4669      	mov	r1, sp
 8007ff2:	f000 f86d 	bl	80080d0 <_svfiprintf_r>
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	b01b      	add	sp, #108	; 0x6c
 8007ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008002:	bf00      	nop
 8008004:	ffff0208 	.word	0xffff0208

08008008 <vsiprintf>:
 8008008:	4613      	mov	r3, r2
 800800a:	460a      	mov	r2, r1
 800800c:	4601      	mov	r1, r0
 800800e:	4802      	ldr	r0, [pc, #8]	; (8008018 <vsiprintf+0x10>)
 8008010:	6800      	ldr	r0, [r0, #0]
 8008012:	f7ff bfe3 	b.w	8007fdc <_vsiprintf_r>
 8008016:	bf00      	nop
 8008018:	2000000c 	.word	0x2000000c

0800801c <__ssputs_r>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	688e      	ldr	r6, [r1, #8]
 8008022:	429e      	cmp	r6, r3
 8008024:	4682      	mov	sl, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4690      	mov	r8, r2
 800802a:	4699      	mov	r9, r3
 800802c:	d837      	bhi.n	800809e <__ssputs_r+0x82>
 800802e:	898a      	ldrh	r2, [r1, #12]
 8008030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008034:	d031      	beq.n	800809a <__ssputs_r+0x7e>
 8008036:	6825      	ldr	r5, [r4, #0]
 8008038:	6909      	ldr	r1, [r1, #16]
 800803a:	1a6f      	subs	r7, r5, r1
 800803c:	6965      	ldr	r5, [r4, #20]
 800803e:	2302      	movs	r3, #2
 8008040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008044:	fb95 f5f3 	sdiv	r5, r5, r3
 8008048:	f109 0301 	add.w	r3, r9, #1
 800804c:	443b      	add	r3, r7
 800804e:	429d      	cmp	r5, r3
 8008050:	bf38      	it	cc
 8008052:	461d      	movcc	r5, r3
 8008054:	0553      	lsls	r3, r2, #21
 8008056:	d530      	bpl.n	80080ba <__ssputs_r+0x9e>
 8008058:	4629      	mov	r1, r5
 800805a:	f000 fb21 	bl	80086a0 <_malloc_r>
 800805e:	4606      	mov	r6, r0
 8008060:	b950      	cbnz	r0, 8008078 <__ssputs_r+0x5c>
 8008062:	230c      	movs	r3, #12
 8008064:	f8ca 3000 	str.w	r3, [sl]
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008078:	463a      	mov	r2, r7
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	f7ff ff9a 	bl	8007fb4 <memcpy>
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	6126      	str	r6, [r4, #16]
 800808e:	6165      	str	r5, [r4, #20]
 8008090:	443e      	add	r6, r7
 8008092:	1bed      	subs	r5, r5, r7
 8008094:	6026      	str	r6, [r4, #0]
 8008096:	60a5      	str	r5, [r4, #8]
 8008098:	464e      	mov	r6, r9
 800809a:	454e      	cmp	r6, r9
 800809c:	d900      	bls.n	80080a0 <__ssputs_r+0x84>
 800809e:	464e      	mov	r6, r9
 80080a0:	4632      	mov	r2, r6
 80080a2:	4641      	mov	r1, r8
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	f000 fa93 	bl	80085d0 <memmove>
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	1b9b      	subs	r3, r3, r6
 80080ae:	60a3      	str	r3, [r4, #8]
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	441e      	add	r6, r3
 80080b4:	6026      	str	r6, [r4, #0]
 80080b6:	2000      	movs	r0, #0
 80080b8:	e7dc      	b.n	8008074 <__ssputs_r+0x58>
 80080ba:	462a      	mov	r2, r5
 80080bc:	f000 fb4a 	bl	8008754 <_realloc_r>
 80080c0:	4606      	mov	r6, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1e2      	bne.n	800808c <__ssputs_r+0x70>
 80080c6:	6921      	ldr	r1, [r4, #16]
 80080c8:	4650      	mov	r0, sl
 80080ca:	f000 fa9b 	bl	8008604 <_free_r>
 80080ce:	e7c8      	b.n	8008062 <__ssputs_r+0x46>

080080d0 <_svfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	461d      	mov	r5, r3
 80080d6:	898b      	ldrh	r3, [r1, #12]
 80080d8:	061f      	lsls	r7, r3, #24
 80080da:	b09d      	sub	sp, #116	; 0x74
 80080dc:	4680      	mov	r8, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	4616      	mov	r6, r2
 80080e2:	d50f      	bpl.n	8008104 <_svfiprintf_r+0x34>
 80080e4:	690b      	ldr	r3, [r1, #16]
 80080e6:	b96b      	cbnz	r3, 8008104 <_svfiprintf_r+0x34>
 80080e8:	2140      	movs	r1, #64	; 0x40
 80080ea:	f000 fad9 	bl	80086a0 <_malloc_r>
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	6120      	str	r0, [r4, #16]
 80080f2:	b928      	cbnz	r0, 8008100 <_svfiprintf_r+0x30>
 80080f4:	230c      	movs	r3, #12
 80080f6:	f8c8 3000 	str.w	r3, [r8]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	e0c8      	b.n	8008292 <_svfiprintf_r+0x1c2>
 8008100:	2340      	movs	r3, #64	; 0x40
 8008102:	6163      	str	r3, [r4, #20]
 8008104:	2300      	movs	r3, #0
 8008106:	9309      	str	r3, [sp, #36]	; 0x24
 8008108:	2320      	movs	r3, #32
 800810a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800810e:	2330      	movs	r3, #48	; 0x30
 8008110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008114:	9503      	str	r5, [sp, #12]
 8008116:	f04f 0b01 	mov.w	fp, #1
 800811a:	4637      	mov	r7, r6
 800811c:	463d      	mov	r5, r7
 800811e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008122:	b10b      	cbz	r3, 8008128 <_svfiprintf_r+0x58>
 8008124:	2b25      	cmp	r3, #37	; 0x25
 8008126:	d13e      	bne.n	80081a6 <_svfiprintf_r+0xd6>
 8008128:	ebb7 0a06 	subs.w	sl, r7, r6
 800812c:	d00b      	beq.n	8008146 <_svfiprintf_r+0x76>
 800812e:	4653      	mov	r3, sl
 8008130:	4632      	mov	r2, r6
 8008132:	4621      	mov	r1, r4
 8008134:	4640      	mov	r0, r8
 8008136:	f7ff ff71 	bl	800801c <__ssputs_r>
 800813a:	3001      	adds	r0, #1
 800813c:	f000 80a4 	beq.w	8008288 <_svfiprintf_r+0x1b8>
 8008140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008142:	4453      	add	r3, sl
 8008144:	9309      	str	r3, [sp, #36]	; 0x24
 8008146:	783b      	ldrb	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 809d 	beq.w	8008288 <_svfiprintf_r+0x1b8>
 800814e:	2300      	movs	r3, #0
 8008150:	f04f 32ff 	mov.w	r2, #4294967295
 8008154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008160:	931a      	str	r3, [sp, #104]	; 0x68
 8008162:	462f      	mov	r7, r5
 8008164:	2205      	movs	r2, #5
 8008166:	f817 1b01 	ldrb.w	r1, [r7], #1
 800816a:	4850      	ldr	r0, [pc, #320]	; (80082ac <_svfiprintf_r+0x1dc>)
 800816c:	f7f8 f830 	bl	80001d0 <memchr>
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	b9d0      	cbnz	r0, 80081aa <_svfiprintf_r+0xda>
 8008174:	06d9      	lsls	r1, r3, #27
 8008176:	bf44      	itt	mi
 8008178:	2220      	movmi	r2, #32
 800817a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800817e:	071a      	lsls	r2, r3, #28
 8008180:	bf44      	itt	mi
 8008182:	222b      	movmi	r2, #43	; 0x2b
 8008184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008188:	782a      	ldrb	r2, [r5, #0]
 800818a:	2a2a      	cmp	r2, #42	; 0x2a
 800818c:	d015      	beq.n	80081ba <_svfiprintf_r+0xea>
 800818e:	9a07      	ldr	r2, [sp, #28]
 8008190:	462f      	mov	r7, r5
 8008192:	2000      	movs	r0, #0
 8008194:	250a      	movs	r5, #10
 8008196:	4639      	mov	r1, r7
 8008198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800819c:	3b30      	subs	r3, #48	; 0x30
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d94d      	bls.n	800823e <_svfiprintf_r+0x16e>
 80081a2:	b1b8      	cbz	r0, 80081d4 <_svfiprintf_r+0x104>
 80081a4:	e00f      	b.n	80081c6 <_svfiprintf_r+0xf6>
 80081a6:	462f      	mov	r7, r5
 80081a8:	e7b8      	b.n	800811c <_svfiprintf_r+0x4c>
 80081aa:	4a40      	ldr	r2, [pc, #256]	; (80082ac <_svfiprintf_r+0x1dc>)
 80081ac:	1a80      	subs	r0, r0, r2
 80081ae:	fa0b f000 	lsl.w	r0, fp, r0
 80081b2:	4318      	orrs	r0, r3
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	463d      	mov	r5, r7
 80081b8:	e7d3      	b.n	8008162 <_svfiprintf_r+0x92>
 80081ba:	9a03      	ldr	r2, [sp, #12]
 80081bc:	1d11      	adds	r1, r2, #4
 80081be:	6812      	ldr	r2, [r2, #0]
 80081c0:	9103      	str	r1, [sp, #12]
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	db01      	blt.n	80081ca <_svfiprintf_r+0xfa>
 80081c6:	9207      	str	r2, [sp, #28]
 80081c8:	e004      	b.n	80081d4 <_svfiprintf_r+0x104>
 80081ca:	4252      	negs	r2, r2
 80081cc:	f043 0302 	orr.w	r3, r3, #2
 80081d0:	9207      	str	r2, [sp, #28]
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	783b      	ldrb	r3, [r7, #0]
 80081d6:	2b2e      	cmp	r3, #46	; 0x2e
 80081d8:	d10c      	bne.n	80081f4 <_svfiprintf_r+0x124>
 80081da:	787b      	ldrb	r3, [r7, #1]
 80081dc:	2b2a      	cmp	r3, #42	; 0x2a
 80081de:	d133      	bne.n	8008248 <_svfiprintf_r+0x178>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	1d1a      	adds	r2, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	9203      	str	r2, [sp, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bfb8      	it	lt
 80081ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80081f0:	3702      	adds	r7, #2
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	4d2e      	ldr	r5, [pc, #184]	; (80082b0 <_svfiprintf_r+0x1e0>)
 80081f6:	7839      	ldrb	r1, [r7, #0]
 80081f8:	2203      	movs	r2, #3
 80081fa:	4628      	mov	r0, r5
 80081fc:	f7f7 ffe8 	bl	80001d0 <memchr>
 8008200:	b138      	cbz	r0, 8008212 <_svfiprintf_r+0x142>
 8008202:	2340      	movs	r3, #64	; 0x40
 8008204:	1b40      	subs	r0, r0, r5
 8008206:	fa03 f000 	lsl.w	r0, r3, r0
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	4303      	orrs	r3, r0
 800820e:	3701      	adds	r7, #1
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	7839      	ldrb	r1, [r7, #0]
 8008214:	4827      	ldr	r0, [pc, #156]	; (80082b4 <_svfiprintf_r+0x1e4>)
 8008216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800821a:	2206      	movs	r2, #6
 800821c:	1c7e      	adds	r6, r7, #1
 800821e:	f7f7 ffd7 	bl	80001d0 <memchr>
 8008222:	2800      	cmp	r0, #0
 8008224:	d038      	beq.n	8008298 <_svfiprintf_r+0x1c8>
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <_svfiprintf_r+0x1e8>)
 8008228:	bb13      	cbnz	r3, 8008270 <_svfiprintf_r+0x1a0>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3307      	adds	r3, #7
 800822e:	f023 0307 	bic.w	r3, r3, #7
 8008232:	3308      	adds	r3, #8
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008238:	444b      	add	r3, r9
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	e76d      	b.n	800811a <_svfiprintf_r+0x4a>
 800823e:	fb05 3202 	mla	r2, r5, r2, r3
 8008242:	2001      	movs	r0, #1
 8008244:	460f      	mov	r7, r1
 8008246:	e7a6      	b.n	8008196 <_svfiprintf_r+0xc6>
 8008248:	2300      	movs	r3, #0
 800824a:	3701      	adds	r7, #1
 800824c:	9305      	str	r3, [sp, #20]
 800824e:	4619      	mov	r1, r3
 8008250:	250a      	movs	r5, #10
 8008252:	4638      	mov	r0, r7
 8008254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008258:	3a30      	subs	r2, #48	; 0x30
 800825a:	2a09      	cmp	r2, #9
 800825c:	d903      	bls.n	8008266 <_svfiprintf_r+0x196>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c8      	beq.n	80081f4 <_svfiprintf_r+0x124>
 8008262:	9105      	str	r1, [sp, #20]
 8008264:	e7c6      	b.n	80081f4 <_svfiprintf_r+0x124>
 8008266:	fb05 2101 	mla	r1, r5, r1, r2
 800826a:	2301      	movs	r3, #1
 800826c:	4607      	mov	r7, r0
 800826e:	e7f0      	b.n	8008252 <_svfiprintf_r+0x182>
 8008270:	ab03      	add	r3, sp, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	4622      	mov	r2, r4
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <_svfiprintf_r+0x1ec>)
 8008278:	a904      	add	r1, sp, #16
 800827a:	4640      	mov	r0, r8
 800827c:	f3af 8000 	nop.w
 8008280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008284:	4681      	mov	r9, r0
 8008286:	d1d6      	bne.n	8008236 <_svfiprintf_r+0x166>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	065b      	lsls	r3, r3, #25
 800828c:	f53f af35 	bmi.w	80080fa <_svfiprintf_r+0x2a>
 8008290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008292:	b01d      	add	sp, #116	; 0x74
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	ab03      	add	r3, sp, #12
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4622      	mov	r2, r4
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <_svfiprintf_r+0x1ec>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	4640      	mov	r0, r8
 80082a4:	f000 f882 	bl	80083ac <_printf_i>
 80082a8:	e7ea      	b.n	8008280 <_svfiprintf_r+0x1b0>
 80082aa:	bf00      	nop
 80082ac:	08008950 	.word	0x08008950
 80082b0:	08008956 	.word	0x08008956
 80082b4:	0800895a 	.word	0x0800895a
 80082b8:	00000000 	.word	0x00000000
 80082bc:	0800801d 	.word	0x0800801d

080082c0 <_printf_common>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	4691      	mov	r9, r2
 80082c6:	461f      	mov	r7, r3
 80082c8:	688a      	ldr	r2, [r1, #8]
 80082ca:	690b      	ldr	r3, [r1, #16]
 80082cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bfb8      	it	lt
 80082d4:	4613      	movlt	r3, r2
 80082d6:	f8c9 3000 	str.w	r3, [r9]
 80082da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082de:	4606      	mov	r6, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	b112      	cbz	r2, 80082ea <_printf_common+0x2a>
 80082e4:	3301      	adds	r3, #1
 80082e6:	f8c9 3000 	str.w	r3, [r9]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	0699      	lsls	r1, r3, #26
 80082ee:	bf42      	ittt	mi
 80082f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082f4:	3302      	addmi	r3, #2
 80082f6:	f8c9 3000 	strmi.w	r3, [r9]
 80082fa:	6825      	ldr	r5, [r4, #0]
 80082fc:	f015 0506 	ands.w	r5, r5, #6
 8008300:	d107      	bne.n	8008312 <_printf_common+0x52>
 8008302:	f104 0a19 	add.w	sl, r4, #25
 8008306:	68e3      	ldr	r3, [r4, #12]
 8008308:	f8d9 2000 	ldr.w	r2, [r9]
 800830c:	1a9b      	subs	r3, r3, r2
 800830e:	42ab      	cmp	r3, r5
 8008310:	dc28      	bgt.n	8008364 <_printf_common+0xa4>
 8008312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008316:	6822      	ldr	r2, [r4, #0]
 8008318:	3300      	adds	r3, #0
 800831a:	bf18      	it	ne
 800831c:	2301      	movne	r3, #1
 800831e:	0692      	lsls	r2, r2, #26
 8008320:	d42d      	bmi.n	800837e <_printf_common+0xbe>
 8008322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008326:	4639      	mov	r1, r7
 8008328:	4630      	mov	r0, r6
 800832a:	47c0      	blx	r8
 800832c:	3001      	adds	r0, #1
 800832e:	d020      	beq.n	8008372 <_printf_common+0xb2>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	68e5      	ldr	r5, [r4, #12]
 8008334:	f8d9 2000 	ldr.w	r2, [r9]
 8008338:	f003 0306 	and.w	r3, r3, #6
 800833c:	2b04      	cmp	r3, #4
 800833e:	bf08      	it	eq
 8008340:	1aad      	subeq	r5, r5, r2
 8008342:	68a3      	ldr	r3, [r4, #8]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	f04f 0900 	mov.w	r9, #0
 800835a:	341a      	adds	r4, #26
 800835c:	454d      	cmp	r5, r9
 800835e:	d11a      	bne.n	8008396 <_printf_common+0xd6>
 8008360:	2000      	movs	r0, #0
 8008362:	e008      	b.n	8008376 <_printf_common+0xb6>
 8008364:	2301      	movs	r3, #1
 8008366:	4652      	mov	r2, sl
 8008368:	4639      	mov	r1, r7
 800836a:	4630      	mov	r0, r6
 800836c:	47c0      	blx	r8
 800836e:	3001      	adds	r0, #1
 8008370:	d103      	bne.n	800837a <_printf_common+0xba>
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837a:	3501      	adds	r5, #1
 800837c:	e7c3      	b.n	8008306 <_printf_common+0x46>
 800837e:	18e1      	adds	r1, r4, r3
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	2030      	movs	r0, #48	; 0x30
 8008384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008388:	4422      	add	r2, r4
 800838a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800838e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008392:	3302      	adds	r3, #2
 8008394:	e7c5      	b.n	8008322 <_printf_common+0x62>
 8008396:	2301      	movs	r3, #1
 8008398:	4622      	mov	r2, r4
 800839a:	4639      	mov	r1, r7
 800839c:	4630      	mov	r0, r6
 800839e:	47c0      	blx	r8
 80083a0:	3001      	adds	r0, #1
 80083a2:	d0e6      	beq.n	8008372 <_printf_common+0xb2>
 80083a4:	f109 0901 	add.w	r9, r9, #1
 80083a8:	e7d8      	b.n	800835c <_printf_common+0x9c>
	...

080083ac <_printf_i>:
 80083ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80083b4:	460c      	mov	r4, r1
 80083b6:	7e09      	ldrb	r1, [r1, #24]
 80083b8:	b085      	sub	sp, #20
 80083ba:	296e      	cmp	r1, #110	; 0x6e
 80083bc:	4617      	mov	r7, r2
 80083be:	4606      	mov	r6, r0
 80083c0:	4698      	mov	r8, r3
 80083c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083c4:	f000 80b3 	beq.w	800852e <_printf_i+0x182>
 80083c8:	d822      	bhi.n	8008410 <_printf_i+0x64>
 80083ca:	2963      	cmp	r1, #99	; 0x63
 80083cc:	d036      	beq.n	800843c <_printf_i+0x90>
 80083ce:	d80a      	bhi.n	80083e6 <_printf_i+0x3a>
 80083d0:	2900      	cmp	r1, #0
 80083d2:	f000 80b9 	beq.w	8008548 <_printf_i+0x19c>
 80083d6:	2958      	cmp	r1, #88	; 0x58
 80083d8:	f000 8083 	beq.w	80084e2 <_printf_i+0x136>
 80083dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083e4:	e032      	b.n	800844c <_printf_i+0xa0>
 80083e6:	2964      	cmp	r1, #100	; 0x64
 80083e8:	d001      	beq.n	80083ee <_printf_i+0x42>
 80083ea:	2969      	cmp	r1, #105	; 0x69
 80083ec:	d1f6      	bne.n	80083dc <_printf_i+0x30>
 80083ee:	6820      	ldr	r0, [r4, #0]
 80083f0:	6813      	ldr	r3, [r2, #0]
 80083f2:	0605      	lsls	r5, r0, #24
 80083f4:	f103 0104 	add.w	r1, r3, #4
 80083f8:	d52a      	bpl.n	8008450 <_printf_i+0xa4>
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da03      	bge.n	800840a <_printf_i+0x5e>
 8008402:	222d      	movs	r2, #45	; 0x2d
 8008404:	425b      	negs	r3, r3
 8008406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800840a:	486f      	ldr	r0, [pc, #444]	; (80085c8 <_printf_i+0x21c>)
 800840c:	220a      	movs	r2, #10
 800840e:	e039      	b.n	8008484 <_printf_i+0xd8>
 8008410:	2973      	cmp	r1, #115	; 0x73
 8008412:	f000 809d 	beq.w	8008550 <_printf_i+0x1a4>
 8008416:	d808      	bhi.n	800842a <_printf_i+0x7e>
 8008418:	296f      	cmp	r1, #111	; 0x6f
 800841a:	d020      	beq.n	800845e <_printf_i+0xb2>
 800841c:	2970      	cmp	r1, #112	; 0x70
 800841e:	d1dd      	bne.n	80083dc <_printf_i+0x30>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	f043 0320 	orr.w	r3, r3, #32
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	e003      	b.n	8008432 <_printf_i+0x86>
 800842a:	2975      	cmp	r1, #117	; 0x75
 800842c:	d017      	beq.n	800845e <_printf_i+0xb2>
 800842e:	2978      	cmp	r1, #120	; 0x78
 8008430:	d1d4      	bne.n	80083dc <_printf_i+0x30>
 8008432:	2378      	movs	r3, #120	; 0x78
 8008434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008438:	4864      	ldr	r0, [pc, #400]	; (80085cc <_printf_i+0x220>)
 800843a:	e055      	b.n	80084e8 <_printf_i+0x13c>
 800843c:	6813      	ldr	r3, [r2, #0]
 800843e:	1d19      	adds	r1, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6011      	str	r1, [r2, #0]
 8008444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800844c:	2301      	movs	r3, #1
 800844e:	e08c      	b.n	800856a <_printf_i+0x1be>
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6011      	str	r1, [r2, #0]
 8008454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008458:	bf18      	it	ne
 800845a:	b21b      	sxthne	r3, r3
 800845c:	e7cf      	b.n	80083fe <_printf_i+0x52>
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1d18      	adds	r0, r3, #4
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	0628      	lsls	r0, r5, #24
 8008468:	d501      	bpl.n	800846e <_printf_i+0xc2>
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	e002      	b.n	8008474 <_printf_i+0xc8>
 800846e:	0668      	lsls	r0, r5, #25
 8008470:	d5fb      	bpl.n	800846a <_printf_i+0xbe>
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	4854      	ldr	r0, [pc, #336]	; (80085c8 <_printf_i+0x21c>)
 8008476:	296f      	cmp	r1, #111	; 0x6f
 8008478:	bf14      	ite	ne
 800847a:	220a      	movne	r2, #10
 800847c:	2208      	moveq	r2, #8
 800847e:	2100      	movs	r1, #0
 8008480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008484:	6865      	ldr	r5, [r4, #4]
 8008486:	60a5      	str	r5, [r4, #8]
 8008488:	2d00      	cmp	r5, #0
 800848a:	f2c0 8095 	blt.w	80085b8 <_printf_i+0x20c>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	f021 0104 	bic.w	r1, r1, #4
 8008494:	6021      	str	r1, [r4, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d13d      	bne.n	8008516 <_printf_i+0x16a>
 800849a:	2d00      	cmp	r5, #0
 800849c:	f040 808e 	bne.w	80085bc <_printf_i+0x210>
 80084a0:	4665      	mov	r5, ip
 80084a2:	2a08      	cmp	r2, #8
 80084a4:	d10b      	bne.n	80084be <_printf_i+0x112>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	07db      	lsls	r3, r3, #31
 80084aa:	d508      	bpl.n	80084be <_printf_i+0x112>
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	bfde      	ittt	le
 80084b4:	2330      	movle	r3, #48	; 0x30
 80084b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084be:	ebac 0305 	sub.w	r3, ip, r5
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	f8cd 8000 	str.w	r8, [sp]
 80084c8:	463b      	mov	r3, r7
 80084ca:	aa03      	add	r2, sp, #12
 80084cc:	4621      	mov	r1, r4
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff fef6 	bl	80082c0 <_printf_common>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d14d      	bne.n	8008574 <_printf_i+0x1c8>
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	b005      	add	sp, #20
 80084de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084e2:	4839      	ldr	r0, [pc, #228]	; (80085c8 <_printf_i+0x21c>)
 80084e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084e8:	6813      	ldr	r3, [r2, #0]
 80084ea:	6821      	ldr	r1, [r4, #0]
 80084ec:	1d1d      	adds	r5, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6015      	str	r5, [r2, #0]
 80084f2:	060a      	lsls	r2, r1, #24
 80084f4:	d50b      	bpl.n	800850e <_printf_i+0x162>
 80084f6:	07ca      	lsls	r2, r1, #31
 80084f8:	bf44      	itt	mi
 80084fa:	f041 0120 	orrmi.w	r1, r1, #32
 80084fe:	6021      	strmi	r1, [r4, #0]
 8008500:	b91b      	cbnz	r3, 800850a <_printf_i+0x15e>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	f022 0220 	bic.w	r2, r2, #32
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	2210      	movs	r2, #16
 800850c:	e7b7      	b.n	800847e <_printf_i+0xd2>
 800850e:	064d      	lsls	r5, r1, #25
 8008510:	bf48      	it	mi
 8008512:	b29b      	uxthmi	r3, r3
 8008514:	e7ef      	b.n	80084f6 <_printf_i+0x14a>
 8008516:	4665      	mov	r5, ip
 8008518:	fbb3 f1f2 	udiv	r1, r3, r2
 800851c:	fb02 3311 	mls	r3, r2, r1, r3
 8008520:	5cc3      	ldrb	r3, [r0, r3]
 8008522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008526:	460b      	mov	r3, r1
 8008528:	2900      	cmp	r1, #0
 800852a:	d1f5      	bne.n	8008518 <_printf_i+0x16c>
 800852c:	e7b9      	b.n	80084a2 <_printf_i+0xf6>
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	6961      	ldr	r1, [r4, #20]
 8008534:	1d18      	adds	r0, r3, #4
 8008536:	6010      	str	r0, [r2, #0]
 8008538:	0628      	lsls	r0, r5, #24
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	d501      	bpl.n	8008542 <_printf_i+0x196>
 800853e:	6019      	str	r1, [r3, #0]
 8008540:	e002      	b.n	8008548 <_printf_i+0x19c>
 8008542:	066a      	lsls	r2, r5, #25
 8008544:	d5fb      	bpl.n	800853e <_printf_i+0x192>
 8008546:	8019      	strh	r1, [r3, #0]
 8008548:	2300      	movs	r3, #0
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	4665      	mov	r5, ip
 800854e:	e7b9      	b.n	80084c4 <_printf_i+0x118>
 8008550:	6813      	ldr	r3, [r2, #0]
 8008552:	1d19      	adds	r1, r3, #4
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	681d      	ldr	r5, [r3, #0]
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	2100      	movs	r1, #0
 800855c:	4628      	mov	r0, r5
 800855e:	f7f7 fe37 	bl	80001d0 <memchr>
 8008562:	b108      	cbz	r0, 8008568 <_printf_i+0x1bc>
 8008564:	1b40      	subs	r0, r0, r5
 8008566:	6060      	str	r0, [r4, #4]
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	2300      	movs	r3, #0
 800856e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008572:	e7a7      	b.n	80084c4 <_printf_i+0x118>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	462a      	mov	r2, r5
 8008578:	4639      	mov	r1, r7
 800857a:	4630      	mov	r0, r6
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d0aa      	beq.n	80084d8 <_printf_i+0x12c>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	079b      	lsls	r3, r3, #30
 8008586:	d413      	bmi.n	80085b0 <_printf_i+0x204>
 8008588:	68e0      	ldr	r0, [r4, #12]
 800858a:	9b03      	ldr	r3, [sp, #12]
 800858c:	4298      	cmp	r0, r3
 800858e:	bfb8      	it	lt
 8008590:	4618      	movlt	r0, r3
 8008592:	e7a3      	b.n	80084dc <_printf_i+0x130>
 8008594:	2301      	movs	r3, #1
 8008596:	464a      	mov	r2, r9
 8008598:	4639      	mov	r1, r7
 800859a:	4630      	mov	r0, r6
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d09a      	beq.n	80084d8 <_printf_i+0x12c>
 80085a2:	3501      	adds	r5, #1
 80085a4:	68e3      	ldr	r3, [r4, #12]
 80085a6:	9a03      	ldr	r2, [sp, #12]
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	42ab      	cmp	r3, r5
 80085ac:	dcf2      	bgt.n	8008594 <_printf_i+0x1e8>
 80085ae:	e7eb      	b.n	8008588 <_printf_i+0x1dc>
 80085b0:	2500      	movs	r5, #0
 80085b2:	f104 0919 	add.w	r9, r4, #25
 80085b6:	e7f5      	b.n	80085a4 <_printf_i+0x1f8>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1ac      	bne.n	8008516 <_printf_i+0x16a>
 80085bc:	7803      	ldrb	r3, [r0, #0]
 80085be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c6:	e76c      	b.n	80084a2 <_printf_i+0xf6>
 80085c8:	08008961 	.word	0x08008961
 80085cc:	08008972 	.word	0x08008972

080085d0 <memmove>:
 80085d0:	4288      	cmp	r0, r1
 80085d2:	b510      	push	{r4, lr}
 80085d4:	eb01 0302 	add.w	r3, r1, r2
 80085d8:	d807      	bhi.n	80085ea <memmove+0x1a>
 80085da:	1e42      	subs	r2, r0, #1
 80085dc:	4299      	cmp	r1, r3
 80085de:	d00a      	beq.n	80085f6 <memmove+0x26>
 80085e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80085e8:	e7f8      	b.n	80085dc <memmove+0xc>
 80085ea:	4283      	cmp	r3, r0
 80085ec:	d9f5      	bls.n	80085da <memmove+0xa>
 80085ee:	1881      	adds	r1, r0, r2
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	42d3      	cmn	r3, r2
 80085f4:	d100      	bne.n	80085f8 <memmove+0x28>
 80085f6:	bd10      	pop	{r4, pc}
 80085f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008600:	e7f7      	b.n	80085f2 <memmove+0x22>
	...

08008604 <_free_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4605      	mov	r5, r0
 8008608:	2900      	cmp	r1, #0
 800860a:	d045      	beq.n	8008698 <_free_r+0x94>
 800860c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008610:	1f0c      	subs	r4, r1, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	bfb8      	it	lt
 8008616:	18e4      	addlt	r4, r4, r3
 8008618:	f000 f8d2 	bl	80087c0 <__malloc_lock>
 800861c:	4a1f      	ldr	r2, [pc, #124]	; (800869c <_free_r+0x98>)
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	4610      	mov	r0, r2
 8008622:	b933      	cbnz	r3, 8008632 <_free_r+0x2e>
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	6014      	str	r4, [r2, #0]
 8008628:	4628      	mov	r0, r5
 800862a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862e:	f000 b8c8 	b.w	80087c2 <__malloc_unlock>
 8008632:	42a3      	cmp	r3, r4
 8008634:	d90c      	bls.n	8008650 <_free_r+0x4c>
 8008636:	6821      	ldr	r1, [r4, #0]
 8008638:	1862      	adds	r2, r4, r1
 800863a:	4293      	cmp	r3, r2
 800863c:	bf04      	itt	eq
 800863e:	681a      	ldreq	r2, [r3, #0]
 8008640:	685b      	ldreq	r3, [r3, #4]
 8008642:	6063      	str	r3, [r4, #4]
 8008644:	bf04      	itt	eq
 8008646:	1852      	addeq	r2, r2, r1
 8008648:	6022      	streq	r2, [r4, #0]
 800864a:	6004      	str	r4, [r0, #0]
 800864c:	e7ec      	b.n	8008628 <_free_r+0x24>
 800864e:	4613      	mov	r3, r2
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	b10a      	cbz	r2, 8008658 <_free_r+0x54>
 8008654:	42a2      	cmp	r2, r4
 8008656:	d9fa      	bls.n	800864e <_free_r+0x4a>
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	1858      	adds	r0, r3, r1
 800865c:	42a0      	cmp	r0, r4
 800865e:	d10b      	bne.n	8008678 <_free_r+0x74>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	4401      	add	r1, r0
 8008664:	1858      	adds	r0, r3, r1
 8008666:	4282      	cmp	r2, r0
 8008668:	6019      	str	r1, [r3, #0]
 800866a:	d1dd      	bne.n	8008628 <_free_r+0x24>
 800866c:	6810      	ldr	r0, [r2, #0]
 800866e:	6852      	ldr	r2, [r2, #4]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	4401      	add	r1, r0
 8008674:	6019      	str	r1, [r3, #0]
 8008676:	e7d7      	b.n	8008628 <_free_r+0x24>
 8008678:	d902      	bls.n	8008680 <_free_r+0x7c>
 800867a:	230c      	movs	r3, #12
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	e7d3      	b.n	8008628 <_free_r+0x24>
 8008680:	6820      	ldr	r0, [r4, #0]
 8008682:	1821      	adds	r1, r4, r0
 8008684:	428a      	cmp	r2, r1
 8008686:	bf04      	itt	eq
 8008688:	6811      	ldreq	r1, [r2, #0]
 800868a:	6852      	ldreq	r2, [r2, #4]
 800868c:	6062      	str	r2, [r4, #4]
 800868e:	bf04      	itt	eq
 8008690:	1809      	addeq	r1, r1, r0
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	605c      	str	r4, [r3, #4]
 8008696:	e7c7      	b.n	8008628 <_free_r+0x24>
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	20000110 	.word	0x20000110

080086a0 <_malloc_r>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	1ccd      	adds	r5, r1, #3
 80086a4:	f025 0503 	bic.w	r5, r5, #3
 80086a8:	3508      	adds	r5, #8
 80086aa:	2d0c      	cmp	r5, #12
 80086ac:	bf38      	it	cc
 80086ae:	250c      	movcc	r5, #12
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	4606      	mov	r6, r0
 80086b4:	db01      	blt.n	80086ba <_malloc_r+0x1a>
 80086b6:	42a9      	cmp	r1, r5
 80086b8:	d903      	bls.n	80086c2 <_malloc_r+0x22>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	2000      	movs	r0, #0
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	f000 f87d 	bl	80087c0 <__malloc_lock>
 80086c6:	4a21      	ldr	r2, [pc, #132]	; (800874c <_malloc_r+0xac>)
 80086c8:	6814      	ldr	r4, [r2, #0]
 80086ca:	4621      	mov	r1, r4
 80086cc:	b991      	cbnz	r1, 80086f4 <_malloc_r+0x54>
 80086ce:	4c20      	ldr	r4, [pc, #128]	; (8008750 <_malloc_r+0xb0>)
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	b91b      	cbnz	r3, 80086dc <_malloc_r+0x3c>
 80086d4:	4630      	mov	r0, r6
 80086d6:	f000 f863 	bl	80087a0 <_sbrk_r>
 80086da:	6020      	str	r0, [r4, #0]
 80086dc:	4629      	mov	r1, r5
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 f85e 	bl	80087a0 <_sbrk_r>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d124      	bne.n	8008732 <_malloc_r+0x92>
 80086e8:	230c      	movs	r3, #12
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f868 	bl	80087c2 <__malloc_unlock>
 80086f2:	e7e4      	b.n	80086be <_malloc_r+0x1e>
 80086f4:	680b      	ldr	r3, [r1, #0]
 80086f6:	1b5b      	subs	r3, r3, r5
 80086f8:	d418      	bmi.n	800872c <_malloc_r+0x8c>
 80086fa:	2b0b      	cmp	r3, #11
 80086fc:	d90f      	bls.n	800871e <_malloc_r+0x7e>
 80086fe:	600b      	str	r3, [r1, #0]
 8008700:	50cd      	str	r5, [r1, r3]
 8008702:	18cc      	adds	r4, r1, r3
 8008704:	4630      	mov	r0, r6
 8008706:	f000 f85c 	bl	80087c2 <__malloc_unlock>
 800870a:	f104 000b 	add.w	r0, r4, #11
 800870e:	1d23      	adds	r3, r4, #4
 8008710:	f020 0007 	bic.w	r0, r0, #7
 8008714:	1ac3      	subs	r3, r0, r3
 8008716:	d0d3      	beq.n	80086c0 <_malloc_r+0x20>
 8008718:	425a      	negs	r2, r3
 800871a:	50e2      	str	r2, [r4, r3]
 800871c:	e7d0      	b.n	80086c0 <_malloc_r+0x20>
 800871e:	428c      	cmp	r4, r1
 8008720:	684b      	ldr	r3, [r1, #4]
 8008722:	bf16      	itet	ne
 8008724:	6063      	strne	r3, [r4, #4]
 8008726:	6013      	streq	r3, [r2, #0]
 8008728:	460c      	movne	r4, r1
 800872a:	e7eb      	b.n	8008704 <_malloc_r+0x64>
 800872c:	460c      	mov	r4, r1
 800872e:	6849      	ldr	r1, [r1, #4]
 8008730:	e7cc      	b.n	80086cc <_malloc_r+0x2c>
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d005      	beq.n	8008748 <_malloc_r+0xa8>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f82e 	bl	80087a0 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d0cf      	beq.n	80086e8 <_malloc_r+0x48>
 8008748:	6025      	str	r5, [r4, #0]
 800874a:	e7db      	b.n	8008704 <_malloc_r+0x64>
 800874c:	20000110 	.word	0x20000110
 8008750:	20000114 	.word	0x20000114

08008754 <_realloc_r>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	4607      	mov	r7, r0
 8008758:	4614      	mov	r4, r2
 800875a:	460e      	mov	r6, r1
 800875c:	b921      	cbnz	r1, 8008768 <_realloc_r+0x14>
 800875e:	4611      	mov	r1, r2
 8008760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008764:	f7ff bf9c 	b.w	80086a0 <_malloc_r>
 8008768:	b922      	cbnz	r2, 8008774 <_realloc_r+0x20>
 800876a:	f7ff ff4b 	bl	8008604 <_free_r>
 800876e:	4625      	mov	r5, r4
 8008770:	4628      	mov	r0, r5
 8008772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008774:	f000 f826 	bl	80087c4 <_malloc_usable_size_r>
 8008778:	42a0      	cmp	r0, r4
 800877a:	d20f      	bcs.n	800879c <_realloc_r+0x48>
 800877c:	4621      	mov	r1, r4
 800877e:	4638      	mov	r0, r7
 8008780:	f7ff ff8e 	bl	80086a0 <_malloc_r>
 8008784:	4605      	mov	r5, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	d0f2      	beq.n	8008770 <_realloc_r+0x1c>
 800878a:	4631      	mov	r1, r6
 800878c:	4622      	mov	r2, r4
 800878e:	f7ff fc11 	bl	8007fb4 <memcpy>
 8008792:	4631      	mov	r1, r6
 8008794:	4638      	mov	r0, r7
 8008796:	f7ff ff35 	bl	8008604 <_free_r>
 800879a:	e7e9      	b.n	8008770 <_realloc_r+0x1c>
 800879c:	4635      	mov	r5, r6
 800879e:	e7e7      	b.n	8008770 <_realloc_r+0x1c>

080087a0 <_sbrk_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4c06      	ldr	r4, [pc, #24]	; (80087bc <_sbrk_r+0x1c>)
 80087a4:	2300      	movs	r3, #0
 80087a6:	4605      	mov	r5, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	f7fb fa1e 	bl	8003bec <_sbrk>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_sbrk_r+0x1a>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_sbrk_r+0x1a>
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	2000c148 	.word	0x2000c148

080087c0 <__malloc_lock>:
 80087c0:	4770      	bx	lr

080087c2 <__malloc_unlock>:
 80087c2:	4770      	bx	lr

080087c4 <_malloc_usable_size_r>:
 80087c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c8:	1f18      	subs	r0, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfbc      	itt	lt
 80087ce:	580b      	ldrlt	r3, [r1, r0]
 80087d0:	18c0      	addlt	r0, r0, r3
 80087d2:	4770      	bx	lr

080087d4 <_init>:
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d6:	bf00      	nop
 80087d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087da:	bc08      	pop	{r3}
 80087dc:	469e      	mov	lr, r3
 80087de:	4770      	bx	lr

080087e0 <_fini>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	bf00      	nop
 80087e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e6:	bc08      	pop	{r3}
 80087e8:	469e      	mov	lr, r3
 80087ea:	4770      	bx	lr
